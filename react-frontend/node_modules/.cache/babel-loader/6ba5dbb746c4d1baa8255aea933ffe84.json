{"ast":null,"code":"var _jsxFileName = \"/home/menekou/projects/react/shortest-path/react-frontend/src/Map/Map.js\";\nimport React, { useState, useContext, useEffect, useMemo, useCallback } from 'react';\nimport UserContext from \"../UserContext\";\nimport { useMutation } from '@apollo/client';\nimport MapHelper from '../Helpers/MapHelper';\nimport './Map.css';\nimport Square from '../Square/Square';\nimport MenuContext from '../MenuContext';\nimport AStar from '../Algorithms/AStar';\nimport AStarBiDirectional from '../Algorithms/Bi-Directional/AStar';\nimport Dijkstra from '../Algorithms/Dijkstra';\nimport DijkstraBiDirectional from '../Algorithms/Bi-Directional/Dijkstra';\nimport BFS from '../Algorithms/BFS';\nimport BFSBiDirectional from '../Algorithms/Bi-Directional/BFS';\nimport DFS from '../Algorithms/DFS';\nimport GreedyBFS from '../Algorithms/GreedyBFS';\nimport GreedyBFSBiDirectional from '../Algorithms/Bi-Directional/GreedyBFS';\n\nfunction Map(props) {\n  const {\n    user\n  } = useContext(UserContext);\n  const {\n    menuState,\n    dispatch\n  } = useContext(MenuContext);\n  const [state, setState] = useState({\n    rows: 15,\n    cols: 50,\n    grid: props.userMap ? Array.from(props.userMap) : new Array(15 * 50).fill({\n      val: false,\n      type: null\n    }).map((square, i) => {\n      return { ...square,\n        x: i % 50,\n        y: Math.abs((i - i % 50) / 50)\n      };\n    }),\n    //space-time O(1)\n    itemState: menuState.itemState,\n    userMap: props.userMap ? Array.from(props.userMap) : null\n  });\n  const [saveMap, {\n    error: saveMapError,\n    data: saveMapData\n  }] = useMutation(MapHelper.saveMap);\n  const [editMap, {\n    error: editMapError,\n    data: editMapData\n  }] = useMutation(MapHelper.editMap);\n  const {\n    state: memState\n  } = useMemo(() => ({\n    state\n  }), [state]); //If item button is changed\n\n  useEffect(() => {\n    setState(memState => {\n      return { ...memState,\n        itemState: menuState.itemState\n      };\n    });\n  }, [menuState.itemState]);\n  useEffect(() => {\n    if (menuState.isResetting === true) {\n      if (memState.userMap) {\n        setState(memState => ({ ...memState,\n          grid: memState.grid.map((square, index) => {\n            if (square !== memState.userMap[index]) {\n              return { ...memState.userMap[index]\n              };\n            }\n\n            return { ...square\n            };\n          })\n        }));\n        return dispatch({\n          type: \"reset\"\n        });\n      }\n\n      setState(memState => ({ ...memState,\n        grid: new Array(15 * 50).fill({\n          val: false,\n          type: null\n        }).map((square, i) => {\n          return { ...square,\n            x: i % 50,\n            y: Math.abs((i - i % 50) / 50)\n          };\n        })\n      }));\n      return dispatch({\n        type: \"reset\"\n      });\n    }\n  }, [menuState.isResetting, memState.userMap, dispatch]); //If menu clear button is clicked\n\n  useEffect(() => {\n    if (menuState.clear === true) {\n      setState(memState => ({ ...memState,\n        grid: memState.grid.map((square, index) => {\n          if (square.type !== \"start\" && square.type !== \"end\") {\n            return { ...square,\n              val: false,\n              type: null\n            };\n          }\n\n          return { ...square\n          };\n        })\n      }));\n      return dispatch({\n        type: \"cleared\"\n      });\n    }\n  }, [menuState.clear, dispatch]); //If menu clear path button is clicked\n\n  useEffect(() => {\n    if (menuState.pathClear === true) {\n      setState(memState => ({ ...memState,\n        grid: memState.grid.map((square, index) => {\n          if (square.type !== \"start\" && square.type !== \"end\" && square.type !== \"wall\") {\n            return { ...square,\n              val: false,\n              type: null\n            };\n          }\n\n          return { ...square\n          };\n        })\n      }));\n      return dispatch({\n        type: \"pathCleared\"\n      });\n    }\n  }, [menuState.pathClear, dispatch]);\n  useEffect(() => {\n    if (menuState.isSaving) {\n      if (menuState.isEdit) {\n        const map = Array.from(memState.grid);\n        map.forEach((square, index) => {\n          if (square.type === \"path\" || square.type === \"openset\" || square.type === \"neighbors\") {\n            map[index] = { ...map[index],\n              val: false,\n              type: null\n            };\n          }\n\n          return { ...map[index]\n          };\n        });\n        console.log(map);\n        saveMap({\n          variables: {\n            username: user.username,\n            mapName: menuState.mapName,\n            map: map\n          }\n        });\n      } else {\n        //saving map\n        const map = Array.from(memState.grid);\n        map.forEach((square, index) => {\n          if (square.type === \"path\" || square.type === \"openset\" || square.type === \"neighbors\") {\n            map[index] = { ...map[index],\n              val: false,\n              type: null\n            };\n          }\n\n          return { ...map[index]\n          };\n        });\n        console.log(map);\n        saveMap({\n          variables: {\n            username: user.username,\n            mapName: menuState.mapName,\n            map: map\n          }\n        });\n      }\n    }\n  }, [menuState.isSaving, menuState.mapName, memState.grid, user.username, saveMap, dispatch]);\n  useEffect(() => {\n    if (menuState.isSaving) {\n      if (saveMapError) {\n        console.log(saveMapError);\n        return dispatch({\n          type: \"save\"\n        });\n      }\n\n      if (saveMapData) {\n        console.log(saveMapData);\n        return dispatch({\n          type: \"save\"\n        });\n      }\n    }\n  }, [menuState.isSaving, saveMapError, saveMapData, dispatch]);\n  const drawPath = useCallback(newState => {\n    setTimeout(() => {\n      if (menuState.run) {\n        setState({ ...newState,\n          //newState object is immutable so updates have to be done this way\n          grid: newState.grid\n        });\n      }\n    }, 4);\n  }, [menuState.run]); //If run menu button is clicked\n\n  useEffect(() => {\n    if (menuState.run === true) {\n      let states = null; // Visualize path finding algorithm logic\n      // console.time()\n\n      if (menuState.biDirectional === true) {\n        switch (menuState.algorithm) {\n          case \"astar\":\n            states = AStarBiDirectional(memState.rows, memState.cols, memState.grid, menuState.heuristic, memState, setState, menuState.cutCorners, menuState.allowDiags);\n            break;\n\n          case \"dijkstra\":\n            states = DijkstraBiDirectional(memState.rows, memState.cols, memState.grid, memState, setState, menuState.cutCorners, menuState.allowDiags);\n            break;\n\n          case \"bfs\":\n            states = BFSBiDirectional(memState.rows, memState.cols, memState.grid, memState, setState, menuState.cutCorners, menuState.allowDiags);\n            break;\n\n          case \"dfs\":\n            states = DFS(memState.rows, memState.cols, memState.grid, memState, setState, menuState.cutCorners, menuState.allowDiags);\n            break;\n\n          case \"greedybfs\":\n            states = GreedyBFSBiDirectional(memState.rows, memState.cols, memState.grid, menuState.heuristic, memState, setState, menuState.cutCorners, menuState.allowDiags);\n            break;\n\n          default:\n            console.log(\"Must choose a path finding algorithm\");\n            break;\n        }\n      } else {\n        switch (menuState.algorithm) {\n          case \"astar\":\n            states = AStar(memState.rows, memState.cols, memState.grid, menuState.heuristic, memState, setState, menuState.cutCorners, menuState.allowDiags);\n            break;\n\n          case \"dijkstra\":\n            states = Dijkstra(memState.rows, memState.cols, memState.grid, memState, setState, menuState.cutCorners, menuState.allowDiags);\n            break;\n\n          case \"bfs\":\n            states = BFS(memState.rows, memState.cols, memState.grid, memState, setState, menuState.cutCorners, menuState.allowDiags);\n            break;\n\n          case \"dfs\":\n            states = DFS(memState.rows, memState.cols, memState.grid, memState, setState, menuState.cutCorners, menuState.allowDiags);\n            break;\n\n          case \"greedybfs\":\n            states = GreedyBFS(memState.rows, memState.cols, memState.grid, menuState.heuristic, memState, setState, menuState.cutCorners, menuState.allowDiags);\n            break;\n\n          default:\n            console.log(\"Must choose a path finding algorithm\");\n            break;\n        }\n      } // console.timeEnd()\n\n\n      states.filter((newState, index) => {\n        if (index % 20 === 0) {\n          return newState;\n        }\n\n        if (index === states.length - 1) {\n          return newState;\n        }\n\n        return null;\n      }).map(newState => {\n        drawPath(newState);\n        return null;\n      });\n      return dispatch({\n        type: \"complete\"\n      });\n    }\n  }, [menuState.run, menuState.heuristic, menuState.cutCorners, menuState.allowDiags, menuState.algorithm, menuState.biDirectional, memState.grid, memState.rows, memState.cols, memState, drawPath, dispatch]);\n\n  const renderSquare = (x, y, val) => {\n    return /*#__PURE__*/React.createElement(Square //Minus 4 accounts for width and height\n    , {\n      width: memState.cols > memState.rows ? props.winDimensions.width / memState.cols - 4 : props.winDimensions.width / memState.cols * (Math.min(props.winDimensions.width / memState.cols, props.winDimensions.height / memState.rows) / Math.max(props.winDimensions.width / memState.cols, props.winDimensions.height / memState.rows)) - 4,\n      height: memState.rows === memState.cols ? props.winDimensions.height / memState.rows - 4 //converting aspect ration of the square to 1:1 by multiplying the height by minimum of the width and height divided by the maximum of the width and height\n      : props.winDimensions.height / memState.rows * (Math.min(props.winDimensions.width / memState.cols, props.winDimensions.height / memState.rows) / Math.max(props.winDimensions.width / memState.cols, props.winDimensions.height / memState.rows)) - 4,\n      x: x,\n      y: y,\n      val: val,\n      squareClick: (x, y) => handleClick(x, y),\n      type: memState.grid[x + y * memState.cols].type,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 13\n      }\n    });\n  };\n\n  const renderMap = () => {\n    //TODO: use x y variables set per index for this instead\n    //space-time O(1)\n    const rows = Array(memState.rows); //each row will contain an array of 50 available indexes\n\n    const cols = Array(memState.rows); //time O(n)\n\n    for (let i = 0; i < memState.grid.length; i++) {\n      if (i % memState.cols === 0) {\n        cols[i / memState.cols] = Array(memState.cols); //space-time O(1)\n\n        rows[i] = /*#__PURE__*/React.createElement(\"div\", {\n          className: \"grid-row\",\n          key: i / memState.cols,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 21\n          }\n        }, cols[i / memState.cols]);\n      }\n\n      let square = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"grid-col\",\n        key: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 17\n        }\n      }, renderSquare(i % memState.cols, Math.abs((i - i % memState.cols) / memState.cols), memState.grid[i].val));\n      cols[(i - i % memState.cols) / memState.cols][i % memState.cols] = square;\n    }\n\n    const map = rows;\n    return map;\n  };\n\n  const handleClick = (x, y) => {\n    switch (memState.itemState) {\n      case \"start\":\n        setState(memState => ({ ...memState,\n          //state object is immutable so updates have to be done this way\n          grid: memState.grid.map((square, index) => {\n            if (index === x + y * memState.cols) {\n              // console.log(x,y,square.type,memState.itemState);\n              if (square.type === memState.itemState || !square.val) {\n                return square.val ? { ...square,\n                  val: false,\n                  type: null\n                } : { ...square,\n                  val: true,\n                  type: memState.itemState\n                };\n              }\n            }\n\n            if (square.type === memState.itemState && square.val && !memState.grid[x + y * memState.cols].val) {\n              return { ...square,\n                val: false,\n                type: null\n              };\n            }\n\n            return { ...square\n            };\n          })\n        }));\n        break;\n\n      case \"wall\":\n        setState(memState => ({ ...memState,\n          //state object is immutable so updates have to be done this way\n          grid: memState.grid.map((square, index) => {\n            if (index === x + y * memState.cols) {\n              // console.log(x,y,square.type,state.itemState);\n              if (square.type === memState.itemState || !square.val) {\n                return square.val ? { ...square,\n                  val: false,\n                  type: null\n                } : { ...square,\n                  val: true,\n                  type: memState.itemState\n                };\n              }\n            }\n\n            return { ...square\n            };\n          })\n        }));\n        break;\n\n      case \"end\":\n        setState(memState => ({ ...memState,\n          //state object is immutable so updates have to be done this way\n          grid: memState.grid.map((square, index) => {\n            if (index === x + y * memState.cols) {\n              // console.log(x,y,square.type,state.itemState);\n              if (square.type === memState.itemState || !square.val) {\n                return square.val ? { ...square,\n                  val: false,\n                  type: null\n                } : { ...square,\n                  val: true,\n                  type: memState.itemState\n                };\n              }\n            }\n\n            if (square.type === memState.itemState && square.val && !memState.grid[x + y * memState.cols].val) {\n              return { ...square,\n                val: false,\n                type: null\n              };\n            }\n\n            return { ...square\n            };\n          })\n        }));\n        break;\n\n      default:\n        break;\n    }\n\n    return;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"map\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 9\n    }\n  }, renderMap());\n}\n\nexport default Map;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Map/Map.js"],"names":["React","useState","useContext","useEffect","useMemo","useCallback","UserContext","useMutation","MapHelper","Square","MenuContext","AStar","AStarBiDirectional","Dijkstra","DijkstraBiDirectional","BFS","BFSBiDirectional","DFS","GreedyBFS","GreedyBFSBiDirectional","Map","props","user","menuState","dispatch","state","setState","rows","cols","grid","userMap","Array","from","fill","val","type","map","square","i","x","y","Math","abs","itemState","saveMap","error","saveMapError","data","saveMapData","editMap","editMapError","editMapData","memState","isResetting","index","clear","pathClear","isSaving","isEdit","forEach","console","log","variables","username","mapName","drawPath","newState","setTimeout","run","states","biDirectional","algorithm","heuristic","cutCorners","allowDiags","filter","length","renderSquare","winDimensions","width","min","height","max","handleClick","renderMap"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect, useMemo, useCallback } from 'react';\nimport UserContext from \"../UserContext\";\nimport { useMutation } from '@apollo/client';\nimport MapHelper from '../Helpers/MapHelper';\nimport './Map.css';\n\nimport Square from '../Square/Square';\nimport MenuContext from '../MenuContext';\nimport AStar from '../Algorithms/AStar';\nimport AStarBiDirectional from '../Algorithms/Bi-Directional/AStar';\nimport Dijkstra from '../Algorithms/Dijkstra';\nimport DijkstraBiDirectional from '../Algorithms/Bi-Directional/Dijkstra';\nimport BFS from '../Algorithms/BFS';\nimport BFSBiDirectional from '../Algorithms/Bi-Directional/BFS';\nimport DFS from '../Algorithms/DFS';\nimport GreedyBFS from '../Algorithms/GreedyBFS';\nimport GreedyBFSBiDirectional from '../Algorithms/Bi-Directional/GreedyBFS';\n\n\nfunction Map(props) {\n    const {user} = useContext(UserContext);\n    const {menuState, dispatch} = useContext(MenuContext);\n    const [state, setState] = useState({\n        rows: 15,\n        cols: 50,\n        grid: props.userMap ? Array.from(props.userMap) : new Array(15*50).fill({val: false, type: null}).map((square, i) => {\n            return {\n                ...square,\n                x: i % 50,\n                y: Math.abs((i - (i % 50)) / 50)\n            }\n        }),//space-time O(1)\n        itemState: menuState.itemState,\n        userMap: props.userMap ? Array.from(props.userMap) : null\n    })\n    const [saveMap, { error: saveMapError, data: saveMapData }] = useMutation(MapHelper.saveMap);\n    const [editMap, { error: editMapError, data: editMapData }] = useMutation(MapHelper.editMap);\n    const { state: memState } = useMemo(() => ({state}), [state])\n\n    //If item button is changed\n    useEffect(() => {\n        setState((memState) => {\n            return {\n                ...memState,\n                itemState: menuState.itemState\n            }\n        })\n    }, [menuState.itemState]);\n\n    useEffect(() => {\n        if(menuState.isResetting === true){\n            if(memState.userMap){\n                setState((memState) => ({\n                    ...memState,\n                    grid: memState.grid.map((square, index) => {\n                        if(square !== memState.userMap[index]){\n                            return {...memState.userMap[index]}\n                        }\n                \n                        return {...square}\n                    }) \n                }))\n                return dispatch({type: \"reset\"});\n            }\n\n            setState((memState) => ({\n                ...memState,\n                grid: new Array(15*50).fill({val: false, type: null}).map((square, i) => {\n                    return {\n                        ...square,\n                        x: i % 50,\n                        y: Math.abs((i - (i % 50)) / 50)\n                    }\n                })\n            }))\n            return dispatch({type: \"reset\"});\n        }\n    }, [menuState.isResetting, memState.userMap, dispatch]);\n\n    //If menu clear button is clicked\n    useEffect(() => {\n        if(menuState.clear === true){\n            setState((memState) => ({\n                ...memState,\n                grid: memState.grid.map((square, index) => {\n                    if(square.type !== \"start\" && square.type !== \"end\"){\n                        return {...square, val: false, type: null}\n                    }\n            \n                    return {...square}\n                })\n            }))\n            return dispatch({type: \"cleared\"});\n        }\n    }, [menuState.clear, dispatch]);\n\n    //If menu clear path button is clicked\n    useEffect(() => {\n        if(menuState.pathClear === true){\n            setState((memState) => ({\n                ...memState,\n                grid: memState.grid.map((square, index) => {\n                    if(square.type !== \"start\" && square.type !== \"end\" && square.type !== \"wall\"){\n                        return {...square, val: false, type: null}\n                    }\n            \n                    return {...square}\n                })\n            }))\n            return dispatch({type: \"pathCleared\"});\n        }\n    }, [menuState.pathClear, dispatch]);\n\n    useEffect(() => {\n        if(menuState.isSaving){\n            if(menuState.isEdit){\n                const map = Array.from(memState.grid);\n\n                map.forEach((square, index) => {\n                    if(square.type === \"path\" || square.type === \"openset\" || square.type === \"neighbors\"){\n                        map[index] = {...map[index], val: false, type: null};\n                    }\n\n                    return {...map[index]};\n                })\n                \n                console.log(map);\n\n                saveMap({\n                    variables: {\n                        username: user.username,\n                        mapName: menuState.mapName,\n                        map: map\n                    }\n                })\n            }else{\n                //saving map\n                const map = Array.from(memState.grid);\n\n                map.forEach((square, index) => {\n                    if(square.type === \"path\" || square.type === \"openset\" || square.type === \"neighbors\"){\n                        map[index] = {...map[index], val: false, type: null};\n                    }\n\n                    return {...map[index]};\n                })\n                \n                console.log(map);\n\n                saveMap({\n                    variables: {\n                        username: user.username,\n                        mapName: menuState.mapName,\n                        map: map\n                    }\n                })\n            }\n        }\n    }, [menuState.isSaving, menuState.mapName, memState.grid, user.username, saveMap, dispatch])\n\n    useEffect(() => {\n        if(menuState.isSaving){\n            \n            if(saveMapError){\n                console.log(saveMapError);\n                return dispatch({type: \"save\"});\n            }\n            \n            if(saveMapData){\n                console.log(saveMapData);\n                return dispatch({type: \"save\"});\n            }\n        }\n        \n    }, [menuState.isSaving, saveMapError, saveMapData, dispatch])\n    \n    const drawPath = useCallback((newState) => {\n        setTimeout(() => {\n            if(menuState.run){\n                setState({\n                    ...newState,\n                    //newState object is immutable so updates have to be done this way\n                    grid: newState.grid\n                }); \n            }\n        }, 4)\n    },[menuState.run])\n\n    //If run menu button is clicked\n    useEffect(() => {\n        if(menuState.run === true){\n            let states = null;\n\n            // Visualize path finding algorithm logic\n            // console.time()\n            if(menuState.biDirectional === true){\n                switch (menuState.algorithm) {\n                    case \"astar\":\n                        states = AStarBiDirectional(memState.rows, memState.cols, memState.grid, menuState.heuristic, memState, setState, menuState.cutCorners, menuState.allowDiags);\n    \n                        break;\n                    case \"dijkstra\":\n                        states = DijkstraBiDirectional(memState.rows, memState.cols, memState.grid, memState, setState, menuState.cutCorners, menuState.allowDiags);\n    \n                        break;\n                    case \"bfs\":\n                        states = BFSBiDirectional(memState.rows, memState.cols, memState.grid, memState, setState, menuState.cutCorners, menuState.allowDiags);\n    \n                        break;\n                    case \"dfs\":\n                        states = DFS(memState.rows, memState.cols, memState.grid, memState, setState, menuState.cutCorners, menuState.allowDiags);\n    \n                        break;\n                    case \"greedybfs\":\n                        states = GreedyBFSBiDirectional(memState.rows, memState.cols, memState.grid, menuState.heuristic, memState, setState, menuState.cutCorners, menuState.allowDiags);\n    \n                        break;\n                    default:\n                        console.log(\"Must choose a path finding algorithm\")\n                        break;\n                }\n            }else{\n                switch (menuState.algorithm) {\n                    case \"astar\":\n                        states = AStar(memState.rows, memState.cols, memState.grid, menuState.heuristic, memState, setState, menuState.cutCorners, menuState.allowDiags);\n    \n                        break;\n                    case \"dijkstra\":\n                        states = Dijkstra(memState.rows, memState.cols, memState.grid, memState, setState, menuState.cutCorners, menuState.allowDiags);\n    \n                        break;\n                    case \"bfs\":\n                        states = BFS(memState.rows, memState.cols, memState.grid, memState, setState, menuState.cutCorners, menuState.allowDiags);\n    \n                        break;\n                    case \"dfs\":\n                        states = DFS(memState.rows, memState.cols, memState.grid, memState, setState, menuState.cutCorners, menuState.allowDiags);\n    \n                        break;\n                    case \"greedybfs\":\n                        states = GreedyBFS(memState.rows, memState.cols, memState.grid, menuState.heuristic, memState, setState, menuState.cutCorners, menuState.allowDiags);\n    \n                        break;\n                    default:\n                        console.log(\"Must choose a path finding algorithm\")\n                        break;\n                }\n            }\n            \n            // console.timeEnd()\n            \n            states\n            .filter((newState, index) => {\n                if(index % 20 === 0){\n                    return newState;\n                }\n\n                if(index === states.length-1){\n                    return newState;\n                }\n\n                return null;\n                \n            })\n            .map((newState) => {\n                drawPath(newState);\n\n                return null\n            })\n\n            return dispatch({type: \"complete\"});\n        }\n    }, [menuState.run, menuState.heuristic, menuState.cutCorners, menuState.allowDiags, menuState.algorithm, menuState.biDirectional, memState.grid, memState.rows, memState.cols, memState, drawPath, dispatch]);\n\n    \n    const renderSquare = (x,y,val) => {\n        return (\n            <Square\n                //Minus 4 accounts for width and height\n                width={\n                    memState.cols > memState.rows\n                        ? (props.winDimensions.width / memState.cols) - 4\n                        : (props.winDimensions.width / memState.cols) * (Math.min((props.winDimensions.width / memState.cols),(props.winDimensions.height / memState.rows)) / Math.max((props.winDimensions.width / memState.cols),(props.winDimensions.height / memState.rows))) - 4 \n                }\n                height={\n                    memState.rows === memState.cols\n                        ? (props.winDimensions.height / memState.rows) - 4\n                        //converting aspect ration of the square to 1:1 by multiplying the height by minimum of the width and height divided by the maximum of the width and height\n                        : (props.winDimensions.height / memState.rows) * (Math.min((props.winDimensions.width / memState.cols),(props.winDimensions.height / memState.rows)) / Math.max((props.winDimensions.width / memState.cols),(props.winDimensions.height / memState.rows))) - 4\n                }\n                x={x}\n                y={y}\n                val={val}\n                squareClick={(x, y) => handleClick(x, y)}\n                type={memState.grid[x + (y * memState.cols)].type}\n            />\n        )\n    }\n\n    const renderMap = () => {\n        //TODO: use x y variables set per index for this instead\n        //space-time O(1)\n        const rows = Array(memState.rows);\n        //each row will contain an array of 50 available indexes\n        const cols = Array(memState.rows);\n\n        //time O(n)\n        for(let i = 0; i < memState.grid.length; i++){\n            if(i % memState.cols === 0){\n                cols[i / memState.cols] = Array(memState.cols)//space-time O(1)\n\n                rows[i] = (\n                    <div className=\"grid-row\" key={i / memState.cols}>\n                        {cols[i / memState.cols]}\n                    </div>\n                )\n            }\n\n            let square = (\n                <div className=\"grid-col\" key={i}>\n                    {renderSquare(i % memState.cols, Math.abs((i - (i % memState.cols)) / memState.cols), memState.grid[i].val)}\n                </div>\n            )\n\n            cols[(i - (i % memState.cols)) / memState.cols][i % memState.cols] = square;\n        }\n\n        const map = rows;\n\n        return map;\n    }\n\n    const handleClick = (x,y) => {\n        switch (memState.itemState) {\n            case \"start\":\n                setState((memState) => ({\n                    ...memState,\n                    //state object is immutable so updates have to be done this way\n                    grid: memState.grid.map((square, index) => {\n                        if(index === x + (y * memState.cols)){\n                            // console.log(x,y,square.type,memState.itemState);\n                            if(square.type === memState.itemState || !square.val){\n                                return square.val\n                                    ? {...square, val: false, type: null}\n                                    : {...square, val: true, type: memState.itemState}\n                            }\n                        }\n\n                        if(square.type === memState.itemState && square.val && !memState.grid[x + (y * memState.cols)].val){\n                            return {...square, val: false, type: null}\n                        }\n\n                        return {...square}\n                    })\n                }));\n                \n                break;\n\n            case \"wall\":\n                setState((memState) => ({\n                    ...memState,\n                    //state object is immutable so updates have to be done this way\n                    grid: memState.grid.map((square, index) => {\n                        if(index === x + (y * memState.cols)){\n                            // console.log(x,y,square.type,state.itemState);\n                            if(square.type === memState.itemState || !square.val){\n                                return square.val\n                                    ? {...square, val: false, type: null}\n                                    : {...square, val: true, type: memState.itemState}\n                            }\n                        }\n\n                        return {...square}\n                    })\n                }));\n\n                break;\n\n            case \"end\":\n                setState((memState) => ({\n                    ...memState,\n                    //state object is immutable so updates have to be done this way\n                    grid: memState.grid.map((square, index) => {\n                        if(index === x + (y * memState.cols)){\n                            // console.log(x,y,square.type,state.itemState);\n                            if(square.type === memState.itemState || !square.val){\n                                return square.val\n                                    ? {...square, val: false, type: null}\n                                    : {...square, val: true, type: memState.itemState}\n                            }\n                        }\n\n                        if(square.type === memState.itemState && square.val && !memState.grid[x + (y * memState.cols)].val){\n                            return {...square, val: false, type: null}\n                        }\n\n                        return {...square}\n                    })\n                }));\n\n                break;\n        \n            default:\n                break;\n        }\n\n        return;\n    }\n    \n\n\n    return (\n        <div id=\"map\">\n            {/* {console.time()} */}\n                {renderMap()}\n            {/* {console.timeEnd()} */}\n        </div>\n    )\n}\n\nexport default Map;"]},"metadata":{},"sourceType":"module"}