{"ast":null,"code":"import Queue from '..//Queue';\n\nfunction getIndex(x, y, cols) {\n  return x + y * cols;\n}\n\nfunction getPoints(gridMap) {\n  let startPoint = null;\n  let endPoints = [];\n  gridMap.map(square => {\n    if (square.val && square.type === \"start\") {\n      // console.log(square);\n      startPoint = square;\n      return null;\n    }\n\n    if (square.val && square.type === \"end\") {\n      // console.log(square);\n      endPoints.push(square);\n      return null;\n    }\n\n    return null;\n  });\n  return [startPoint, endPoints];\n}\n\nfunction getNeighbors(point, gridMap, rows, cols, cutCorners, allowDiags) {\n  //Point                                 Index\n  // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n  // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n  // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n  // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n  // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n  // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n  // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n  // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n  const neighbors = new Array(8);\n\n  if (point.x > 0) {\n    const left = getIndex(point.x - 1, point.y, cols);\n\n    if (gridMap[left].type !== \"wall\" && gridMap[left].type !== \"start\" && gridMap[left].type !== \"end\") {\n      neighbors[0] = gridMap[left];\n    }\n  }\n\n  if (point.x < cols - 1) {\n    const right = getIndex(point.x + 1, point.y, cols);\n\n    if (gridMap[right].type !== \"wall\" && gridMap[right].type !== \"start\" && gridMap[right].type !== \"end\") {\n      neighbors[1] = gridMap[right];\n    }\n  }\n\n  if (point.y > 0) {\n    const up = getIndex(point.x, point.y - 1, cols);\n\n    if (gridMap[up].type !== \"wall\" && gridMap[up].type !== \"start\" && gridMap[up].type !== \"end\") {\n      neighbors[2] = gridMap[up];\n    }\n  }\n\n  if (point.y < rows - 1) {\n    const down = getIndex(point.x, point.y + 1, cols);\n\n    if (gridMap[down].type !== \"wall\" && gridMap[down].type !== \"start\" && gridMap[down].type !== \"end\") {\n      neighbors[3] = gridMap[down];\n    }\n  }\n\n  if (point.x > 0 && point.y > 0) {\n    const topLeft = getIndex(point.x - 1, point.y - 1, cols);\n\n    if (gridMap[topLeft].type !== \"wall\" && gridMap[topLeft].type !== \"start\" && gridMap[topLeft].type !== \"end\") {\n      if (allowDiags) {\n        if (!cutCorners) {\n          if (gridMap[topLeft + 1].type !== \"wall\" && gridMap[topLeft + 50].type !== \"wall\") {\n            neighbors[4] = gridMap[topLeft];\n          }\n        } else {\n          neighbors[4] = gridMap[topLeft];\n        }\n      }\n    }\n  }\n\n  if (point.x < cols - 1 && point.y > 0) {\n    const topRight = getIndex(point.x + 1, point.y - 1, cols);\n\n    if (gridMap[topRight].type !== \"wall\" && gridMap[topRight].type !== \"start\" && gridMap[topRight].type !== \"end\") {\n      if (allowDiags) {\n        if (!cutCorners) {\n          if (gridMap[topRight - 1].type !== \"wall\" && gridMap[topRight + 50].type !== \"wall\") {\n            neighbors[5] = gridMap[topRight];\n          }\n        } else {\n          neighbors[5] = gridMap[topRight];\n        }\n      }\n    }\n  }\n\n  if (point.x > 0 && point.y < rows - 1) {\n    const bottomLeft = getIndex(point.x - 1, point.y + 1, cols);\n\n    if (gridMap[bottomLeft].type !== \"wall\" && gridMap[bottomLeft].type !== \"start\" && gridMap[bottomLeft].type !== \"end\") {\n      if (allowDiags) {\n        if (!cutCorners) {\n          if (gridMap[bottomLeft + 1].type !== \"wall\" && gridMap[bottomLeft - 50].type !== \"wall\") {\n            neighbors[6] = gridMap[bottomLeft];\n          }\n        } else {\n          neighbors[6] = gridMap[bottomLeft];\n        }\n      }\n    }\n  }\n\n  if (point.x < cols - 1 && point.y < rows - 1) {\n    const bottomRight = getIndex(point.x + 1, point.y + 1, cols);\n\n    if (gridMap[bottomRight].type !== \"wall\" && gridMap[bottomRight].type !== \"start\" && gridMap[bottomRight].type !== \"end\") {\n      if (allowDiags) {\n        if (!cutCorners) {\n          if (gridMap[bottomRight - 1].type !== \"wall\" && gridMap[bottomRight - 50].type !== \"wall\") {\n            neighbors[7] = gridMap[bottomRight];\n          }\n        } else {\n          neighbors[7] = gridMap[bottomRight];\n        }\n      }\n    }\n  }\n\n  return neighbors;\n}\n\nfunction BFS(rows, cols, gridMap, memState, setState, cutCorners, allowDiags) {\n  const [startPoint, endPoints] = getPoints(gridMap);\n  const queueLeft = new Queue();\n  const queueRight = new Queue();\n  const discoveredFromLeft = {};\n  const discoveredFromRight = {};\n  const cameFromLeft = {};\n  const cameFromRight = {};\n  const points = {};\n  const states = []; //TODO: Bug, clears grid but then returns it to its previous state\n\n  const newState = { ...memState,\n    grid: new Array(rows * cols).fill({\n      val: false,\n      type: null\n    }).map((square, i) => {\n      return { ...square,\n        x: i % cols,\n        y: Math.abs((i - i % cols) / cols)\n      };\n    })\n  };\n  states.push(newState);\n  const goal = endPoints[0];\n\n  if (!startPoint || !endPoints) {\n    console.log(\"Map must have a start point, and an end point\");\n    return \"Map must have a start point, and an end point\";\n  }\n\n  points[getIndex(startPoint.x, startPoint.y, cols)] = startPoint;\n  cameFromLeft[getIndex(startPoint.x, startPoint.y, cols)] = null;\n  queueLeft.enqueue(points[getIndex(startPoint.x, startPoint.y, cols)]);\n  discoveredFromLeft[getIndex(startPoint.x, startPoint.y, cols)] = \"discovered\";\n  points[getIndex(goal.x, goal.y, cols)] = goal;\n  cameFromRight[getIndex(goal.x, goal.y, cols)] = null;\n  queueRight.enqueue(points[getIndex(goal.x, goal.y, cols)]);\n  discoveredFromRight[getIndex(goal.x, goal.y, cols)] = \"discovered\";\n\n  while (queueLeft.length() > 0 && queueRight.length() > 0) {\n    // console.log(Array.from(queue.getQueue()))\n    const current1 = queueLeft.peek();\n    const current2 = queueRight.peek(); // console.log(\"current\",current);\n\n    queueLeft.dequeue();\n    queueRight.dequeue();\n    const newState = { ...memState,\n      grid: memState.grid.map((square, index) => {\n        if (current1.x === square.x && current1.y === square.y) {\n          if (current1.type !== \"start\" && current1.type !== \"end\") {\n            memState.grid[index] = { ...memState.grid[index],\n              val: true,\n              type: \"neighbors\"\n            };\n          }\n\n          return { ...square\n          };\n        }\n\n        if (current2.x === square.x && current2.y === square.y) {\n          if (current2.type !== \"start\" && current2.type !== \"end\") {\n            memState.grid[index] = { ...memState.grid[index],\n              val: true,\n              type: \"neighbors\"\n            };\n          }\n\n          return { ...square\n          };\n        }\n\n        return { ...square\n        };\n      })\n    };\n    states.push(newState);\n\n    if (discoveredFromLeft[getIndex(current2.x, current2.y, cols)] || discoveredFromRight[getIndex(current1.x, current1.y, cols)]) {\n      let cameFromLeftPoint;\n      let cameFromRightPoint;\n\n      if (discoveredFromLeft[getIndex(current2.x, current2.y, cols)]) {\n        cameFromRightPoint = current2;\n        cameFromLeftPoint = current2;\n      } else if (discoveredFromRight[getIndex(current1.x, current1.y, cols)]) {\n        cameFromRightPoint = current1;\n        cameFromLeftPoint = current1;\n      }\n\n      const state = states[states.length - 1];\n      setState({ // return {\n        ...state,\n        //state object is immutable so updates have to be done this way\n        grid: state.grid.map((square, index) => {\n          if (cameFromLeft[index] || cameFromRight[index]) {\n            if (square.x === cameFromLeftPoint.x && square.y === cameFromLeftPoint.y) {\n              let prev = cameFromLeftPoint;\n\n              while (prev) {\n                if (prev.type !== \"start\") {\n                  state.grid[getIndex(prev.x, prev.y, state.cols)] = { ...state.grid[getIndex(prev.x, prev.y, state.cols)],\n                    val: true,\n                    type: \"path\"\n                  };\n                }\n\n                prev = cameFromRight[getIndex(prev.x, prev.y, state.cols)];\n              }\n            }\n\n            if (square.x === cameFromRightPoint.x && square.y === cameFromRightPoint.y) {\n              let prev = cameFromRightPoint;\n\n              while (prev) {\n                if (prev.type !== \"end\") {\n                  state.grid[getIndex(prev.x, prev.y, state.cols)] = { ...state.grid[getIndex(prev.x, prev.y, state.cols)],\n                    val: true,\n                    type: \"path\"\n                  };\n                }\n\n                prev = cameFromLeft[getIndex(prev.x, prev.y, state.cols)];\n              }\n\n              return { ...square\n              };\n            }\n\n            return { ...square\n            };\n          }\n\n          return { ...square\n          };\n        })\n      });\n      console.log(\"PATH FOUND!!!!!\");\n      return states;\n    }\n\n    ;\n    const neighbors1 = getNeighbors(current1, gridMap, rows, cols, cutCorners, allowDiags);\n    const neighbors2 = getNeighbors(current2, gridMap, rows, cols, cutCorners, allowDiags);\n    neighbors1.map(neighbor => {\n      if (!discoveredFromLeft[getIndex(neighbor.x, neighbor.y, cols)]) {\n        points[getIndex(neighbor.x, neighbor.y, cols)] = neighbor;\n        cameFromLeft[getIndex(neighbor.x, neighbor.y, cols)] = current1;\n        queueLeft.enqueue(points[getIndex(neighbor.x, neighbor.y, cols)]);\n        discoveredFromLeft[getIndex(neighbor.x, neighbor.y, cols)] = \"discovered\";\n        const newState = { ...memState,\n          grid: memState.grid.map((square, index) => {\n            if (neighbor.x === square.x && neighbor.y === square.y) {\n              if (neighbor.type !== \"start\" && neighbor.type !== \"end\") {\n                memState.grid[index] = { ...memState.grid[index],\n                  val: true,\n                  type: \"openset\"\n                };\n              }\n\n              return { ...square\n              };\n            }\n\n            return { ...square\n            };\n          })\n        };\n        states.push(newState);\n      }\n\n      return null;\n    });\n    neighbors2.map(neighbor => {\n      if (!discoveredFromRight[getIndex(neighbor.x, neighbor.y, cols)]) {\n        points[getIndex(neighbor.x, neighbor.y, cols)] = neighbor;\n        cameFromRight[getIndex(neighbor.x, neighbor.y, cols)] = current2;\n        queueRight.enqueue(points[getIndex(neighbor.x, neighbor.y, cols)]);\n        discoveredFromRight[getIndex(neighbor.x, neighbor.y, cols)] = \"discovered\";\n        const newState = { ...memState,\n          grid: memState.grid.map((square, index) => {\n            if (neighbor.x === square.x && neighbor.y === square.y) {\n              if (neighbor.type !== \"start\" && neighbor.type !== \"end\") {\n                memState.grid[index] = { ...memState.grid[index],\n                  val: true,\n                  type: \"openset\"\n                };\n              }\n\n              return { ...square\n              };\n            }\n\n            return { ...square\n            };\n          })\n        };\n        states.push(newState);\n      }\n\n      return null;\n    });\n  }\n\n  return states;\n}\n\nexport default BFS;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Algorithms/Bi-Directional/BFS.js"],"names":["Queue","getIndex","x","y","cols","getPoints","gridMap","startPoint","endPoints","map","square","val","type","push","getNeighbors","point","rows","cutCorners","allowDiags","neighbors","Array","left","right","up","down","topLeft","topRight","bottomLeft","bottomRight","BFS","memState","setState","queueLeft","queueRight","discoveredFromLeft","discoveredFromRight","cameFromLeft","cameFromRight","points","states","newState","grid","fill","i","Math","abs","goal","console","log","enqueue","length","current1","peek","current2","dequeue","index","cameFromLeftPoint","cameFromRightPoint","state","prev","neighbors1","neighbors2","neighbor"],"mappings":"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","sourcesContent":["import Queue from '..//Queue'\n\nfunction getIndex(x, y, cols){\n    return (x + (y * cols));\n}\n\nfunction getPoints(gridMap){\n    let startPoint = null;\n    let endPoints = [];\n    \n    gridMap.map((square) => {\n        if(square.val && square.type ===  \"start\"){\n            // console.log(square);\n            startPoint = square;\n\n            return null;\n        }\n\n        if(square.val && square.type === \"end\"){\n            // console.log(square);\n            endPoints.push(square);\n\n            return null;\n        }\n\n        return null;\n    })\n\n    return [startPoint, endPoints];\n}\n\n\nfunction getNeighbors(point, gridMap, rows, cols, cutCorners, allowDiags){\n    //Point                                 Index\n    // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n    // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n    // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n    // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n    // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n    // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n    // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n    // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n    const neighbors = new Array(8);\n\n    if(point.x > 0){\n        const left = getIndex((point.x-1), (point.y), cols);\n\n        if(gridMap[left].type !== \"wall\" && gridMap[left].type !== \"start\" && gridMap[left].type !== \"end\"){\n            neighbors[0] = gridMap[left];\n        }\n    }\n    if(point.x < cols-1){\n        const right = getIndex((point.x+1), (point.y), cols);\n\n        if(gridMap[right].type !== \"wall\" && gridMap[right].type !== \"start\" && gridMap[right].type !== \"end\"){\n            neighbors[1] = gridMap[right];\n        }\n    }\n    if(point.y > 0){\n        const up = getIndex((point.x), (point.y-1), cols);\n\n        if(gridMap[up].type !== \"wall\" && gridMap[up].type !== \"start\" && gridMap[up].type !== \"end\"){\n            neighbors[2] = gridMap[up];\n        }\n    }\n    if(point.y < rows-1){\n        const down = getIndex((point.x), (point.y+1), cols);\n\n        if(gridMap[down].type !== \"wall\" && gridMap[down].type !== \"start\" && gridMap[down].type !== \"end\"){\n            neighbors[3] = gridMap[down];\n        }\n    }\n    if(point.x > 0 && point.y > 0){\n        const topLeft = getIndex((point.x-1), (point.y-1), cols);\n\n        if(gridMap[topLeft].type !== \"wall\" && gridMap[topLeft].type !== \"start\" && gridMap[topLeft].type !== \"end\"){\n            if(allowDiags){\n                if(!cutCorners){\n                    if(gridMap[topLeft+1].type !== \"wall\" && gridMap[topLeft+50].type !== \"wall\"){\n                        neighbors[4] = gridMap[topLeft];\n                    }\n                }else{\n                    neighbors[4] = gridMap[topLeft];\n                }\n            }\n        }\n    }\n    if(point.x < cols-1 && point.y > 0){\n        const topRight = getIndex((point.x+1), (point.y-1), cols);\n\n        if(gridMap[topRight].type !== \"wall\" && gridMap[topRight].type !== \"start\" && gridMap[topRight].type !== \"end\"){\n            if(allowDiags){\n                if(!cutCorners){\n                    if(gridMap[topRight-1].type !== \"wall\" && gridMap[topRight+50].type !== \"wall\"){\n                        neighbors[5] = gridMap[topRight];\n                    }\n                }else{\n                    neighbors[5] = gridMap[topRight];\n                }\n            }\n        }\n    }\n    if(point.x > 0 && point.y < rows-1){\n        const bottomLeft  = getIndex((point.x-1), (point.y+1), cols);\n\n        if(gridMap[bottomLeft].type !== \"wall\" && gridMap[bottomLeft].type !== \"start\" && gridMap[bottomLeft].type !== \"end\"){\n            if(allowDiags){\n                if(!cutCorners){\n                    if(gridMap[bottomLeft+1].type !== \"wall\" && gridMap[bottomLeft-50].type !== \"wall\"){\n                        neighbors[6] = gridMap[bottomLeft];\n                    }\n                }else{\n                    neighbors[6] = gridMap[bottomLeft];\n                }\n            }\n        }\n    }\n    if(point.x < cols-1 && point.y < rows-1){\n        const bottomRight = getIndex((point.x+1), (point.y+1), cols);\n\n        if(gridMap[bottomRight].type !== \"wall\" && gridMap[bottomRight].type !== \"start\" && gridMap[bottomRight].type !== \"end\"){\n            if(allowDiags){\n                if(!cutCorners){\n                    if(gridMap[bottomRight-1].type !== \"wall\" && gridMap[bottomRight-50].type !== \"wall\"){\n                        neighbors[7] = gridMap[bottomRight];\n                    }\n                }else{\n                    neighbors[7] = gridMap[bottomRight]\n                }\n            }\n        }\n    }\n\n    return neighbors;\n}\n\nfunction BFS(rows, cols, gridMap, memState, setState, cutCorners, allowDiags){\n    const [startPoint, endPoints] = getPoints(gridMap);\n    const queueLeft = new Queue();\n    const queueRight = new Queue();\n    const discoveredFromLeft = {};\n    const discoveredFromRight = {};\n    const cameFromLeft = {};\n    const cameFromRight = {};\n    const points = {};\n    const states = [];\n\n    //TODO: Bug, clears grid but then returns it to its previous state\n    const newState = {\n        ...memState,\n        grid: new Array(rows*cols).fill({val: false, type: null}).map((square, i) => {\n            return {\n                ...square,\n                x: i % cols,\n                y: Math.abs((i - (i % cols)) / cols)\n            }\n        })\n    }\n    states.push(newState);\n\n    const goal = endPoints[0];\n\n    if(!startPoint || !endPoints){\n        console.log(\"Map must have a start point, and an end point\");\n        return \"Map must have a start point, and an end point\"; \n    }\n\n    points[getIndex(startPoint.x, startPoint.y, cols)] = startPoint;\n    cameFromLeft[getIndex(startPoint.x, startPoint.y, cols)] = null;\n\n    queueLeft.enqueue(points[getIndex(startPoint.x, startPoint.y, cols)]);\n    discoveredFromLeft[getIndex(startPoint.x, startPoint.y, cols)] = \"discovered\";\n\n\n    points[getIndex(goal.x, goal.y, cols)] = goal;\n    cameFromRight[getIndex(goal.x, goal.y, cols)] = null;\n\n    queueRight.enqueue(points[getIndex(goal.x, goal.y, cols)]);\n    discoveredFromRight[getIndex(goal.x, goal.y, cols)] = \"discovered\";\n\n    while(queueLeft.length() > 0 && queueRight.length() > 0){\n        // console.log(Array.from(queue.getQueue()))\n        const current1 = queueLeft.peek();\n        const current2 = queueRight.peek();\n        // console.log(\"current\",current);\n\n        queueLeft.dequeue();\n        queueRight.dequeue();\n\n        const newState = {\n            ...memState,\n            grid: memState.grid.map((square, index) => {\n                if(current1.x === square.x && current1.y === square.y){\n                    if(current1.type !== \"start\" && current1.type !== \"end\"){\n                        memState.grid[index] = {\n                            ...memState.grid[index],\n                            val: true,\n                            type: \"neighbors\"\n                        }\n                    }\n                    return {...square}\n                }\n                if(current2.x === square.x && current2.y === square.y){\n                    if(current2.type !== \"start\" && current2.type !== \"end\"){\n                        memState.grid[index] = {\n                            ...memState.grid[index],\n                            val: true,\n                            type: \"neighbors\"\n                        }\n                    }\n                    return {...square}\n                }\n                return {...square}\n            })\n        }\n        states.push(newState);\n\n        if(discoveredFromLeft[getIndex(current2.x, current2.y, cols)] || discoveredFromRight[getIndex(current1.x, current1.y, cols)]){\n            let cameFromLeftPoint;\n            let cameFromRightPoint;\n\n            if(discoveredFromLeft[getIndex(current2.x, current2.y, cols)]){\n                cameFromRightPoint = current2;\n                cameFromLeftPoint = current2;\n            }else if(discoveredFromRight[getIndex(current1.x, current1.y, cols)]){\n                cameFromRightPoint = current1;\n                cameFromLeftPoint = current1;\n            }\n            \n\n            const state = states[states.length-1];\n            setState({\n                // return {\n                ...state,\n                //state object is immutable so updates have to be done this way\n                grid: state.grid.map((square, index) => {\n                    if(cameFromLeft[index] || cameFromRight[index]){\n                        if(square.x === cameFromLeftPoint.x && square.y === cameFromLeftPoint.y){\n                            let prev = cameFromLeftPoint;\n                \n                            while(prev){                   \n                                if(prev.type !== \"start\"){\n                                    state.grid[getIndex(prev.x,prev.y,state.cols)] = {\n                                        ...state.grid[getIndex(prev.x,prev.y,state.cols)],\n                                        val: true,\n                                        type: \"path\"\n                                    }\n                                }\n                                prev = cameFromRight[getIndex(prev.x,prev.y,state.cols)];\n                            }\n                        }\n                        if(square.x === cameFromRightPoint.x && square.y === cameFromRightPoint.y){\n                            let prev = cameFromRightPoint;\n                \n                            while(prev){                   \n                                if(prev.type !== \"end\"){\n                                    state.grid[getIndex(prev.x,prev.y,state.cols)] = {\n                                        ...state.grid[getIndex(prev.x,prev.y,state.cols)],\n                                        val: true,\n                                        type: \"path\"\n                                    }\n                                }\n                                prev = cameFromLeft[getIndex(prev.x,prev.y,state.cols)];\n                            }\n                            return {...square};\n                        }\n                        return {...square};\n                    }\n                    return {...square};\n                })\n                \n            });\n\n            console.log(\"PATH FOUND!!!!!\");\n            return states;\n        };\n\n        const neighbors1 = getNeighbors(current1, gridMap, rows, cols, cutCorners, allowDiags);\n        const neighbors2 = getNeighbors(current2, gridMap, rows, cols, cutCorners, allowDiags);\n\n        neighbors1.map((neighbor) => {\n            if(!discoveredFromLeft[getIndex(neighbor.x, neighbor.y, cols)]){\n                points[getIndex(neighbor.x, neighbor.y, cols)] = neighbor;\n\n                cameFromLeft[getIndex(neighbor.x, neighbor.y, cols)] = current1;\n\n                queueLeft.enqueue(points[getIndex(neighbor.x, neighbor.y, cols)]);\n                discoveredFromLeft[getIndex(neighbor.x, neighbor.y, cols)] = \"discovered\";\n\n                const newState = {\n                    ...memState,\n                    grid: memState.grid.map((square, index) => {\n                        if(neighbor.x === square.x && neighbor.y === square.y){\n                            if(neighbor.type !== \"start\" && neighbor.type !== \"end\"){\n                                memState.grid[index] = {\n                                    ...memState.grid[index],\n                                    val: true,\n                                    type: \"openset\"\n                                }\n                            }\n                            return {...square}\n                        }\n                        return {...square}\n                    })\n                }\n                states.push(newState); \n            }\n\n            return null;\n        });\n\n        neighbors2.map((neighbor) => {\n            if(!discoveredFromRight[getIndex(neighbor.x, neighbor.y, cols)]){\n                points[getIndex(neighbor.x, neighbor.y, cols)] = neighbor;\n\n                cameFromRight[getIndex(neighbor.x, neighbor.y, cols)] = current2;\n\n                queueRight.enqueue(points[getIndex(neighbor.x, neighbor.y, cols)]);\n                discoveredFromRight[getIndex(neighbor.x, neighbor.y, cols)] = \"discovered\";\n\n                const newState = {\n                    ...memState,\n                    grid: memState.grid.map((square, index) => {\n                        if(neighbor.x === square.x && neighbor.y === square.y){\n                            if(neighbor.type !== \"start\" && neighbor.type !== \"end\"){\n                                memState.grid[index] = {\n                                    ...memState.grid[index],\n                                    val: true,\n                                    type: \"openset\"\n                                }\n                            }\n                            return {...square}\n                        }\n                        return {...square}\n                    })\n                }\n                states.push(newState); \n            }\n\n            return null;\n        });\n    }\n\n    return states;\n}\n\nexport default BFS;"]},"metadata":{},"sourceType":"module"}