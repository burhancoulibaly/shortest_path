{"ast":null,"code":"function AStar(rows, cols, gridMap) {\n  let startPoint = null;\n  let wallPoints = [];\n  let endPoints = [];\n  gridMap.map(square => {\n    if (square.val && square.type === \"start\") {\n      // console.log(square);\n      startPoint = square;\n      return null;\n    }\n\n    if (square.val && square.type === \"wall\") {\n      // console.log(square);\n      wallPoints.push(square);\n      return null;\n    }\n\n    if (square.val && square.type === \"end\") {\n      // console.log(square);\n      endPoints.push(square);\n      return null;\n    }\n\n    return null;\n  });\n\n  if (!startPoint || !endPoints) {\n    console.log(\"Map must have a start point, and an end point\");\n    return \"Map must have a start point, and an end point\";\n  }\n\n  console.log(startPoint, wallPoints, endPoints);\n}\n\nclass Node {\n  constructor(_val = null) {\n    this.setVal = val => {\n      this._val = val;\n    };\n\n    this.setLeft = node => {\n      this._left = node;\n    };\n\n    this.setRight = node => {\n      this._right = node;\n    };\n\n    this.getVal = () => {\n      return this._val;\n    };\n\n    this.getLeft = () => {\n      return this;\n    };\n\n    this._val = _val;\n    this._left = null;\n    this._right = null;\n  }\n\n}\n\nclass MinHeap {\n  constructor() {\n    this.insert = () => {};\n\n    this.extract = () => {};\n\n    this.insertExtract = () => {};\n\n    this.search = () => {};\n\n    this.delete = () => {};\n\n    this.decreaseKey = () => {};\n\n    this.increaseKey = () => {};\n  }\n\n}\n\nexport default AStar;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Algorithms/AStar.js"],"names":["AStar","rows","cols","gridMap","startPoint","wallPoints","endPoints","map","square","val","type","push","console","log","Node","constructor","setVal","_val","setLeft","node","_left","setRight","_right","getVal","getLeft","MinHeap","insert","extract","insertExtract","search","delete","decreaseKey","increaseKey"],"mappings":"AAAA,SAASA,KAAT,CAAeC,IAAf,EAAqBC,IAArB,EAA2BC,OAA3B,EAAmC;AAC/B,MAAIC,UAAU,GAAG,IAAjB;AACA,MAAIC,UAAU,GAAG,EAAjB;AACA,MAAIC,SAAS,GAAG,EAAhB;AAIAH,EAAAA,OAAO,CAACI,GAAR,CAAaC,MAAD,IAAY;AACpB,QAAGA,MAAM,CAACC,GAAP,IAAcD,MAAM,CAACE,IAAP,KAAiB,OAAlC,EAA0C;AACtC;AACAN,MAAAA,UAAU,GAAGI,MAAb;AAEA,aAAO,IAAP;AACH;;AAED,QAAGA,MAAM,CAACC,GAAP,IAAcD,MAAM,CAACE,IAAP,KAAgB,MAAjC,EAAwC;AACpC;AACAL,MAAAA,UAAU,CAACM,IAAX,CAAgBH,MAAhB;AAEA,aAAO,IAAP;AACH;;AAED,QAAGA,MAAM,CAACC,GAAP,IAAcD,MAAM,CAACE,IAAP,KAAgB,KAAjC,EAAuC;AACnC;AACAJ,MAAAA,SAAS,CAACK,IAAV,CAAeH,MAAf;AAEA,aAAO,IAAP;AACH;;AAED,WAAO,IAAP;AACH,GAvBD;;AAyBA,MAAG,CAACJ,UAAD,IAAe,CAACE,SAAnB,EAA6B;AACzBM,IAAAA,OAAO,CAACC,GAAR,CAAY,+CAAZ;AACA,WAAO,+CAAP;AACH;;AAEDD,EAAAA,OAAO,CAACC,GAAR,CAAYT,UAAZ,EAAwBC,UAAxB,EAAoCC,SAApC;AAGH;;AAED,MAAMQ,IAAN,CAAU;AACNC,EAAAA,WAAW,CAACN,IAAG,GAAC,IAAL,EAAU;AAAA,SAMrBO,MANqB,GAMXP,GAAD,IAAS;AACd,WAAKQ,IAAL,GAAYR,GAAZ;AACH,KARoB;;AAAA,SAUrBS,OAVqB,GAUVC,IAAD,IAAU;AAChB,WAAKC,KAAL,GAAaD,IAAb;AACH,KAZoB;;AAAA,SAcrBE,QAdqB,GAcTF,IAAD,IAAU;AACjB,WAAKG,MAAL,GAAcH,IAAd;AACH,KAhBoB;;AAAA,SAkBrBI,MAlBqB,GAkBZ,MAAM;AACX,aAAO,KAAKN,IAAZ;AACH,KApBoB;;AAAA,SAsBrBO,OAtBqB,GAsBX,MAAM;AACZ,aAAO,IAAP;AACH,KAxBoB;;AACjB,SAAKP,IAAL,GAAYR,IAAZ;AACA,SAAKW,KAAL,GAAa,IAAb;AACA,SAAKE,MAAL,GAAc,IAAd;AACH;;AALK;;AA4BV,MAAMG,OAAN,CAAa;AACTV,EAAAA,WAAW,GAAE;AAAA,SAIbW,MAJa,GAIJ,MAAM,CAEd,CANY;;AAAA,SAQbC,OARa,GAQH,MAAM,CAEf,CAVY;;AAAA,SAYbC,aAZa,GAYG,MAAM,CAErB,CAdY;;AAAA,SAgBbC,MAhBa,GAgBJ,MAAM,CAEd,CAlBY;;AAAA,SAoBbC,MApBa,GAoBJ,MAAM,CAEd,CAtBY;;AAAA,SAwBbC,WAxBa,GAwBC,MAAM,CAEnB,CA1BY;;AAAA,SA4BbC,WA5Ba,GA4BC,MAAM,CAEnB,CA9BY;AAEZ;;AAHQ;;AAkCb,eAAehC,KAAf","sourcesContent":["function AStar(rows, cols, gridMap){\n    let startPoint = null;\n    let wallPoints = [];\n    let endPoints = [];\n\n\n\n    gridMap.map((square) => {\n        if(square.val && square.type ===  \"start\"){\n            // console.log(square);\n            startPoint = square;\n\n            return null;\n        }\n\n        if(square.val && square.type === \"wall\"){\n            // console.log(square);\n            wallPoints.push(square);\n\n            return null;\n        }\n\n        if(square.val && square.type === \"end\"){\n            // console.log(square);\n            endPoints.push(square);\n\n            return null;\n        }\n\n        return null;\n    })\n\n    if(!startPoint || !endPoints){\n        console.log(\"Map must have a start point, and an end point\");\n        return \"Map must have a start point, and an end point\"; \n    }\n\n    console.log(startPoint, wallPoints, endPoints);\n\n\n}\n\nclass Node{\n    constructor(val=null){\n        this._val = val;\n        this._left = null;\n        this._right = null;\n    }\n\n    setVal = (val) => {\n        this._val = val;\n    }\n\n    setLeft = (node) => {\n        this._left = node;\n    }\n\n    setRight = (node) => {\n        this._right = node;\n    }\n\n    getVal = () => {\n        return this._val;\n    }\n\n    getLeft = () => {\n        return this\n    }\n}\n\nclass MinHeap{\n    constructor(){\n\n    }\n\n    insert = () => {\n\n    }\n\n    extract = () => {\n        \n    }\n\n    insertExtract = () => {\n\n    }\n\n    search = () => {\n\n    }\n\n    delete = () => {\n\n    }\n\n    decreaseKey = () => {\n\n    }\n\n    increaseKey = () => {\n\n    }\n}\n\nexport default AStar"]},"metadata":{},"sourceType":"module"}