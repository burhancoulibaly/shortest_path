{"ast":null,"code":"var _jsxFileName = \"/home/menekou/projects/react/shortest-path/react-frontend/src/Map/Map.js\";\nimport React, { useState, useContext, useEffect, useCallback } from 'react';\nimport UserContext from \"../UserContext\";\nimport { useMutation } from '@apollo/client';\nimport MapHelper from '../Helpers/MapHelper';\nimport './Map.css';\nimport html2canvas from \"html2canvas\";\nimport domtoimage from 'dom-to-image';\nimport Square from '../Square/Square';\nimport MenuContext from '../MenuContext';\nimport AStar from '../Algorithms/AStar';\nimport AStarBiDirectional from '../Algorithms/Bi-Directional/AStar';\nimport Dijkstra from '../Algorithms/Dijkstra';\nimport DijkstraBiDirectional from '../Algorithms/Bi-Directional/Dijkstra';\nimport BFS from '../Algorithms/BFS';\nimport BFSBiDirectional from '../Algorithms/Bi-Directional/BFS';\nimport DFS from '../Algorithms/DFS';\nimport GreedyBFS from '../Algorithms/GreedyBFS';\nimport GreedyBFSBiDirectional from '../Algorithms/Bi-Directional/GreedyBFS';\n\nfunction Map(props) {\n  const {\n    user\n  } = useContext(UserContext);\n  const {\n    menuState,\n    dispatch\n  } = useContext(MenuContext);\n  const [state, setState] = useState({\n    rows: 15,\n    cols: 50,\n    grid: props.userMap ? Array.from(props.userMap) : new Array(15 * 50).fill({\n      val: false,\n      type: null\n    }).map((square, i) => {\n      return { ...square,\n        x: i % 50,\n        y: Math.abs((i - i % 50) / 50)\n      };\n    }),\n    //space-time O(1)\n    itemState: menuState.itemState,\n    userMap: props.userMap ? Array.from(props.userMap) : null\n  });\n  const [saveMap, {\n    error: saveMapError,\n    data: saveMapData\n  }] = useMutation(MapHelper.saveMap);\n  const [editMap, {\n    error: editMapError,\n    data: editMapData\n  }] = useMutation(MapHelper.editMap); // const { state: state } = useMemo(() => ({state}), [state])\n  // console.log(state.userMap)\n\n  useEffect(() => {\n    if (state.userMap === null) {\n      setState(state => {\n        return { ...state,\n          userMap: props.userMap ? Array.from(props.userMap) : state.userMap\n        };\n      });\n    }\n  }, [props.userMap, state.userMap]);\n  useEffect(() => {\n    setState(state => {\n      return { ...state,\n        grid: state.userMap ? Array.from(state.userMap) : new Array(15 * 50).fill({\n          val: false,\n          type: null\n        }).map((square, i) => {\n          return { ...square,\n            x: i % 50,\n            y: Math.abs((i - i % 50) / 50)\n          };\n        })\n      };\n    });\n  }, [state.userMap]); //If item button is changed\n\n  useEffect(() => {\n    setState(state => {\n      return { ...state,\n        itemState: menuState.itemState\n      };\n    });\n  }, [menuState.itemState]);\n  useEffect(() => {\n    if (menuState.isResetting === true) {\n      if (state.userMap) {\n        setState(state => ({ ...state,\n          grid: state.grid.map((square, index) => {\n            if (square !== state.userMap[index]) {\n              return { ...state.userMap[index]\n              };\n            }\n\n            return { ...square\n            };\n          })\n        }));\n        return dispatch({\n          type: \"reset\"\n        });\n      }\n\n      setState(state => ({ ...state,\n        grid: new Array(15 * 50).fill({\n          val: false,\n          type: null\n        }).map((square, i) => {\n          return { ...square,\n            x: i % 50,\n            y: Math.abs((i - i % 50) / 50)\n          };\n        })\n      }));\n      return dispatch({\n        type: \"reset\"\n      });\n    }\n  }, [menuState.isResetting, state.userMap, dispatch]); //If menu clear button is clicked\n\n  useEffect(() => {\n    if (menuState.clear === true) {\n      setState(state => ({ ...state,\n        grid: state.grid.map((square, index) => {\n          if (square.type !== \"start\" && square.type !== \"end\") {\n            return { ...square,\n              val: false,\n              type: null\n            };\n          }\n\n          return { ...square\n          };\n        })\n      }));\n      return dispatch({\n        type: \"cleared\"\n      });\n    }\n  }, [menuState.clear, dispatch]); //If menu clear path button is clicked\n\n  useEffect(() => {\n    if (menuState.pathClear === true) {\n      setState(state => ({ ...state,\n        grid: state.grid.map((square, index) => {\n          if (square.type !== \"start\" && square.type !== \"end\" && square.type !== \"wall\") {\n            return { ...square,\n              val: false,\n              type: null\n            };\n          }\n\n          return { ...square\n          };\n        })\n      }));\n      return dispatch({\n        type: \"pathCleared\"\n      });\n    }\n  }, [menuState.pathClear, dispatch]);\n  useEffect(() => {\n    if (menuState.isSaving) {\n      console.log(menuState.isEdit);\n\n      if (menuState.isEdit) {\n        const map = Array.from(state.grid);\n        map.forEach((square, index) => {\n          if (square.type === \"path\" || square.type === \"openset\" || square.type === \"neighbors\") {\n            map[index] = { ...map[index],\n              val: false,\n              type: null\n            };\n          }\n\n          return { ...map[index]\n          };\n        });\n        console.log(map);\n        console.log(menuState.mapName);\n        console.log(user.username, menuState.mapName[0], menuState.mapName[menuState.mapName.length - 1], map);\n        editMap({\n          variables: {\n            username: user.username,\n            mapNameOrig: menuState.mapName[0],\n            mapNameEdit: menuState.mapName[menuState.mapName.length - 1],\n            map: map\n          }\n        });\n      } else {\n        //saving map\n        const map = Array.from(state.grid);\n        map.forEach((square, index) => {\n          if (square.type === \"path\" || square.type === \"openset\" || square.type === \"neighbors\") {\n            map[index] = { ...map[index],\n              val: false,\n              type: null\n            };\n          }\n\n          return { ...map[index]\n          };\n        });\n        console.log(map);\n        console.log(menuState.mapName);\n        saveMap({\n          variables: {\n            username: user.username,\n            mapName: menuState.mapName[menuState.mapName.length - 1],\n            map: map\n          }\n        });\n      }\n    }\n  }, [menuState.isSaving, menuState.mapName, menuState.isEdit, state.grid, user.username, saveMap, editMap, dispatch]);\n  useEffect(() => {\n    if (menuState.isEdit) {\n      if (menuState.isSaving) {\n        if (editMapError) {\n          console.log(editMapError);\n          return dispatch({\n            type: \"save\"\n          });\n        }\n\n        if (editMapData) {\n          console.log(editMapData);\n          const currentMapName = menuState.mapName[menuState.mapName.length - 1];\n          const map = Array.from(state.grid);\n          map.forEach((square, index) => {\n            if (square.type === \"path\" || square.type === \"openset\" || square.type === \"neighbors\") {\n              map[index] = { ...map[index],\n                val: false,\n                type: null\n              };\n            }\n\n            return { ...map[index]\n            };\n          });\n          const mapElement = document.createElement(`DIV`);\n          mapElement.innerHTML = renderMap(map);\n          console.log();\n          domtoimage.toPng( /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 38\n            }\n          }, renderMap(map))).then(function (dataUrl) {\n            var img = new Image();\n            img.src = dataUrl;\n            document.body.appendChild(img);\n          }).catch(function (error) {\n            console.error('oops, something went wrong!', error);\n          });\n          dispatch({\n            type: \"save\"\n          });\n          dispatch({\n            type: \"mapNameReset\"\n          });\n          dispatch({\n            type: \"mapName\",\n            payload: {\n              mapName: currentMapName\n            }\n          });\n          localStorage.setItem(\"mapVersion\", parseInt(localStorage.getItem(\"mapVersion\")) + 1);\n          console.log(parseInt(localStorage.getItem(\"mapVersion\")));\n          setState(state => ({ ...state,\n            userMap: map\n          })); // domtoimage.toBlob(document.querySelector('#map'))\n          //     .then(function (blob) {\n          //         window.saveAs(blob, 'my-node.png');\n          //     });\n\n          return;\n        }\n      }\n    }\n  }, [menuState.isSaving, menuState.mapName, menuState.isEdit, state.grid, editMapError, editMapData, dispatch]);\n  useEffect(() => {\n    if (!menuState.isEdit) {\n      if (menuState.isSaving) {\n        if (saveMapError) {\n          console.log(saveMapError);\n          return dispatch({\n            type: \"save\"\n          });\n        }\n\n        if (saveMapData) {\n          console.log(saveMapData);\n          const currentMapName = menuState.mapName[menuState.mapName.length - 1];\n          const map = Array.from(state.grid);\n          map.forEach((square, index) => {\n            if (square.type === \"path\" || square.type === \"openset\" || square.type === \"neighbors\") {\n              map[index] = { ...map[index],\n                val: false,\n                type: null\n              };\n            }\n\n            return { ...map[index]\n            };\n          });\n          domtoimage.toPng( /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 38\n            }\n          }, renderMap(map))).then(function (dataUrl) {\n            var img = new Image();\n            img.src = dataUrl;\n            document.body.appendChild(img);\n          }).catch(function (error) {\n            console.error('oops, something went wrong!', error);\n          });\n          dispatch({\n            type: \"save\"\n          });\n          dispatch({\n            type: \"mapNameReset\"\n          });\n          dispatch({\n            type: \"mapName\",\n            payload: {\n              mapName: currentMapName\n            }\n          });\n          localStorage.setItem(\"mapVersion\", 0);\n          localStorage.setItem(\"map\", JSON.stringify({\n            mapName: currentMapName,\n            userMap: map\n          }));\n          dispatch({\n            type: \"edit\"\n          });\n          setState(state => ({ ...state,\n            userMap: map\n          }));\n          return;\n        }\n      }\n    }\n  }, [menuState.isSaving, menuState.mapName, menuState.isEdit, state.grid, saveMapError, saveMapData, dispatch]);\n  const drawPath = useCallback(newState => {\n    setTimeout(() => {\n      if (menuState.run) {\n        setState({ ...newState,\n          //newState object is immutable so updates have to be done this way\n          grid: newState.grid\n        });\n      }\n    }, 4);\n  }, [menuState.run]); //If run menu button is clicked\n\n  useEffect(() => {\n    if (menuState.run === true) {\n      let states = null; // Visualize path finding algorithm logic\n      // console.time()\n\n      if (menuState.biDirectional === true) {\n        switch (menuState.algorithm) {\n          case \"astar\":\n            states = AStarBiDirectional(state.rows, state.cols, state.grid, menuState.heuristic, state, setState, menuState.cutCorners, menuState.allowDiags);\n            break;\n\n          case \"dijkstra\":\n            states = DijkstraBiDirectional(state.rows, state.cols, state.grid, state, setState, menuState.cutCorners, menuState.allowDiags);\n            break;\n\n          case \"bfs\":\n            states = BFSBiDirectional(state.rows, state.cols, state.grid, state, setState, menuState.cutCorners, menuState.allowDiags);\n            break;\n\n          case \"dfs\":\n            states = DFS(state.rows, state.cols, state.grid, state, setState, menuState.cutCorners, menuState.allowDiags);\n            break;\n\n          case \"greedybfs\":\n            states = GreedyBFSBiDirectional(state.rows, state.cols, state.grid, menuState.heuristic, state, setState, menuState.cutCorners, menuState.allowDiags);\n            break;\n\n          default:\n            console.log(\"Must choose a path finding algorithm\");\n            break;\n        }\n      } else {\n        switch (menuState.algorithm) {\n          case \"astar\":\n            states = AStar(state.rows, state.cols, state.grid, menuState.heuristic, state, setState, menuState.cutCorners, menuState.allowDiags);\n            break;\n\n          case \"dijkstra\":\n            states = Dijkstra(state.rows, state.cols, state.grid, state, setState, menuState.cutCorners, menuState.allowDiags);\n            break;\n\n          case \"bfs\":\n            states = BFS(state.rows, state.cols, state.grid, state, setState, menuState.cutCorners, menuState.allowDiags);\n            break;\n\n          case \"dfs\":\n            states = DFS(state.rows, state.cols, state.grid, state, setState, menuState.cutCorners, menuState.allowDiags);\n            break;\n\n          case \"greedybfs\":\n            states = GreedyBFS(state.rows, state.cols, state.grid, menuState.heuristic, state, setState, menuState.cutCorners, menuState.allowDiags);\n            break;\n\n          default:\n            console.log(\"Must choose a path finding algorithm\");\n            break;\n        }\n      } // console.timeEnd()\n\n\n      if (states === null) {\n        return dispatch({\n          type: \"complete\"\n        });\n      }\n\n      states.filter((newState, index) => {\n        if (index % 20 === 0) {\n          return newState;\n        }\n\n        if (index === states.length - 1) {\n          return newState;\n        }\n\n        return null;\n      }).map(newState => {\n        drawPath(newState);\n        return null;\n      });\n      return dispatch({\n        type: \"complete\"\n      });\n    }\n  }, [menuState.run, menuState.heuristic, menuState.cutCorners, menuState.allowDiags, menuState.algorithm, menuState.biDirectional, state.grid, state.rows, state.cols, state, drawPath, dispatch]);\n\n  const renderSquare = (x, y, val, userMap) => {\n    return /*#__PURE__*/React.createElement(Square //Minus 4 accounts for width and height\n    , {\n      width: state.cols > state.rows ? props.winDimensions.width / state.cols - 4 : props.winDimensions.width / state.cols * (Math.min(props.winDimensions.width / state.cols, props.winDimensions.height / state.rows) / Math.max(props.winDimensions.width / state.cols, props.winDimensions.height / state.rows)) - 4,\n      height: state.rows === state.cols ? props.winDimensions.height / state.rows - 4 //converting aspect ration of the square to 1:1 by multiplying the height by minimum of the width and height divided by the maximum of the width and height\n      : props.winDimensions.height / state.rows * (Math.min(props.winDimensions.width / state.cols, props.winDimensions.height / state.rows) / Math.max(props.winDimensions.width / state.cols, props.winDimensions.height / state.rows)) - 4,\n      x: x,\n      y: y,\n      val: val,\n      squareClick: (x, y) => handleClick(x, y),\n      type: userMap[x + y * state.cols].type,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 13\n      }\n    });\n  };\n\n  const renderMap = (userMap = null) => {\n    //TODO: use x y variables set per index for this instead\n    //space-time O(1)\n    const rows = Array(state.rows); //each row will contain an array of 50 available indexes\n\n    const cols = Array(state.rows);\n    const currentMap = userMap !== null ? userMap : state.grid; //time O(n)\n\n    for (let i = 0; i < currentMap.length; i++) {\n      if (i % state.cols === 0) {\n        cols[i / state.cols] = Array(state.cols); //space-time O(1)\n\n        rows[i] = /*#__PURE__*/React.createElement(\"div\", {\n          className: \"grid-row\",\n          key: i / state.cols,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 21\n          }\n        }, cols[i / state.cols]);\n      }\n\n      let square = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"grid-col\",\n        key: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 17\n        }\n      }, renderSquare(i % state.cols, Math.abs((i - i % state.cols) / state.cols), currentMap[i].val, currentMap));\n      cols[(i - i % state.cols) / state.cols][i % state.cols] = square;\n    }\n\n    const map = rows;\n    return map;\n  };\n\n  const handleClick = (x, y) => {\n    switch (state.itemState) {\n      case \"start\":\n        setState(state => ({ ...state,\n          //state object is immutable so updates have to be done this way\n          grid: state.grid.map((square, index) => {\n            if (index === x + y * state.cols) {\n              // console.log(x,y,square.type,state.itemState);\n              if (square.type === state.itemState || !square.val) {\n                return square.val ? { ...square,\n                  val: false,\n                  type: null\n                } : { ...square,\n                  val: true,\n                  type: state.itemState\n                };\n              }\n            }\n\n            if (square.type === state.itemState && square.val && !state.grid[x + y * state.cols].val) {\n              return { ...square,\n                val: false,\n                type: null\n              };\n            }\n\n            return { ...square\n            };\n          })\n        }));\n        break;\n\n      case \"wall\":\n        setState(state => ({ ...state,\n          //state object is immutable so updates have to be done this way\n          grid: state.grid.map((square, index) => {\n            if (index === x + y * state.cols) {\n              // console.log(x,y,square.type,state.itemState);\n              if (square.type === state.itemState || !square.val) {\n                return square.val ? { ...square,\n                  val: false,\n                  type: null\n                } : { ...square,\n                  val: true,\n                  type: state.itemState\n                };\n              }\n            }\n\n            return { ...square\n            };\n          })\n        }));\n        break;\n\n      case \"end\":\n        setState(state => ({ ...state,\n          //state object is immutable so updates have to be done this way\n          grid: state.grid.map((square, index) => {\n            if (index === x + y * state.cols) {\n              // console.log(x,y,square.type,state.itemState);\n              if (square.type === state.itemState || !square.val) {\n                return square.val ? { ...square,\n                  val: false,\n                  type: null\n                } : { ...square,\n                  val: true,\n                  type: state.itemState\n                };\n              }\n            }\n\n            if (square.type === state.itemState && square.val && !state.grid[x + y * state.cols].val) {\n              return { ...square,\n                val: false,\n                type: null\n              };\n            }\n\n            return { ...square\n            };\n          })\n        }));\n        break;\n\n      default:\n        break;\n    }\n\n    return;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"map\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 552,\n      columnNumber: 9\n    }\n  }, renderMap());\n}\n\nexport default Map;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Map/Map.js"],"names":["React","useState","useContext","useEffect","useCallback","UserContext","useMutation","MapHelper","html2canvas","domtoimage","Square","MenuContext","AStar","AStarBiDirectional","Dijkstra","DijkstraBiDirectional","BFS","BFSBiDirectional","DFS","GreedyBFS","GreedyBFSBiDirectional","Map","props","user","menuState","dispatch","state","setState","rows","cols","grid","userMap","Array","from","fill","val","type","map","square","i","x","y","Math","abs","itemState","saveMap","error","saveMapError","data","saveMapData","editMap","editMapError","editMapData","isResetting","index","clear","pathClear","isSaving","console","log","isEdit","forEach","mapName","username","length","variables","mapNameOrig","mapNameEdit","currentMapName","mapElement","document","createElement","innerHTML","renderMap","toPng","then","dataUrl","img","Image","src","body","appendChild","catch","payload","localStorage","setItem","parseInt","getItem","JSON","stringify","drawPath","newState","setTimeout","run","states","biDirectional","algorithm","heuristic","cutCorners","allowDiags","filter","renderSquare","winDimensions","width","min","height","max","handleClick","currentMap"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect, useCallback } from 'react';\nimport UserContext from \"../UserContext\";\nimport { useMutation } from '@apollo/client';\nimport MapHelper from '../Helpers/MapHelper';\nimport './Map.css';\nimport html2canvas from \"html2canvas\";\nimport domtoimage from 'dom-to-image';\n\nimport Square from '../Square/Square';\nimport MenuContext from '../MenuContext';\nimport AStar from '../Algorithms/AStar';\nimport AStarBiDirectional from '../Algorithms/Bi-Directional/AStar';\nimport Dijkstra from '../Algorithms/Dijkstra';\nimport DijkstraBiDirectional from '../Algorithms/Bi-Directional/Dijkstra';\nimport BFS from '../Algorithms/BFS';\nimport BFSBiDirectional from '../Algorithms/Bi-Directional/BFS';\nimport DFS from '../Algorithms/DFS';\nimport GreedyBFS from '../Algorithms/GreedyBFS';\nimport GreedyBFSBiDirectional from '../Algorithms/Bi-Directional/GreedyBFS';\n\n\nfunction Map(props) {\n    const {user} = useContext(UserContext);\n    const {menuState, dispatch} = useContext(MenuContext);\n    const [state, setState] = useState({\n        rows: 15,\n        cols: 50,\n        grid: props.userMap ? Array.from(props.userMap) : new Array(15*50).fill({val: false, type: null}).map((square, i) => {\n            return {\n                ...square,\n                x: i % 50,\n                y: Math.abs((i - (i % 50)) / 50)\n            }\n        }),//space-time O(1)\n        itemState: menuState.itemState,\n        userMap: props.userMap ? Array.from(props.userMap) : null\n    })\n    const [saveMap, { error: saveMapError, data: saveMapData }] = useMutation(MapHelper.saveMap);\n    const [editMap, { error: editMapError, data: editMapData }] = useMutation(MapHelper.editMap);\n    // const { state: state } = useMemo(() => ({state}), [state])\n\n    // console.log(state.userMap)\n\n    useEffect(() => {\n        if(state.userMap === null){\n            setState((state) => {\n                return {\n                    ...state,\n                    userMap: props.userMap ? Array.from(props.userMap) : state.userMap,\n                }\n            })\n        }\n    }, [props.userMap, state.userMap])\n\n    useEffect(() => {\n        setState((state) => {\n            return {\n                ...state,\n                grid: state.userMap ? Array.from(state.userMap) : new Array(15*50).fill({val: false, type: null}).map((square, i) => {\n                    return {\n                        ...square,\n                        x: i % 50,\n                        y: Math.abs((i - (i % 50)) / 50)\n                    }\n                }),\n            }\n        })\n    }, [state.userMap])\n\n    //If item button is changed\n    useEffect(() => {\n        setState((state) => {\n            return {\n                ...state,\n                itemState: menuState.itemState\n            }\n        })\n    }, [menuState.itemState]);\n\n    useEffect(() => {\n        if(menuState.isResetting === true){\n            if(state.userMap){\n                setState((state) => ({\n                    ...state,\n                    grid: state.grid.map((square, index) => {\n                        if(square !== state.userMap[index]){\n                            return {...state.userMap[index]}\n                        }\n                \n                        return {...square}\n                    }) \n                }))\n                return dispatch({type: \"reset\"});\n            }\n\n            setState((state) => ({\n                ...state,\n                grid: new Array(15*50).fill({val: false, type: null}).map((square, i) => {\n                    return {\n                        ...square,\n                        x: i % 50,\n                        y: Math.abs((i - (i % 50)) / 50)\n                    }\n                })\n            }))\n            return dispatch({type: \"reset\"});\n        }\n    }, [menuState.isResetting, state.userMap, dispatch]);\n\n    //If menu clear button is clicked\n    useEffect(() => {\n        if(menuState.clear === true){\n            setState((state) => ({\n                ...state,\n                grid: state.grid.map((square, index) => {\n                    if(square.type !== \"start\" && square.type !== \"end\"){\n                        return {...square, val: false, type: null}\n                    }\n            \n                    return {...square}\n                })\n            }))\n            return dispatch({type: \"cleared\"});\n        }\n    }, [menuState.clear, dispatch]);\n\n    //If menu clear path button is clicked\n    useEffect(() => {\n        if(menuState.pathClear === true){\n            setState((state) => ({\n                ...state,\n                grid: state.grid.map((square, index) => {\n                    if(square.type !== \"start\" && square.type !== \"end\" && square.type !== \"wall\"){\n                        return {...square, val: false, type: null}\n                    }\n            \n                    return {...square}\n                })\n            }))\n            return dispatch({type: \"pathCleared\"});\n        }\n    }, [menuState.pathClear, dispatch]);\n\n    useEffect(() => {\n        if(menuState.isSaving){\n            console.log(menuState.isEdit)\n            if(menuState.isEdit){\n                const map = Array.from(state.grid);\n\n                map.forEach((square, index) => {\n                    if(square.type === \"path\" || square.type === \"openset\" || square.type === \"neighbors\"){\n                        map[index] = {...map[index], val: false, type: null};\n                    }\n\n                    return {...map[index]};\n                })\n                \n                console.log(map);\n                console.log(menuState.mapName);\n                console.log(user.username, menuState.mapName[0], menuState.mapName[menuState.mapName.length-1], map);\n                editMap({\n                    variables: {\n                        username: user.username,\n                        mapNameOrig: menuState.mapName[0],\n                        mapNameEdit: menuState.mapName[menuState.mapName.length-1],\n                        map: map\n                    }\n                })\n            }else{\n                //saving map\n                const map = Array.from(state.grid);\n\n                map.forEach((square, index) => {\n                    if(square.type === \"path\" || square.type === \"openset\" || square.type === \"neighbors\"){\n                        map[index] = {...map[index], val: false, type: null};\n                    }\n\n                    return {...map[index]};\n                })\n                \n                console.log(map);\n                console.log(menuState.mapName);\n                saveMap({\n                    variables: {\n                        username: user.username,\n                        mapName: menuState.mapName[menuState.mapName.length-1],\n                        map: map\n                    }\n                })\n            }\n        }\n    }, [menuState.isSaving, menuState.mapName, menuState.isEdit, state.grid, user.username, saveMap, editMap, dispatch])\n\n    useEffect(() => {\n        if(menuState.isEdit){\n            if(menuState.isSaving){\n                \n                if(editMapError){\n                    console.log(editMapError);\n                    return dispatch({type: \"save\"});\n                }\n                \n                if(editMapData){\n                    console.log(editMapData);\n                    const currentMapName = menuState.mapName[menuState.mapName.length-1];\n                    const map = Array.from(state.grid);\n\n                    map.forEach((square, index) => {\n                        if(square.type === \"path\" || square.type === \"openset\" || square.type === \"neighbors\"){\n                            map[index] = {...map[index], val: false, type: null};\n                        }\n\n                        return {...map[index]};\n                    })\n\n                    const mapElement = document.createElement(`DIV`);\n\n                    mapElement.innerHTML = renderMap(map)\n\n                    console.log()\n                    domtoimage.toPng(<div>{renderMap(map)}</div>)\n                        .then(function (dataUrl) {\n                            var img = new Image();\n                            img.src = dataUrl;\n                            document.body.appendChild(img);\n                        })\n                        .catch(function (error) {\n                            console.error('oops, something went wrong!', error);\n                        });\n\n\n                    dispatch({type: \"save\"});\n                    dispatch({type: \"mapNameReset\"});\n                    dispatch({type: \"mapName\", payload: { mapName: currentMapName }});\n                    localStorage.setItem(\"mapVersion\", parseInt(localStorage.getItem(\"mapVersion\")) + 1);\n                    console.log(parseInt(localStorage.getItem(\"mapVersion\")));\n\n                    setState((state) => ({\n                        ...state,\n                        userMap: map\n                    }));\n\n                    // domtoimage.toBlob(document.querySelector('#map'))\n                    //     .then(function (blob) {\n                    //         window.saveAs(blob, 'my-node.png');\n                    //     });\n\n                    return;\n                }\n            }\n        }\n        \n    }, [menuState.isSaving, menuState.mapName, menuState.isEdit, state.grid, editMapError, editMapData, dispatch])\n\n    useEffect(() => {\n        if(!menuState.isEdit){\n            if(menuState.isSaving){\n                \n                if(saveMapError){\n                    console.log(saveMapError);\n                    return dispatch({type: \"save\"});\n                }\n                \n                if(saveMapData){\n                    console.log(saveMapData);\n                    const currentMapName = menuState.mapName[menuState.mapName.length-1];\n                    const map = Array.from(state.grid);\n\n                    map.forEach((square, index) => {\n                        if(square.type === \"path\" || square.type === \"openset\" || square.type === \"neighbors\"){\n                            map[index] = {...map[index], val: false, type: null};\n                        }\n\n                        return {...map[index]};\n                    })\n\n                    domtoimage.toPng(<div>{renderMap(map)}</div>)\n                        .then(function (dataUrl) {\n                            var img = new Image();\n                            img.src = dataUrl;\n                            document.body.appendChild(img);\n                        })\n                        .catch(function (error) {\n                            console.error('oops, something went wrong!', error);\n                        });\n\n                    dispatch({type: \"save\"});\n                    dispatch({type: \"mapNameReset\"});\n                    dispatch({type: \"mapName\", payload: { mapName: currentMapName }});\n\n                    localStorage.setItem(\"mapVersion\", 0);\n                    localStorage.setItem(\"map\", JSON.stringify({\n                        mapName: currentMapName,\n                        userMap: map\n                    }));\n\n                    dispatch({type: \"edit\"});\n\n                    setState((state) => ({\n                        ...state,\n                        userMap: map\n                    })); \n\n                    return;\n                }\n            }\n        }\n    }, [menuState.isSaving, menuState.mapName, menuState.isEdit, state.grid, saveMapError, saveMapData, dispatch])\n    \n    const drawPath = useCallback((newState) => {\n        setTimeout(() => {\n            if(menuState.run){\n                setState({\n                    ...newState,\n                    //newState object is immutable so updates have to be done this way\n                    grid: newState.grid\n                }); \n            }\n        }, 4)\n    },[menuState.run])\n\n    //If run menu button is clicked\n    useEffect(() => {\n        if(menuState.run === true){\n            let states = null;\n\n            // Visualize path finding algorithm logic\n            // console.time()\n            if(menuState.biDirectional === true){\n                switch (menuState.algorithm) {\n                    case \"astar\":\n                        states = AStarBiDirectional(state.rows, state.cols, state.grid, menuState.heuristic, state, setState, menuState.cutCorners, menuState.allowDiags);\n    \n                        break;\n                    case \"dijkstra\":\n                        states = DijkstraBiDirectional(state.rows, state.cols, state.grid, state, setState, menuState.cutCorners, menuState.allowDiags);\n    \n                        break;\n                    case \"bfs\":\n                        states = BFSBiDirectional(state.rows, state.cols, state.grid, state, setState, menuState.cutCorners, menuState.allowDiags);\n    \n                        break;\n                    case \"dfs\":\n                        states = DFS(state.rows, state.cols, state.grid, state, setState, menuState.cutCorners, menuState.allowDiags);\n    \n                        break;\n                    case \"greedybfs\":\n                        states = GreedyBFSBiDirectional(state.rows, state.cols, state.grid, menuState.heuristic, state, setState, menuState.cutCorners, menuState.allowDiags);\n    \n                        break;\n                    default:\n                        console.log(\"Must choose a path finding algorithm\")\n                        break;\n                }\n            }else{\n                switch (menuState.algorithm) {\n                    case \"astar\":\n                        states = AStar(state.rows, state.cols, state.grid, menuState.heuristic, state, setState, menuState.cutCorners, menuState.allowDiags);\n    \n                        break;\n                    case \"dijkstra\":\n                        states = Dijkstra(state.rows, state.cols, state.grid, state, setState, menuState.cutCorners, menuState.allowDiags);\n    \n                        break;\n                    case \"bfs\":\n                        states = BFS(state.rows, state.cols, state.grid, state, setState, menuState.cutCorners, menuState.allowDiags);\n    \n                        break;\n                    case \"dfs\":\n                        states = DFS(state.rows, state.cols, state.grid, state, setState, menuState.cutCorners, menuState.allowDiags);\n    \n                        break;\n                    case \"greedybfs\":\n                        states = GreedyBFS(state.rows, state.cols, state.grid, menuState.heuristic, state, setState, menuState.cutCorners, menuState.allowDiags);\n    \n                        break;\n                    default:\n                        console.log(\"Must choose a path finding algorithm\")\n                        break;\n                }\n            }\n            \n            // console.timeEnd()\n\n            if(states === null){\n                return dispatch({type: \"complete\"});\n            }\n            \n            states\n            .filter((newState, index) => {\n                if(index % 20 === 0){\n                    return newState;\n                }\n\n                if(index === states.length-1){\n                    return newState;\n                }\n\n                return null;\n                \n            })\n            .map((newState) => {\n                drawPath(newState);\n\n                return null\n            })\n\n            return dispatch({type: \"complete\"});\n        }\n    }, [menuState.run, menuState.heuristic, menuState.cutCorners, menuState.allowDiags, menuState.algorithm, menuState.biDirectional, state.grid, state.rows, state.cols, state, drawPath, dispatch]);\n\n    \n    const renderSquare = (x,y,val,userMap) => {\n        return (\n            <Square\n                //Minus 4 accounts for width and height\n                width={\n                    state.cols > state.rows\n                        ? (props.winDimensions.width / state.cols) - 4\n                        : (props.winDimensions.width / state.cols) * (Math.min((props.winDimensions.width / state.cols),(props.winDimensions.height / state.rows)) / Math.max((props.winDimensions.width / state.cols),(props.winDimensions.height / state.rows))) - 4 \n                }\n                height={\n                    state.rows === state.cols\n                        ? (props.winDimensions.height / state.rows) - 4\n                        //converting aspect ration of the square to 1:1 by multiplying the height by minimum of the width and height divided by the maximum of the width and height\n                        : (props.winDimensions.height / state.rows) * (Math.min((props.winDimensions.width / state.cols),(props.winDimensions.height / state.rows)) / Math.max((props.winDimensions.width / state.cols),(props.winDimensions.height / state.rows))) - 4\n                }\n                x={x}\n                y={y}\n                val={val}\n                squareClick={(x, y) => handleClick(x, y)}\n                type={userMap[x + (y * state.cols)].type}\n            />\n        )\n    }\n\n    const renderMap = (userMap=null) => {\n        //TODO: use x y variables set per index for this instead\n        //space-time O(1)\n        const rows = Array(state.rows);\n        //each row will contain an array of 50 available indexes\n        const cols = Array(state.rows);\n\n        const currentMap = userMap !== null ? userMap : state.grid;\n\n        //time O(n)\n        for(let i = 0; i < currentMap.length; i++){\n            if(i % state.cols === 0){\n                cols[i / state.cols] = Array(state.cols)//space-time O(1)\n\n                rows[i] = (\n                    <div className=\"grid-row\" key={i / state.cols}>\n                        {cols[i / state.cols]}\n                    </div>\n                )\n            }\n\n            let square = (\n                <div className=\"grid-col\" key={i}>\n                    {renderSquare(i % state.cols, Math.abs((i - (i % state.cols)) / state.cols), currentMap[i].val, currentMap)}\n                </div>\n            )\n\n            cols[(i - (i % state.cols)) / state.cols][i % state.cols] = square;\n        }\n\n        const map = rows;\n\n        return map;\n    }\n\n    const handleClick = (x,y) => {\n        switch (state.itemState) {\n            case \"start\":\n                setState((state) => ({\n                    ...state,\n                    //state object is immutable so updates have to be done this way\n                    grid: state.grid.map((square, index) => {\n                        if(index === x + (y * state.cols)){\n                            // console.log(x,y,square.type,state.itemState);\n                            if(square.type === state.itemState || !square.val){\n                                return square.val\n                                    ? {...square, val: false, type: null}\n                                    : {...square, val: true, type: state.itemState}\n                            }\n                        }\n\n                        if(square.type === state.itemState && square.val && !state.grid[x + (y * state.cols)].val){\n                            return {...square, val: false, type: null}\n                        }\n\n                        return {...square}\n                    })\n                }));\n                \n                break;\n\n            case \"wall\":\n                setState((state) => ({\n                    ...state,\n                    //state object is immutable so updates have to be done this way\n                    grid: state.grid.map((square, index) => {\n                        if(index === x + (y * state.cols)){\n                            // console.log(x,y,square.type,state.itemState);\n                            if(square.type === state.itemState || !square.val){\n                                return square.val\n                                    ? {...square, val: false, type: null}\n                                    : {...square, val: true, type: state.itemState}\n                            }\n                        }\n\n                        return {...square}\n                    })\n                }));\n\n                break;\n\n            case \"end\":\n                setState((state) => ({\n                    ...state,\n                    //state object is immutable so updates have to be done this way\n                    grid: state.grid.map((square, index) => {\n                        if(index === x + (y * state.cols)){\n                            // console.log(x,y,square.type,state.itemState);\n                            if(square.type === state.itemState || !square.val){\n                                return square.val\n                                    ? {...square, val: false, type: null}\n                                    : {...square, val: true, type: state.itemState}\n                            }\n                        }\n\n                        if(square.type === state.itemState && square.val && !state.grid[x + (y * state.cols)].val){\n                            return {...square, val: false, type: null}\n                        }\n\n                        return {...square}\n                    })\n                }));\n\n                break;\n        \n            default:\n                break;\n        }\n\n        return;\n    }\n    \n\n\n    return (\n        <div id=\"map\">\n            {/* {console.time()} */}\n                {renderMap()}\n            {/* {console.timeEnd()} */}\n        </div>\n    )\n}\n\nexport default Map;"]},"metadata":{},"sourceType":"module"}