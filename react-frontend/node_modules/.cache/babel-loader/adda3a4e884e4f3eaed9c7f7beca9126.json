{"ast":null,"code":"var _jsxFileName = \"/home/menekou/projects/react/shortest-path/react-frontend/src/Map/Map.js\";\nimport React, { useState, useContext, useEffect, useMemo } from 'react';\nimport './Map.css';\nimport Square from '../Square/Square';\nimport MenuContext from '../MenuContext';\n\nfunction Map(props) {\n  const [menuState, dispatch] = useContext(MenuContext);\n  const [state, setState] = useState({\n    rows: 15,\n    cols: 50,\n    grid: new Array(15 * 50).fill({\n      val: false,\n      type: null\n    }),\n    //space-time O(1)\n    itemState: menuState.itemState\n  });\n  const memoizedMenuState = useMemo(() => ({\n    menuState,\n    dispatch\n  }), [menuState, dispatch]);\n  console.log(memoizedMenuState);\n  const {\n    memState,\n    memSetState\n  } = useMemo(() => ({\n    state,\n    setState\n  }), [state, setState]); // console.log(memoizedState)\n  //If item button is changed\n\n  console.log(memState);\n  useEffect(() => {\n    memSetState(memState => {\n      return { ...memState,\n        itemState: memoizedMenuState.menuState.itemState\n      };\n    });\n  }, [memoizedMenuState.menuState.itemState]); //If menu clear button is clicked\n\n  useEffect(() => {\n    if (memoizedMenuState.menuState.clear === true) {\n      memSetState(memoizedState => {\n        return { ...memState,\n          grid: new Array(memState.rows * memState.cols).fill({\n            val: false,\n            type: null\n          })\n        };\n      });\n      return dispatch({\n        type: \"cleared\"\n      });\n    }\n  }, [memoizedMenuState.menuState.clear, dispatch]);\n  useEffect(() => {\n    if (memoizedMenuState.menuState.run === true) {\n      //Visualize path finding algorithm logic\n      return dispatch({\n        type: \"complete\"\n      });\n    }\n  }, [memoizedMenuState.menuState.run, dispatch]);\n\n  const renderSquare = (x, y, val) => {\n    return /*#__PURE__*/React.createElement(Square //Minus 4 accounts for width and height\n    , {\n      width: memState.cols > memState.rows ? props.winDimensions.width / memState.cols - 4 : props.winDimensions.width / memState.cols * (Math.min(props.winDimensions.width / memState.cols, props.winDimensions.height / memState.rows) / Math.max(props.winDimensions.width / memState.cols, props.winDimensions.height / memState.rows)) - 4,\n      height: memState.rows === memState.cols ? props.winDimensions.height / memState.rows - 4 //converting aspect ration of the square to 1:1 by multiplying the height by minimum of the width and height divided by the maximum of the width and height\n      : props.winDimensions.height / memState.rows * (Math.min(props.winDimensions.width / memState.cols, props.winDimensions.height / memState.rows) / Math.max(props.winDimensions.width / memState.cols, props.winDimensions.height / memState.rows)) - 4,\n      x: x,\n      y: y,\n      val: val,\n      squareClick: (x, y) => handleClick(x, y),\n      itemState: memState.itemState,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }\n    });\n  };\n\n  const renderMap = () => {\n    //space-time O(1)\n    const rows = Array(memState.rows); //each row will contain an array of 50 available indexes\n\n    const cols = Array(memState.rows); //time O(n)\n\n    for (let i = 0; i < memState.grid.length; i++) {\n      if (i % memState.cols === 0) {\n        cols[i / memState.cols] = Array(memState.cols); //space-time O(1)\n\n        rows[i] = /*#__PURE__*/React.createElement(\"div\", {\n          className: \"grid-row\",\n          key: i / memState.cols,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 21\n          }\n        }, cols[i / memState.cols]);\n      }\n\n      let square = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"grid-col\",\n        key: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 17\n        }\n      }, renderSquare(i % memState.cols, Math.abs((i - i % memState.cols) / memState.cols), memState.grid[i].val));\n      cols[(i - i % memState.cols) / memState.cols][i % memState.cols] = square;\n    }\n\n    const map = rows;\n    return map;\n  };\n\n  const handleClick = (x, y) => {\n    switch (memState.itemState) {\n      case \"start\":\n        memSetState(memoizedState => ({ ...memState,\n          //state object is immutable so updates have to be done this way\n          grid: memState.grid.map((square, index) => {\n            if (index === x + y * memState.cols) {\n              // console.log(x,y,square.type,memState.itemState);\n              if (square.type === memState.itemState || !square.val) {\n                return square.val ? { ...square,\n                  val: false,\n                  type: null\n                } : { ...square,\n                  val: true,\n                  type: memState.itemState\n                };\n              }\n            }\n\n            if (square.type === memState.itemState && square.val && !memState.grid[x + y * memState.cols].val) {\n              return { ...square,\n                val: false\n              };\n            }\n\n            return { ...square\n            };\n          })\n        }));\n        break;\n\n      case \"wall\":\n        memSetState(memoizedState => ({ ...memState,\n          //state object is immutable so updates have to be done this way\n          grid: memState.grid.map((square, index) => {\n            if (index === x + y * memState.cols) {\n              // console.log(x,y,square.type,state.itemState);\n              if (square.type === memState.itemState || !square.val) {\n                return square.val ? { ...square,\n                  val: false,\n                  type: null\n                } : { ...square,\n                  val: true,\n                  type: memState.itemState\n                };\n              }\n            }\n\n            return { ...square\n            };\n          })\n        }));\n        break;\n\n      case \"end\":\n        memSetState(memoizedState => ({ ...memState,\n          //state object is immutable so updates have to be done this way\n          grid: memState.grid.map((square, index) => {\n            if (index === x + y * memState.cols) {\n              // console.log(x,y,square.type,state.itemState);\n              if (square.type === memState.itemState || !square.val) {\n                return square.val ? { ...square,\n                  val: false,\n                  type: null\n                } : { ...square,\n                  val: true,\n                  type: memState.itemState\n                };\n              }\n            }\n\n            return { ...square\n            };\n          })\n        }));\n        break;\n\n      default:\n        break;\n    }\n\n    return;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"map\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }\n  }, console.time(), renderMap(), console.timeEnd());\n}\n\nexport default Map;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Map/Map.js"],"names":["React","useState","useContext","useEffect","useMemo","Square","MenuContext","Map","props","menuState","dispatch","state","setState","rows","cols","grid","Array","fill","val","type","itemState","memoizedMenuState","console","log","memState","memSetState","clear","memoizedState","run","renderSquare","x","y","winDimensions","width","Math","min","height","max","handleClick","renderMap","i","length","square","abs","map","index","time","timeEnd"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect, useMemo } from 'react';\nimport './Map.css';\nimport Square from '../Square/Square';\nimport MenuContext from '../MenuContext';\n\nfunction Map(props) {\n    const [menuState, dispatch] = useContext(MenuContext);\n    const [state, setState] = useState({\n        rows: 15,\n        cols: 50,\n        grid: new Array(15*50).fill({val: false, type: null}),//space-time O(1)\n        itemState: menuState.itemState\n    })\n\n    const memoizedMenuState = useMemo(() => ({menuState, dispatch}), [menuState, dispatch]);\n    console.log(memoizedMenuState)\n    const { memState, memSetState } = useMemo(() => ({state, setState}), [state, setState])\n\n    // console.log(memoizedState)\n    //If item button is changed\n    console.log(memState)\n    useEffect(() => {\n        memSetState((memState) => {\n            return {\n                ...memState,\n                itemState: memoizedMenuState.menuState.itemState\n            }\n        })\n    }, [memoizedMenuState.menuState.itemState]);\n\n    //If menu clear button is clicked\n    useEffect(() => {\n        if(memoizedMenuState.menuState.clear === true){\n            memSetState((memoizedState) => {\n                return {\n                    ...memState,\n                    grid: new Array(memState.rows*memState.cols).fill({val: false, type: null})\n                }\n            })\n\n            return dispatch({type: \"cleared\"});\n        }\n    }, [memoizedMenuState.menuState.clear, dispatch]);\n\n    useEffect(() => {\n        if(memoizedMenuState.menuState.run === true){\n            //Visualize path finding algorithm logic\n\n            return dispatch({type: \"complete\"});\n        }\n    }, [memoizedMenuState.menuState.run, dispatch]);\n    \n    const renderSquare = (x,y,val) => {\n        return (\n            <Square\n                //Minus 4 accounts for width and height\n                width={\n                    memState.cols > memState.rows\n                        ? (props.winDimensions.width / memState.cols) - 4\n                        : (props.winDimensions.width / memState.cols) * (Math.min((props.winDimensions.width / memState.cols),(props.winDimensions.height / memState.rows)) / Math.max((props.winDimensions.width / memState.cols),(props.winDimensions.height / memState.rows))) - 4 \n                }\n                height={\n                    memState.rows === memState.cols\n                        ? (props.winDimensions.height / memState.rows) - 4\n                        //converting aspect ration of the square to 1:1 by multiplying the height by minimum of the width and height divided by the maximum of the width and height\n                        : (props.winDimensions.height / memState.rows) * (Math.min((props.winDimensions.width / memState.cols),(props.winDimensions.height / memState.rows)) / Math.max((props.winDimensions.width / memState.cols),(props.winDimensions.height / memState.rows))) - 4\n                }\n                x={x}\n                y={y}\n                val={val}\n                squareClick={(x, y) => handleClick(x, y)}\n                itemState={memState.itemState}\n            />\n        )\n    }\n\n    const renderMap = () => {\n        //space-time O(1)\n        const rows = Array(memState.rows);\n        //each row will contain an array of 50 available indexes\n        const cols = Array(memState.rows);\n\n        //time O(n)\n        for(let i = 0; i < memState.grid.length; i++){\n            if(i % memState.cols === 0){\n                cols[i / memState.cols] = Array(memState.cols)//space-time O(1)\n\n                rows[i] = (\n                    <div className=\"grid-row\" key={i / memState.cols}>\n                        {cols[i / memState.cols]}\n                    </div>\n                )\n            }\n\n            let square = (\n                <div className=\"grid-col\" key={i}>\n                    {renderSquare(i % memState.cols, Math.abs((i - (i % memState.cols)) / memState.cols), memState.grid[i].val)}\n                </div>\n            )\n\n            cols[(i - (i % memState.cols)) / memState.cols][i % memState.cols] = square;\n        }\n\n        const map = rows;\n\n        return map;\n    }\n\n    const handleClick = (x,y) => {\n        switch (memState.itemState) {\n            case \"start\":\n                memSetState(memoizedState => ({\n                    ...memState,\n                    //state object is immutable so updates have to be done this way\n                    grid: memState.grid.map((square, index) => {\n                        if(index === x + (y * memState.cols)){\n                            // console.log(x,y,square.type,memState.itemState);\n                            if(square.type === memState.itemState || !square.val){\n                                return square.val\n                                    ? {...square, val: false, type: null}\n                                    : {...square, val: true, type: memState.itemState}\n                            }\n                        }\n\n                        if(square.type === memState.itemState && square.val && !memState.grid[x + (y * memState.cols)].val){\n                            return {...square, val: false}\n                        }\n\n                        return {...square}\n                    })\n                }));\n                \n                break;\n\n            case \"wall\":\n                memSetState(memoizedState => ({\n                    ...memState,\n                    //state object is immutable so updates have to be done this way\n                    grid: memState.grid.map((square, index) => {\n                        if(index === x + (y * memState.cols)){\n                            // console.log(x,y,square.type,state.itemState);\n                            if(square.type === memState.itemState || !square.val){\n                                return square.val\n                                    ? {...square, val: false, type: null}\n                                    : {...square, val: true, type: memState.itemState}\n                            }\n                        }\n\n                        return {...square}\n                    })\n                }));\n\n                break;\n\n            case \"end\":\n                memSetState(memoizedState => ({\n                    ...memState,\n                    //state object is immutable so updates have to be done this way\n                    grid: memState.grid.map((square, index) => {\n                        if(index === x + (y * memState.cols)){\n                            // console.log(x,y,square.type,state.itemState);\n                            if(square.type === memState.itemState || !square.val){\n                                return square.val\n                                    ? {...square, val: false, type: null}\n                                    : {...square, val: true, type: memState.itemState}\n                            }\n                        }\n\n                        return {...square}\n                    })\n                }));\n\n                break;\n        \n            default:\n                break;\n        }\n\n        return;\n    }\n    \n\n\n    return (\n        <div id=\"map\">\n            {console.time()}\n                {renderMap()}\n            {console.timeEnd()}\n        </div>\n    )\n}\n\nexport default Map;"]},"metadata":{},"sourceType":"module"}