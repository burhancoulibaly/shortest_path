{"ast":null,"code":"import MinHeap from './MinHeap';\n\nfunction getIndex(x, y, cols) {\n  return x + y * cols;\n}\n\nfunction heuristic(startPoint, endPoint, heuristic) {\n  //TODO make this a switch for the different types of heuristic functions\n  let distance;\n\n  switch (heuristic) {\n    case \"euclidean\":\n      distance = Math.sqrt(Math.pow(endPoint.x - startPoint.x, 2) + Math.pow(endPoint.y - startPoint.y, 2));\n      break;\n\n    case \"manhattan\":\n      distance = Math.abs(startPoint.x - endPoint.x) + Math.abs(startPoint.y - endPoint.y);\n      break;\n\n    default:\n      distance = Math.sqrt(Math.pow(endPoint.x - startPoint.x, 2) + Math.pow(endPoint.y - startPoint.y, 2));\n      break;\n  }\n\n  return distance;\n}\n\nfunction dist(startPoint, endPoint) {\n  //TODO make this a switch for the different types of heuristic functions\n  const distance = Math.sqrt(Math.pow(endPoint.x - startPoint.x, 2) + Math.pow(endPoint.y - startPoint.y, 2));\n  return distance;\n}\n\nfunction getPoints(gridMap) {\n  let startPoint = null;\n  let wallPoints = [];\n  let endPoints = [];\n  gridMap.map(square => {\n    if (square.val && square.type === \"start\") {\n      // console.log(square);\n      startPoint = square;\n      return null;\n    }\n\n    if (square.val && square.type === \"wall\") {\n      // console.log(square);\n      wallPoints.push(square);\n      return null;\n    }\n\n    if (square.val && square.type === \"end\") {\n      // console.log(square);\n      endPoints.push(square);\n      return null;\n    }\n\n    return null;\n  });\n  return [startPoint, wallPoints, endPoints];\n}\n\nfunction getNeighbors(point, gridMap, rows, cols) {\n  //Point                                 Index\n  // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n  // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n  // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n  // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n  // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n  // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n  // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n  // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n  const neighbors = new Array(8);\n\n  if (point.x > 0) {\n    const left = getIndex(point.x - 1, point.y, cols);\n\n    if (!gridMap[left].val && gridMap[left].type !== \"wall\" && gridMap[left].type !== \"start\" || gridMap[left].val && gridMap[left].type === \"end\") {\n      neighbors[0] = gridMap[left];\n    }\n  }\n\n  if (point.x < cols - 1) {\n    const right = getIndex(point.x + 1, point.y, cols);\n\n    if (!gridMap[right].val && gridMap[right].type !== \"wall\" && gridMap[right].type !== \"start\" || gridMap[right].val && gridMap[right].type === \"end\") {\n      neighbors[1] = gridMap[right];\n    }\n  }\n\n  if (point.y > 0) {\n    const up = getIndex(point.x, point.y - 1, cols);\n\n    if (!gridMap[up].val && gridMap[up].type !== \"wall\" && gridMap[up].type !== \"start\" || gridMap[up].val && gridMap[up].type === \"end\") {\n      neighbors[2] = gridMap[up];\n    }\n  }\n\n  if (point.y < rows - 1) {\n    const down = getIndex(point.x, point.y + 1, cols);\n\n    if (!gridMap[down].val && gridMap[down].type !== \"wall\" && gridMap[down].type !== \"start\" || gridMap[down].val && gridMap[down].type === \"end\") {\n      neighbors[3] = gridMap[down];\n    }\n  }\n\n  if (point.x > 0 && point.y > 0) {\n    const topLeft = getIndex(point.x - 1, point.y - 1, cols);\n\n    if (!gridMap[topLeft].val && gridMap[topLeft].type !== \"wall\" && gridMap[topLeft].type !== \"start\" || gridMap[topLeft].val && gridMap[topLeft].type === \"end\") {\n      neighbors[4] = gridMap[topLeft];\n    }\n  }\n\n  if (point.x < cols - 1 && point.y > 0) {\n    const topRight = getIndex(point.x + 1, point.y - 1, cols);\n\n    if (!gridMap[topRight].val && gridMap[topRight].type !== \"wall\" && gridMap[topRight].type !== \"start\" || gridMap[topRight].val && gridMap[topRight].type === \"end\") {\n      neighbors[5] = gridMap[topRight];\n    }\n  }\n\n  if (point.x > 0 && point.y < rows - 1) {\n    const bottomLeft = getIndex(point.x - 1, point.y + 1, cols);\n\n    if (!gridMap[bottomLeft].val && gridMap[bottomLeft].type !== \"wall\" && gridMap[bottomLeft].type !== \"start\" || gridMap[bottomLeft].val && gridMap[bottomLeft].type === \"end\") {\n      neighbors[6] = gridMap[bottomLeft];\n    }\n  }\n\n  if (point.x < cols - 1 && point.y < rows - 1) {\n    const bottomRight = getIndex(point.x + 1, point.y + 1, cols);\n\n    if (!gridMap[bottomRight].val && gridMap[bottomRight].type !== \"wall\" && gridMap[bottomRight].type !== \"start\" || gridMap[bottomRight].val && gridMap[bottomRight].type === \"end\") {\n      neighbors[7] = gridMap[bottomRight];\n    }\n  }\n\n  return neighbors;\n}\n\nfunction AStar(rows, cols, gridMap, heuristicType) {\n  const [startPoint, wallPoints, endPoints] = getPoints(gridMap);\n  console.log(heuristicType);\n  let openSet = new MinHeap();\n  let cameFrom = {};\n  let gScore = {};\n  let fScore = {};\n  let goal = null;\n\n  if (!startPoint || !endPoints) {\n    console.log(\"Map must have a start point, and an end point\");\n    return \"Map must have a start point, and an end point\";\n  }\n\n  cameFrom[getIndex(startPoint.x, startPoint.y, cols)] = null;\n  gScore[getIndex(startPoint.x, startPoint.y, cols)] = 0;\n  const endPointDistances = new Array(endPoints.length);\n  endPoints.map((endPoint, i) => {\n    const hScore = heuristic(startPoint, endPoint, heuristicType);\n    endPointDistances[i] = [endPoint, gScore[getIndex(startPoint.x, startPoint.y, cols)] + hScore];\n    return null;\n  }); // console.log(endPointDistances);\n\n  endPointDistances.sort((a, b) => {\n    if (a[1] > b[1]) {\n      return 1;\n    }\n\n    if (a[1] < b[1]) {\n      return -1;\n    }\n\n    return 0;\n  });\n  goal = endPointDistances[0][0];\n  fScore[getIndex(startPoint.x, startPoint.y, cols)] = endPointDistances[0][1];\n  openSet.insert({\n    point: startPoint,\n    val: fScore[getIndex(startPoint.x, startPoint.y, cols)]\n  });\n\n  while (openSet.getHeap().length !== 0) {\n    console.log(openSet.getHeap());\n    console.log(openSet.peek());\n    const current = openSet.peek().point;\n\n    if (cameFrom[getIndex(current.x, current.y, cols)]) {\n      console.log(cameFrom[getIndex(current.x, current.y, cols)]);\n    }\n\n    console.log(current); // console.log(current);\n\n    if (current.x === goal.x && current.y === goal.y) {\n      console.log(\"current\", current);\n      console.log(\"goal\", goal);\n      console.log(\"GOOOAAAAALLLLLLL\");\n      console.log(cameFrom);\n      return [goal, cameFrom, openSet.getHeap()];\n    }\n\n    const neighbors = getNeighbors(current, gridMap, rows, cols);\n    openSet.extract();\n    neighbors.map(neighbor => {\n      console.log(neighbor);\n      console.log(gScore[getIndex(current.x, current.y, cols)] + dist(current, neighbor) + heuristic(neighbor, goal)); // console.log(\"neighbor\", neighbor);\n\n      const currentPathGScore = gScore[getIndex(current.x, current.y, cols)] + dist(current, neighbor);\n\n      if (currentPathGScore < gScore[getIndex(neighbor.x, neighbor.y, cols)] || !gScore[getIndex(neighbor.x, neighbor.y, cols)]) {\n        cameFrom[getIndex(neighbor.x, neighbor.y, cols)] = current;\n        gScore[getIndex(neighbor.x, neighbor.y, cols)] = currentPathGScore;\n        const hScore = heuristic(neighbor, goal, heuristicType);\n        fScore[getIndex(neighbor.x, neighbor.y, cols)] = gScore[getIndex(neighbor.x, neighbor.y, cols)] + hScore;\n\n        if (!openSet.findPoint([getIndex(neighbor.x, neighbor.y, cols)], cols)) {\n          openSet.insert({\n            point: neighbor,\n            val: fScore[getIndex(neighbor.x, neighbor.y, cols)]\n          });\n        }\n\n        return null;\n      }\n\n      return null;\n    });\n  }\n\n  console.log(openSet.getHeap());\n  return [goal, cameFrom, openSet.getHeap()];\n}\n\nexport default AStar;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Algorithms/AStar.js"],"names":["MinHeap","getIndex","x","y","cols","heuristic","startPoint","endPoint","distance","Math","sqrt","pow","abs","dist","getPoints","gridMap","wallPoints","endPoints","map","square","val","type","push","getNeighbors","point","rows","neighbors","Array","left","right","up","down","topLeft","topRight","bottomLeft","bottomRight","AStar","heuristicType","console","log","openSet","cameFrom","gScore","fScore","goal","endPointDistances","length","i","hScore","sort","a","b","insert","getHeap","peek","current","extract","neighbor","currentPathGScore","findPoint"],"mappings":"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","sourcesContent":["import MinHeap from './MinHeap';\n\nfunction getIndex(x, y, cols){\n    return (x + (y * cols));\n}\n\nfunction heuristic(startPoint, endPoint, heuristic){\n    //TODO make this a switch for the different types of heuristic functions\n    let distance;\n\n    switch (heuristic) {\n        case \"euclidean\":\n            distance = Math.sqrt(Math.pow((endPoint.x-startPoint.x), 2) + Math.pow((endPoint.y-startPoint.y), 2));\n\n            break;\n        \n        case \"manhattan\":\n            distance = Math.abs(startPoint.x-endPoint.x) +  Math.abs(startPoint.y-endPoint.y);\n\n            break;\n\n        default:\n            distance = Math.sqrt(Math.pow((endPoint.x-startPoint.x), 2) + Math.pow((endPoint.y-startPoint.y), 2));\n\n            break;\n    }\n    \n    \n\n    return distance;\n} \n\nfunction dist(startPoint, endPoint){\n    //TODO make this a switch for the different types of heuristic functions\n    const distance = Math.sqrt(Math.pow((endPoint.x-startPoint.x), 2) + Math.pow((endPoint.y-startPoint.y), 2));     \n\n    return distance;\n} \n\nfunction getPoints(gridMap){\n    let startPoint = null;\n    let wallPoints = [];\n    let endPoints = [];\n\n    gridMap.map((square) => {\n        if(square.val && square.type ===  \"start\"){\n            // console.log(square);\n            startPoint = square;\n\n            return null;\n        }\n\n        if(square.val && square.type === \"wall\"){\n            // console.log(square);\n            wallPoints.push(square);\n\n            return null;\n        }\n\n        if(square.val && square.type === \"end\"){\n            // console.log(square);\n            endPoints.push(square);\n\n            return null;\n        }\n\n        return null;\n    })\n\n    return [startPoint, wallPoints, endPoints];\n}\n\nfunction getNeighbors(point, gridMap, rows, cols){\n    //Point                                 Index\n    // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n    // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n    // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n    // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n    // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n    // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n    // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n    // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n\n    const neighbors = new Array(8);\n\n    if(point.x > 0){\n        const left = getIndex((point.x-1), (point.y), cols);\n\n        if((!gridMap[left].val && gridMap[left].type !== \"wall\" && gridMap[left].type !== \"start\") || (gridMap[left].val && gridMap[left].type === \"end\")){\n            neighbors[0] = gridMap[left];\n        }\n    }\n    if(point.x < cols-1){\n        const right = getIndex((point.x+1), (point.y), cols);\n\n        if((!gridMap[right].val && gridMap[right].type !== \"wall\" && gridMap[right].type !== \"start\") || (gridMap[right].val && gridMap[right].type === \"end\")){\n            neighbors[1] = gridMap[right];\n        }\n    }\n    if(point.y > 0){\n        const up = getIndex((point.x), (point.y-1), cols);\n\n        if((!gridMap[up].val && gridMap[up].type !== \"wall\" && gridMap[up].type !== \"start\") || (gridMap[up].val && gridMap[up].type === \"end\")){\n            neighbors[2] = gridMap[up];\n        }\n    }\n    if(point.y < rows-1){\n        const down = getIndex((point.x), (point.y+1), cols);\n\n        if((!gridMap[down].val && gridMap[down].type !== \"wall\" && gridMap[down].type !== \"start\") || (gridMap[down].val && gridMap[down].type === \"end\")){\n            neighbors[3] = gridMap[down];\n        }\n    }\n    if(point.x > 0 && point.y > 0){\n        const topLeft = getIndex((point.x-1), (point.y-1), cols);\n\n        if((!gridMap[topLeft].val && gridMap[topLeft].type !== \"wall\" && gridMap[topLeft].type !== \"start\") || (gridMap[topLeft].val && gridMap[topLeft].type === \"end\")){\n            neighbors[4] = gridMap[topLeft];\n        }\n    }\n    if(point.x < cols-1 && point.y > 0){\n        const topRight = getIndex((point.x+1), (point.y-1), cols);\n\n        if((!gridMap[topRight].val && gridMap[topRight].type !== \"wall\" && gridMap[topRight].type !== \"start\") || (gridMap[topRight].val && gridMap[topRight].type === \"end\")){\n            neighbors[5] = gridMap[topRight];\n        }\n    }\n    if(point.x > 0 && point.y < rows-1){\n        const bottomLeft  = getIndex((point.x-1), (point.y+1), cols);\n\n        if((!gridMap[bottomLeft].val && gridMap[bottomLeft].type !== \"wall\" && gridMap[bottomLeft].type !== \"start\") || (gridMap[bottomLeft].val && gridMap[bottomLeft].type === \"end\")){\n            neighbors[6] = gridMap[bottomLeft];\n        }\n    }\n    if(point.x < cols-1 && point.y < rows-1){\n        const bottomRight = getIndex((point.x+1), (point.y+1), cols);\n\n        if((!gridMap[bottomRight].val && gridMap[bottomRight].type !== \"wall\" && gridMap[bottomRight].type !== \"start\") || (gridMap[bottomRight].val && gridMap[bottomRight].type === \"end\")){\n            neighbors[7] = gridMap[bottomRight];\n        }\n    }\n\n    return neighbors;\n}\n\nfunction AStar(rows, cols, gridMap, heuristicType){\n    const [startPoint, wallPoints, endPoints] = getPoints(gridMap);\n    console.log(heuristicType)\n    let openSet = new MinHeap();\n    let cameFrom = {};\n    let gScore = {};\n    let fScore = {};\n    let goal = null;\n\n    if(!startPoint || !endPoints){\n        console.log(\"Map must have a start point, and an end point\");\n        return \"Map must have a start point, and an end point\"; \n    }\n\n    cameFrom[getIndex(startPoint.x, startPoint.y, cols)] = null;\n\n    gScore[getIndex(startPoint.x, startPoint.y, cols)] = 0;\n\n    const endPointDistances = new Array(endPoints.length);\n\n    endPoints.map((endPoint, i) => {\n        const hScore = heuristic(startPoint, endPoint, heuristicType); \n\n        endPointDistances[i] = [endPoint, gScore[getIndex(startPoint.x, startPoint.y, cols)] + hScore];\n\n        return null;\n    })\n\n    // console.log(endPointDistances);\n    \n    endPointDistances.sort((a, b) => {\n        if(a[1] > b[1]){\n            return 1\n        }\n        if(a[1] < b[1]){\n            return -1\n        }\n\n        return 0;\n    });\n\n    goal = endPointDistances[0][0];\n\n    fScore[getIndex(startPoint.x, startPoint.y, cols)] = endPointDistances[0][1];\n\n    openSet.insert({point: startPoint, val: fScore[getIndex(startPoint.x, startPoint.y, cols)]});\n\n    while(openSet.getHeap().length !== 0){\n        console.log(openSet.getHeap());\n        console.log(openSet.peek());\n        const current = openSet.peek().point;\n\n        if(cameFrom[getIndex(current.x, current.y, cols)]){\n            console.log(cameFrom[getIndex(current.x, current.y, cols)]);\n        }\n\n        console.log(current);\n        // console.log(current);\n\n        if(current.x === goal.x && current.y === goal.y){\n            console.log(\"current\",current);\n            console.log(\"goal\", goal);\n            console.log(\"GOOOAAAAALLLLLLL\");\n            console.log(cameFrom);\n            return [goal, cameFrom, openSet.getHeap()];\n        }\n\n        const neighbors = getNeighbors(current, gridMap, rows, cols);\n\n        openSet.extract();\n\n\n\n        neighbors.map((neighbor) => {\n            console.log(neighbor);\n            console.log((gScore[getIndex(current.x, current.y, cols)] + dist(current, neighbor)) + heuristic(neighbor, goal));\n            \n            // console.log(\"neighbor\", neighbor);\n            const currentPathGScore = gScore[getIndex(current.x, current.y, cols)] + dist(current, neighbor);\n\n            if(currentPathGScore < gScore[getIndex(neighbor.x, neighbor.y, cols)] || !gScore[getIndex(neighbor.x, neighbor.y, cols)]){\n\n                cameFrom[getIndex(neighbor.x, neighbor.y, cols)] = current;\n\n                gScore[getIndex(neighbor.x, neighbor.y, cols)] = currentPathGScore;\n\n                const hScore = heuristic(neighbor, goal, heuristicType);\n                \n                fScore[getIndex(neighbor.x, neighbor.y, cols)] = (gScore[getIndex(neighbor.x, neighbor.y, cols)] + hScore);\n                \n                if(!openSet.findPoint([getIndex(neighbor.x, neighbor.y, cols)], cols)){\n                    openSet.insert({point: neighbor, val: fScore[getIndex(neighbor.x, neighbor.y, cols)]});\n                }\n                \n                return null;\n            }\n            \n            return null; \n        });\n    }\n\n    console.log(openSet.getHeap());\n\n    return [goal, cameFrom, openSet.getHeap()];\n}\n\nexport default AStar"]},"metadata":{},"sourceType":"module"}