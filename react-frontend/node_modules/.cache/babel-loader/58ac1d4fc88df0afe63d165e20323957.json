{"ast":null,"code":"import FibonacciHeapNode from '../Algorithms/FibonacciHeapNode';\nimport FibonacciHeap from '../Algorithms/FibonacciHeap';\n\nfunction getIndex(x, y, cols) {\n  return x + y * cols;\n}\n\nfunction dist(startPoint, endPoint) {\n  //TODO make this a switch for the different types of heuristic functions\n  const distance = Math.sqrt(Math.pow(endPoint.x - startPoint.x, 2) + Math.pow(endPoint.y - startPoint.y, 2));\n  return distance;\n}\n\nfunction getPoints(gridMap) {\n  let startPoint = null;\n  let endPoints = [];\n  gridMap.map(square => {\n    if (square.val && square.type === \"start\") {\n      // console.log(square);\n      startPoint = square;\n      return null;\n    }\n\n    if (square.val && square.type === \"end\") {\n      // console.log(square);\n      endPoints.push(square);\n      return null;\n    }\n\n    return null;\n  });\n  return [startPoint, endPoints];\n}\n\nfunction getNeighbors(point, gridMap, rows, cols) {\n  //Point                                 Index\n  // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n  // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n  // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n  // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n  // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n  // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n  // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n  // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n  const neighbors = new Array(8);\n\n  if (point.x > 0) {\n    const left = getIndex(point.x - 1, point.y, cols);\n\n    if (gridMap[left].type !== \"wall\" && gridMap[left].type !== \"start\") {\n      neighbors[0] = point[gScore(left)];\n    }\n  }\n\n  if (point.x < cols - 1) {\n    const right = getIndex(point.x + 1, point.y, cols);\n\n    if (gridMap[right].type !== \"wall\" && gridMap[right].type !== \"start\") {\n      neighbors[1] = point[gScore(right)];\n    }\n  }\n\n  if (point.y > 0) {\n    const up = getIndex(point.x, point.y - 1, cols);\n\n    if (gridMap[up].type !== \"wall\" && gridMap[up].type !== \"start\") {\n      neighbors[2] = point[gScore(up)];\n    }\n  }\n\n  if (point.y < rows - 1) {\n    const down = getIndex(point.x, point.y + 1, cols);\n\n    if (gridMap[down].type !== \"wall\" && gridMap[down].type !== \"start\") {\n      neighbors[3] = point[gScore(down)];\n    }\n  }\n\n  if (point.x > 0 && point.y > 0) {\n    const topLeft = getIndex(point.x - 1, point.y - 1, cols);\n\n    if (gridMap[topLeft].type !== \"wall\" && gridMap[topLeft].type !== \"start\") {\n      neighbors[4] = point[gScore(topLeft)];\n    }\n  }\n\n  if (point.x < cols - 1 && point.y > 0) {\n    const topRight = getIndex(point.x + 1, point.y - 1, cols);\n\n    if (gridMap[topRight].type !== \"wall\" && gridMap[topRight].type !== \"start\") {\n      neighbors[5] = point[gScore(topRight)];\n    }\n  }\n\n  if (point.x > 0 && point.y < rows - 1) {\n    const bottomLeft = getIndex(point.x - 1, point.y + 1, cols);\n\n    if (gridMap[bottomLeft].type !== \"wall\" && gridMap[bottomLeft].type !== \"start\") {\n      neighbors[6] = point[gScore(bottomLeft)];\n    }\n  }\n\n  if (point.x < cols - 1 && point.y < rows - 1) {\n    const bottomRight = getIndex(point.x + 1, point.y + 1, cols);\n\n    if (gridMap[bottomRight].type !== \"wall\" && gridMap[bottomRight].type !== \"start\") {\n      neighbors[7] = point[gScore(bottomRight)];\n    }\n  }\n\n  return neighbors;\n}\n\nfunction Dijkstra(rows, cols, gridMap, memState, setState) {\n  const [startPoint, endPoints] = getPoints(gridMap);\n  const queue = new FibonacciHeap();\n  const point = {};\n  const cameFrom = {};\n  const gScore = {};\n  const states = []; //TODO: Bug, clears grid but then returns it to its previous state\n\n  const newState = { ...memState,\n    grid: new Array(rows * cols).fill({\n      val: false,\n      type: null\n    }).map((square, i) => {\n      return { ...square,\n        x: i % cols,\n        y: Math.abs((i - i % cols) / cols)\n      };\n    })\n  };\n  states.push(newState);\n  let goal = endPoints[0];\n\n  if (!startPoint || !endPoints) {\n    console.log(\"Map must have a start point, and an end point\");\n    return \"Map must have a start point, and an end point\";\n  }\n\n  gScore[getIndex(startPoint.x, startPoint.y, cols)] = 0;\n  cameFrom[getIndex(startPoint.x, startPoint.y, cols)] = null;\n  gridMap.map((square, index) => {\n    if (getIndex(startPoint.x, startPoint.y, cols) !== index) {\n      gScore[index] = Number.POSITIVE_INFINITY;\n      cameFrom[index] = null;\n    }\n\n    if (point[gScore[index]] == null) {\n      point[gScore[index]] = [];\n    }\n\n    ;\n    const node = new FibonacciHeapNode(gScore[index]);\n    point[gScore[index]].push({\n      point: square,\n      node: node\n    });\n    queue.insert(node);\n    return null;\n  });\n\n  while (queue.getRootList().length > 0) {\n    console.log(point);\n    const current = point[queue.peek().getVal()][point[queue.peek().getVal()].length - 1];\n    queue.extractMin();\n    point[gScore[getIndex(current.point.x, current.point.y, cols)]].pop();\n    console.log(Array.from(queue.getRootList()));\n    const newState = { ...memState,\n      grid: memState.grid.map((square, index) => {\n        if (current.point.x === square.x && current.point.y === square.y) {\n          if (current.point.type !== \"start\" && current.point.type !== \"end\") {\n            memState.grid[index] = { ...memState.grid[index],\n              val: true,\n              type: \"neighbors\"\n            };\n          }\n\n          return { ...square\n          };\n        }\n\n        return { ...square\n        };\n      })\n    };\n    states.push(newState);\n\n    if (current.point.x === goal.x && current.point.y === goal.y) {\n      const state = states[states.length - 1];\n      setState({ // return {\n        ...state,\n        //state object is immutable so updates have to be done this way\n        grid: state.grid.map((square, index) => {\n          if (cameFrom[index]) {\n            if (square.type === \"end\") {\n              let prev = cameFrom[index];\n\n              while (prev) {\n                if (prev.type !== \"start\" && prev.type !== \"end\") {\n                  state.grid[getIndex(prev.x, prev.y, state.cols)] = { ...state.grid[getIndex(prev.x, prev.y, state.cols)],\n                    val: true,\n                    type: \"path\"\n                  };\n                }\n\n                prev = cameFrom[getIndex(prev.x, prev.y, state.cols)];\n              }\n\n              return { ...square\n              };\n            }\n\n            return { ...square\n            };\n          }\n\n          return { ...square\n          };\n        })\n      });\n      console.log(\"PATH FOUND!!!!!\");\n      return states;\n    }\n\n    const neighbors = getNeighbors(current, gridMap, rows, cols);\n    neighbors.map(neighbor => {\n      // console.log(neighbor);\n      // console.log((gScore[getIndex(current.point.x, current.point.y, cols)] + dist(current, neighbor)) + heuristic(neighbor, goal));\n      // console.log(\"neighbor\", neighbor);\n      const currentPathGScore = gScore[getIndex(current.point.x, current.point.y, cols)] + dist(current, neighbor);\n\n      if (currentPathGScore < gScore[getIndex(neighbor.x, neighbor.y, cols)] || !gScore[getIndex(neighbor.x, neighbor.y, cols)]) {\n        cameFrom[getIndex(neighbor.x, neighbor.y, cols)] = current; //Removing from array of inifinites in gScore table\n\n        if (gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)] === Number.POSITIVE_INFINITY) {\n          point[gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)]].pop();\n        }\n\n        gScore[getIndex(neighbor.x, neighbor.y, cols)] = currentPathGScore;\n\n        if (point[gScore[getIndex(neighbor.x, neighbor.y, cols)]] == null) {\n          point[gScore[getIndex(neighbor.x, neighbor.y, cols)]] = [];\n        }\n\n        point[gScore[getIndex(neighbor.x, neighbor.y, cols)]].push(neighbor); //TODO: figure out how to do this in constant time\n\n        queue.decreaseKey(current.node, currentPathGScore);\n        return null;\n      }\n\n      return null;\n    });\n  }\n}\n\nexport default Dijkstra;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Algorithms/Dijkstra.js"],"names":["FibonacciHeapNode","FibonacciHeap","getIndex","x","y","cols","dist","startPoint","endPoint","distance","Math","sqrt","pow","getPoints","gridMap","endPoints","map","square","val","type","push","getNeighbors","point","rows","neighbors","Array","left","gScore","right","up","down","topLeft","topRight","bottomLeft","bottomRight","Dijkstra","memState","setState","queue","cameFrom","states","newState","grid","fill","i","abs","goal","console","log","index","Number","POSITIVE_INFINITY","node","insert","getRootList","length","current","peek","getVal","extractMin","pop","from","state","prev","neighbor","currentPathGScore","decreaseKey"],"mappings":"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","sourcesContent":["import FibonacciHeapNode from '../Algorithms/FibonacciHeapNode';\nimport FibonacciHeap from '../Algorithms/FibonacciHeap';\n\nfunction getIndex(x, y, cols){\n    return (x + (y * cols));\n}\n\nfunction dist(startPoint, endPoint){\n    //TODO make this a switch for the different types of heuristic functions\n    const distance = Math.sqrt(Math.pow((endPoint.x-startPoint.x), 2) + Math.pow((endPoint.y-startPoint.y), 2));     \n    return distance;\n}\n\nfunction getPoints(gridMap){\n    let startPoint = null;\n    let endPoints = [];\n    \n    gridMap.map((square) => {\n        if(square.val && square.type ===  \"start\"){\n            // console.log(square);\n            startPoint = square;\n\n            return null;\n        }\n\n        if(square.val && square.type === \"end\"){\n            // console.log(square);\n            endPoints.push(square);\n\n            return null;\n        }\n\n        return null;\n    })\n\n    return [startPoint, endPoints];\n}\n\nfunction getNeighbors(point, gridMap, rows, cols, ){\n    //Point                                 Index\n    // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n    // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n    // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n    // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n    // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n    // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n    // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n    // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n\n    const neighbors = new Array(8);\n\n    if(point.x > 0){\n        const left = getIndex((point.x-1), (point.y), cols);\n\n        if(gridMap[left].type !== \"wall\" && gridMap[left].type !== \"start\"){\n            neighbors[0] = point[gScore(left)];\n        }\n    }\n    if(point.x < cols-1){\n        const right = getIndex((point.x+1), (point.y), cols);\n\n        if(gridMap[right].type !== \"wall\" && gridMap[right].type !== \"start\"){\n            neighbors[1] = point[gScore(right)];\n        }\n    }\n    if(point.y > 0){\n        const up = getIndex((point.x), (point.y-1), cols);\n\n        if(gridMap[up].type !== \"wall\" && gridMap[up].type !== \"start\"){\n            neighbors[2] = point[gScore(up)];\n        }\n    }\n    if(point.y < rows-1){\n        const down = getIndex((point.x), (point.y+1), cols);\n\n        if(gridMap[down].type !== \"wall\" && gridMap[down].type !== \"start\"){\n            neighbors[3] = point[gScore(down)];\n        }\n    }\n    if(point.x > 0 && point.y > 0){\n        const topLeft = getIndex((point.x-1), (point.y-1), cols);\n\n        if(gridMap[topLeft].type !== \"wall\" && gridMap[topLeft].type !== \"start\"){\n            neighbors[4] = point[gScore(topLeft)];\n        }\n    }\n    if(point.x < cols-1 && point.y > 0){\n        const topRight = getIndex((point.x+1), (point.y-1), cols);\n\n        if(gridMap[topRight].type !== \"wall\" && gridMap[topRight].type !== \"start\"){\n            neighbors[5] = point[gScore(topRight)];\n        }\n    }\n    if(point.x > 0 && point.y < rows-1){\n        const bottomLeft  = getIndex((point.x-1), (point.y+1), cols);\n\n        if(gridMap[bottomLeft].type !== \"wall\" && gridMap[bottomLeft].type !== \"start\"){\n            neighbors[6] = point[gScore(bottomLeft)];\n        }\n    }\n    if(point.x < cols-1 && point.y < rows-1){\n        const bottomRight = getIndex((point.x+1), (point.y+1), cols);\n\n        if(gridMap[bottomRight].type !== \"wall\" && gridMap[bottomRight].type !== \"start\"){\n            neighbors[7] = point[gScore(bottomRight)];\n        }\n    }\n\n    return neighbors;\n}\n\nfunction Dijkstra(rows, cols, gridMap, memState, setState){\n    const [startPoint, endPoints] = getPoints(gridMap);\n    const queue = new FibonacciHeap();\n    const point = {};\n    const cameFrom = {};\n    const gScore = {};\n    const states = [];\n\n    //TODO: Bug, clears grid but then returns it to its previous state\n    const newState = {\n        ...memState,\n        grid: new Array(rows*cols).fill({val: false, type: null}).map((square, i) => {\n            return {\n                ...square,\n                x: i % cols,\n                y: Math.abs((i - (i % cols)) / cols)\n            }\n        })\n    }\n    states.push(newState);\n\n    let goal = endPoints[0];\n\n    if(!startPoint || !endPoints){\n        console.log(\"Map must have a start point, and an end point\");\n        return \"Map must have a start point, and an end point\"; \n    }\n\n    gScore[getIndex(startPoint.x, startPoint.y, cols)] = 0;\n    cameFrom[getIndex(startPoint.x, startPoint.y, cols)] = null;\n\n    gridMap.map((square, index) => {\n        if(getIndex(startPoint.x, startPoint.y, cols) !== index){\n            gScore[index] = Number.POSITIVE_INFINITY;\n            cameFrom[index] = null\n        }\n\n        if(point[gScore[index]] == null){\n            point[gScore[index]] = [];\n        };\n\n        const node = new FibonacciHeapNode(gScore[index])\n        point[gScore[index]].push({point: square, node: node});\n        queue.insert(node);\n\n        return null;\n    });\n\n    while(queue.getRootList().length > 0){\n        console.log(point);\n        const current = point[queue.peek().getVal()][point[queue.peek().getVal()].length-1];\n\n        queue.extractMin();\n        point[gScore[getIndex(current.point.x, current.point.y, cols)]].pop();\n\n        console.log(Array.from(queue.getRootList()))\n\n        const newState = {\n            ...memState,\n            grid: memState.grid.map((square, index) => {\n                if(current.point.x === square.x && current.point.y === square.y){\n                    if(current.point.type !== \"start\" && current.point.type !== \"end\"){\n                        memState.grid[index] = {\n                            ...memState.grid[index],\n                            val: true,\n                            type: \"neighbors\"\n                        }\n                    }\n                    return {...square}\n                }\n                return {...square}\n            })\n        }\n        states.push(newState);\n\n        if(current.point.x === goal.x && current.point.y === goal.y){\n            const state = states[states.length-1];\n            setState({\n                // return {\n                ...state,\n                //state object is immutable so updates have to be done this way\n                grid: state.grid.map((square, index) => {\n                    if(cameFrom[index]){\n                        if(square.type === \"end\"){\n                            let prev = cameFrom[index];\n                \n                            while(prev){                   \n                                if(prev.type !== \"start\" && prev.type !== \"end\"){\n                                    state.grid[getIndex(prev.x,prev.y,state.cols)] = {\n                                        ...state.grid[getIndex(prev.x,prev.y,state.cols)],\n                                        val: true,\n                                        type: \"path\"\n                                    }\n                                }\n                                prev = cameFrom[getIndex(prev.x,prev.y,state.cols)];\n                            }\n                            return {...square};\n                        }\n                        return {...square};\n                    }\n                    return {...square};\n                })\n            \n            });\n\n            console.log(\"PATH FOUND!!!!!\");\n            return states;\n        }\n\n        const neighbors = getNeighbors(current, gridMap, rows, cols);\n\n        neighbors.map((neighbor) => {\n            // console.log(neighbor);\n            // console.log((gScore[getIndex(current.point.x, current.point.y, cols)] + dist(current, neighbor)) + heuristic(neighbor, goal));\n            // console.log(\"neighbor\", neighbor);\n            const currentPathGScore = gScore[getIndex(current.point.x, current.point.y, cols)] + dist(current, neighbor);\n\n            if(currentPathGScore < gScore[getIndex(neighbor.x, neighbor.y, cols)] || !gScore[getIndex(neighbor.x, neighbor.y, cols)]){\n                cameFrom[getIndex(neighbor.x, neighbor.y, cols)] = current;\n\n                //Removing from array of inifinites in gScore table\n                if(gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)] === Number.POSITIVE_INFINITY){\n                    point[gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)]].pop();\n                }\n\n                gScore[getIndex(neighbor.x, neighbor.y, cols)] = currentPathGScore;\n                \n                if(point[gScore[getIndex(neighbor.x, neighbor.y, cols)]] == null){\n                    point[gScore[getIndex(neighbor.x, neighbor.y, cols)]] = [];\n                }\n                \n                point[gScore[getIndex(neighbor.x, neighbor.y, cols)]].push(neighbor);\n\n                \n\n                //TODO: figure out how to do this in constant time\n                queue.decreaseKey(current.node, currentPathGScore);\n                \n                return null;\n            }\n            return null;\n        })\n    }\n}\n\nexport default Dijkstra;"]},"metadata":{},"sourceType":"module"}