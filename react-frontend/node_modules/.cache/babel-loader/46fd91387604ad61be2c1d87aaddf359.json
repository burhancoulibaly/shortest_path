{"ast":null,"code":"import MinHeap from '../MinHeap';\n\nfunction getIndex(x, y, cols) {\n  return x + y * cols;\n}\n\nfunction heuristic(startPoint, endPoint, heuristic) {\n  //TODO make this a switch for the different types of heuristic functions\n  let distance;\n\n  switch (heuristic) {\n    case \"euclidean\":\n      distance = Math.sqrt(Math.pow(endPoint.x - startPoint.x, 2) + Math.pow(endPoint.y - startPoint.y, 2));\n      break;\n\n    case \"manhattan\":\n      distance = Math.abs(startPoint.x - endPoint.x) + Math.abs(startPoint.y - endPoint.y);\n      break;\n\n    default:\n      distance = Math.sqrt(Math.pow(endPoint.x - startPoint.x, 2) + Math.pow(endPoint.y - startPoint.y, 2));\n      break;\n  }\n\n  return distance;\n}\n\nfunction dist(startPoint, endPoint) {\n  //TODO make this a switch for the different types of heuristic functions\n  const distance = Math.sqrt(Math.pow(endPoint.x - startPoint.x, 2) + Math.pow(endPoint.y - startPoint.y, 2));\n  return distance;\n}\n\nfunction getPoints(gridMap) {\n  let startPoint = null;\n  let endPoints = [];\n  gridMap.map(square => {\n    if (square.val && square.type === \"start\") {\n      // console.log(square);\n      startPoint = square;\n      return null;\n    }\n\n    if (square.val && square.type === \"end\") {\n      // console.log(square);\n      endPoints.push(square);\n      return null;\n    }\n\n    return null;\n  });\n  return [startPoint, endPoints];\n}\n\nfunction getNeighbors(point, gridMap, rows, cols, cutCorners, allowDiags) {\n  //Point                                 Index\n  // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n  // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n  // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n  // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n  // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n  // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n  // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n  // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n  const neighbors = new Array(8);\n\n  if (point.x > 0) {\n    const left = getIndex(point.x - 1, point.y, cols);\n\n    if (gridMap[left].type !== \"wall\" && gridMap[left].type !== \"start\") {\n      neighbors[0] = gridMap[left];\n    }\n  }\n\n  if (point.x < cols - 1) {\n    const right = getIndex(point.x + 1, point.y, cols);\n\n    if (gridMap[right].type !== \"wall\" && gridMap[right].type !== \"start\") {\n      neighbors[1] = gridMap[right];\n    }\n  }\n\n  if (point.y > 0) {\n    const up = getIndex(point.x, point.y - 1, cols);\n\n    if (gridMap[up].type !== \"wall\" && gridMap[up].type !== \"start\") {\n      neighbors[2] = gridMap[up];\n    }\n  }\n\n  if (point.y < rows - 1) {\n    const down = getIndex(point.x, point.y + 1, cols);\n\n    if (gridMap[down].type !== \"wall\" && gridMap[down].type !== \"start\") {\n      neighbors[3] = gridMap[down];\n    }\n  }\n\n  if (point.x > 0 && point.y > 0) {\n    const topLeft = getIndex(point.x - 1, point.y - 1, cols);\n\n    if (gridMap[topLeft].type !== \"wall\" && gridMap[topLeft].type !== \"start\") {\n      if (allowDiags) {\n        if (!cutCorners) {\n          if (gridMap[topLeft + 1].type !== \"wall\" && gridMap[topLeft + 50].type !== \"wall\") {\n            neighbors[4] = gridMap[topLeft];\n          }\n        } else {\n          neighbors[4] = gridMap[topLeft];\n        }\n      }\n    }\n  }\n\n  if (point.x < cols - 1 && point.y > 0) {\n    const topRight = getIndex(point.x + 1, point.y - 1, cols);\n\n    if (gridMap[topRight].type !== \"wall\" && gridMap[topRight].type !== \"start\") {\n      if (allowDiags) {\n        if (!cutCorners) {\n          if (gridMap[topRight - 1].type !== \"wall\" && gridMap[topRight + 50].type !== \"wall\") {\n            neighbors[5] = gridMap[topRight];\n          }\n        } else {\n          neighbors[5] = gridMap[topRight];\n        }\n      }\n    }\n  }\n\n  if (point.x > 0 && point.y < rows - 1) {\n    const bottomLeft = getIndex(point.x - 1, point.y + 1, cols);\n\n    if (gridMap[bottomLeft].type !== \"wall\" && gridMap[bottomLeft].type !== \"start\") {\n      if (allowDiags) {\n        if (!cutCorners) {\n          if (gridMap[bottomLeft + 1].type !== \"wall\" && gridMap[bottomLeft - 50].type !== \"wall\") {\n            neighbors[6] = gridMap[bottomLeft];\n          }\n        } else {\n          neighbors[6] = gridMap[bottomLeft];\n        }\n      }\n    }\n  }\n\n  if (point.x < cols - 1 && point.y < rows - 1) {\n    const bottomRight = getIndex(point.x + 1, point.y + 1, cols);\n\n    if (gridMap[bottomRight].type !== \"wall\" && gridMap[bottomRight].type !== \"start\") {\n      if (allowDiags) {\n        if (!cutCorners) {\n          if (gridMap[bottomRight - 1].type !== \"wall\" && gridMap[bottomRight - 50].type !== \"wall\") {\n            neighbors[7] = gridMap[bottomRight];\n          }\n        } else {\n          neighbors[7] = gridMap[bottomRight];\n        }\n      }\n    }\n  }\n\n  return neighbors;\n}\n\nfunction AStar(rows, cols, gridMap, heuristicType, memState, setState, cutCorners, allowDiags) {\n  const [startPoint, endPoints] = getPoints(gridMap);\n  const openSetStart = new MinHeap();\n  const openSetEnd = new MinHeap();\n  const cameFromStart = {};\n  const cameFromEnd = {};\n  const closedSetStart = {};\n  const closedSetEnd = {};\n  const gScore = {};\n  const fScore = {};\n  const states = []; //TODO: Bug, clears grid but then returns it to its previous state\n\n  const newState = { ...memState,\n    grid: new Array(rows * cols).fill({\n      val: false,\n      type: null\n    }).map((square, i) => {\n      return { ...square,\n        x: i % cols,\n        y: Math.abs((i - i % cols) / cols)\n      };\n    })\n  };\n  states.push(newState);\n  let goal = null;\n\n  if (!startPoint || !endPoints) {\n    console.log(\"Map must have a start point, and an end point\");\n    return \"Map must have a start point, and an end point\";\n  }\n\n  cameFromStart[getIndex(startPoint.x, startPoint.y, cols)] = null;\n  gScore[getIndex(startPoint.x, startPoint.y, cols)] = 0;\n  const endPointDistances = new Array(endPoints.length);\n  endPoints.map((endPoint, i) => {\n    const hScore = heuristic(startPoint, endPoint, heuristicType);\n    endPointDistances[i] = [endPoint, gScore[getIndex(startPoint.x, startPoint.y, cols)] + hScore];\n    return null;\n  }); // console.log(endPointDistances);\n\n  endPointDistances.sort((a, b) => {\n    if (a[1] > b[1]) {\n      return 1;\n    }\n\n    if (a[1] < b[1]) {\n      return -1;\n    }\n\n    return 0;\n  });\n  goal = endPointDistances[0][0];\n  fScore[getIndex(startPoint.x, startPoint.y, cols)] = endPointDistances[0][1];\n  openSetStart.insert({\n    point: startPoint,\n    val: fScore[getIndex(startPoint.x, startPoint.y, cols)]\n  });\n  cameFromEnd[getIndex(goal.x, goal.y, cols)] = null;\n  gScore[getIndex(goal.x, goal.y, cols)] = 0;\n  fScore[getIndex(goal.x, goal.y, cols)] = gScore[getIndex(goal.x, goal.y, cols)] + heuristic(goal, startPoint, heuristicType);\n  openSetEnd.insert({\n    point: goal,\n    val: fScore[getIndex(goal.x, goal.y, cols)]\n  });\n\n  while (openSetStart.getHeap().length !== 0 && openSetEnd.getHeap().length !== 0) {\n    const current1 = openSetStart.peek().point;\n    const current2 = openSetEnd.peek().point;\n    openSetStart.extract();\n    openSetEnd.extract();\n    closedSetStart[getIndex(current1.x, current1.y, cols)] = current1;\n    closedSetEnd[getIndex(current2.x, current2.y, cols)] = current2;\n    const newState = { ...memState,\n      grid: memState.grid.map((square, index) => {\n        if (current1.x === square.x && current1.y === square.y) {\n          if (current1.type !== \"start\" && current1.type !== \"end\") {\n            memState.grid[index] = { ...memState.grid[index],\n              val: true,\n              type: \"neighbors\"\n            };\n          }\n\n          return { ...square\n          };\n        }\n\n        if (current2.x === square.x && current2.y === square.y) {\n          if (current2.type !== \"start\" && current2.type !== \"end\") {\n            memState.grid[index] = { ...memState.grid[index],\n              val: true,\n              type: \"neighbors\"\n            };\n          }\n\n          return { ...square\n          };\n        }\n\n        return { ...square\n        };\n      })\n    };\n    states.push(newState);\n    console.log(\"current1\", current2.x, current2.y);\n    console.log(current1.x, current1.y);\n\n    if (closedSetStart[getIndex(current2.x, current2.y, cols)] || closedSetEnd[getIndex(current1.x, current1.y, cols)]) {\n      // const state = states[states.length-1];\n      // setState({\n      //     // return {\n      //     ...state,\n      //     //state object is immutable so updates have to be done this way\n      //     grid: state.grid.map((square, index) => {\n      //         if(cameFrom[index]){\n      //             if(square.type === \"end\"){\n      //                 let prev = cameFrom[index];\n      //                 while(prev){                   \n      //                     if(prev.type !== \"start\" && prev.type !== \"end\"){\n      //                         state.grid[getIndex(prev.x,prev.y,state.cols)] = {\n      //                             ...state.grid[getIndex(prev.x,prev.y,state.cols)],\n      //                             val: true,\n      //                             type: \"path\"\n      //                         }\n      //                     }\n      //                     prev = cameFrom[getIndex(prev.x,prev.y,state.cols)];\n      //                 }\n      //                 return {...square};\n      //             }\n      //             return {...square};\n      //         }\n      //         return {...square};\n      //     })\n      // });\n      console.log(\"PATH FOUND!!!!!\");\n      return states;\n    }\n\n    const neighbors1 = getNeighbors(current1, gridMap, rows, cols, cutCorners, allowDiags);\n    const neighbors2 = getNeighbors(current2, gridMap, rows, cols, cutCorners, allowDiags);\n    neighbors1.map(neighbor => {\n      // console.log(neighbor);\n      // console.log((gScore[getIndex(current1.x, current1.y, cols)] + dist(current1, neighbor)) + heuristic(neighbor, goal));\n      // console.log(\"neighbor\", neighbor);\n      const current1PathGScore = gScore[getIndex(current1.x, current1.y, cols)] + dist(current1, neighbor);\n\n      if (current1PathGScore < gScore[getIndex(neighbor.x, neighbor.y, cols)] || !gScore[getIndex(neighbor.x, neighbor.y, cols)]) {\n        cameFromStart[getIndex(neighbor.x, neighbor.y, cols)] = current1;\n        gScore[getIndex(neighbor.x, neighbor.y, cols)] = current1PathGScore;\n        const hScore = heuristic(neighbor, goal, heuristicType);\n        fScore[getIndex(neighbor.x, neighbor.y, cols)] = gScore[getIndex(neighbor.x, neighbor.y, cols)] + hScore;\n\n        if (!openSetStart.find(fScore[getIndex(neighbor.x, neighbor.y, cols)], neighbor)) {\n          openSetStart.insert({\n            point: neighbor,\n            val: fScore[getIndex(neighbor.x, neighbor.y, cols)]\n          });\n          const newState = { ...memState,\n            grid: memState.grid.map((square, index) => {\n              if (neighbor.x === square.x && neighbor.y === square.y) {\n                if (neighbor.type !== \"start\" && neighbor.type !== \"end\") {\n                  memState.grid[index] = { ...memState.grid[index],\n                    val: true,\n                    type: \"openset\"\n                  };\n                }\n\n                return { ...square\n                };\n              }\n\n              return { ...square\n              };\n            })\n          };\n          states.push(newState);\n          return null;\n        }\n\n        return null;\n      }\n\n      return null;\n    });\n    neighbors2.map(neighbor => {\n      // console.log(neighbor);\n      // console.log((gScore[getIndex(current2.x, current2.y, cols)] + dist(current2, neighbor)) + heuristic(neighbor, goal));\n      // console.log(\"neighbor\", neighbor);\n      const current2PathGScore = gScore[getIndex(current2.x, current2.y, cols)] + dist(current2, neighbor);\n\n      if (current2PathGScore < gScore[getIndex(neighbor.x, neighbor.y, cols)] || !gScore[getIndex(neighbor.x, neighbor.y, cols)]) {\n        cameFromEnd[getIndex(neighbor.x, neighbor.y, cols)] = current2;\n        gScore[getIndex(neighbor.x, neighbor.y, cols)] = current2PathGScore;\n        const hScore = heuristic(neighbor, startPoint, heuristicType);\n        fScore[getIndex(neighbor.x, neighbor.y, cols)] = gScore[getIndex(neighbor.x, neighbor.y, cols)] + hScore;\n\n        if (!openSetEnd.find(fScore[getIndex(neighbor.x, neighbor.y, cols)], neighbor)) {\n          openSetEnd.insert({\n            point: neighbor,\n            val: fScore[getIndex(neighbor.x, neighbor.y, cols)]\n          });\n          const newState = { ...memState,\n            grid: memState.grid.map((square, index) => {\n              if (neighbor.x === square.x && neighbor.y === square.y) {\n                if (neighbor.type !== \"start\" && neighbor.type !== \"end\") {\n                  memState.grid[index] = { ...memState.grid[index],\n                    val: true,\n                    type: \"openset\"\n                  };\n                }\n\n                return { ...square\n                };\n              }\n\n              return { ...square\n              };\n            })\n          };\n          states.push(newState);\n          return null;\n        }\n\n        return null;\n      }\n\n      return null;\n    });\n  }\n\n  return states;\n}\n\nexport default AStar;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Algorithms/Bi-Directional/AStar.js"],"names":["MinHeap","getIndex","x","y","cols","heuristic","startPoint","endPoint","distance","Math","sqrt","pow","abs","dist","getPoints","gridMap","endPoints","map","square","val","type","push","getNeighbors","point","rows","cutCorners","allowDiags","neighbors","Array","left","right","up","down","topLeft","topRight","bottomLeft","bottomRight","AStar","heuristicType","memState","setState","openSetStart","openSetEnd","cameFromStart","cameFromEnd","closedSetStart","closedSetEnd","gScore","fScore","states","newState","grid","fill","i","goal","console","log","endPointDistances","length","hScore","sort","a","b","insert","getHeap","current1","peek","current2","extract","index","neighbors1","neighbors2","neighbor","current1PathGScore","find","current2PathGScore"],"mappings":"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","sourcesContent":["import MinHeap from '../MinHeap';\n\nfunction getIndex(x, y, cols){\n    return (x + (y * cols));\n}\n\nfunction heuristic(startPoint, endPoint, heuristic){\n    //TODO make this a switch for the different types of heuristic functions\n    let distance;\n    switch (heuristic) {\n        case \"euclidean\":\n            distance = Math.sqrt(Math.pow((endPoint.x-startPoint.x), 2) + Math.pow((endPoint.y-startPoint.y), 2));\n\n            break;\n        \n        case \"manhattan\":\n            distance = Math.abs(startPoint.x-endPoint.x) +  Math.abs(startPoint.y-endPoint.y);\n\n            break;\n\n        default:\n            distance = Math.sqrt(Math.pow((endPoint.x-startPoint.x), 2) + Math.pow((endPoint.y-startPoint.y), 2));\n\n            break;\n    }\n    \n    \n\n    return distance;\n} \n\nfunction dist(startPoint, endPoint){\n    //TODO make this a switch for the different types of heuristic functions\n    const distance = Math.sqrt(Math.pow((endPoint.x-startPoint.x), 2) + Math.pow((endPoint.y-startPoint.y), 2)); \n\n    return distance;\n} \n\nfunction getPoints(gridMap){\n    let startPoint = null;\n    let endPoints = [];\n    \n    gridMap.map((square) => {\n        if(square.val && square.type ===  \"start\"){\n            // console.log(square);\n            startPoint = square;\n\n            return null;\n        }\n\n        if(square.val && square.type === \"end\"){\n            // console.log(square);\n            endPoints.push(square);\n\n            return null;\n        }\n\n        return null;\n    })\n\n    return [startPoint, endPoints];\n}\n\nfunction getNeighbors(point, gridMap, rows, cols, cutCorners, allowDiags){\n    //Point                                 Index\n    // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n    // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n    // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n    // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n    // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n    // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n    // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n    // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n    const neighbors = new Array(8);\n\n    if(point.x > 0){\n        const left = getIndex((point.x-1), (point.y), cols);\n\n        if(gridMap[left].type !== \"wall\" && gridMap[left].type !== \"start\"){\n            neighbors[0] = gridMap[left];\n        }\n    }\n    if(point.x < cols-1){\n        const right = getIndex((point.x+1), (point.y), cols);\n\n        if(gridMap[right].type !== \"wall\" && gridMap[right].type !== \"start\"){\n            neighbors[1] = gridMap[right];\n        }\n    }\n    if(point.y > 0){\n        const up = getIndex((point.x), (point.y-1), cols);\n\n        if(gridMap[up].type !== \"wall\" && gridMap[up].type !== \"start\"){\n            neighbors[2] = gridMap[up];\n        }\n    }\n    if(point.y < rows-1){\n        const down = getIndex((point.x), (point.y+1), cols);\n\n        if(gridMap[down].type !== \"wall\" && gridMap[down].type !== \"start\"){\n            neighbors[3] = gridMap[down];\n        }\n    }\n    if(point.x > 0 && point.y > 0){\n        const topLeft = getIndex((point.x-1), (point.y-1), cols);\n\n        if(gridMap[topLeft].type !== \"wall\" && gridMap[topLeft].type !== \"start\"){\n            if(allowDiags){\n                if(!cutCorners){\n                    if(gridMap[topLeft+1].type !== \"wall\" && gridMap[topLeft+50].type !== \"wall\"){\n                        neighbors[4] = gridMap[topLeft];\n                    }\n                }else{\n                    neighbors[4] = gridMap[topLeft];\n                }\n            }\n        }\n    }\n    if(point.x < cols-1 && point.y > 0){\n        const topRight = getIndex((point.x+1), (point.y-1), cols);\n\n        if(gridMap[topRight].type !== \"wall\" && gridMap[topRight].type !== \"start\"){\n            if(allowDiags){\n                if(!cutCorners){\n                    if(gridMap[topRight-1].type !== \"wall\" && gridMap[topRight+50].type !== \"wall\"){\n                        neighbors[5] = gridMap[topRight];\n                    }\n                }else{\n                    neighbors[5] = gridMap[topRight];\n                }\n            }\n        }\n    }\n    if(point.x > 0 && point.y < rows-1){\n        const bottomLeft  = getIndex((point.x-1), (point.y+1), cols);\n\n        if(gridMap[bottomLeft].type !== \"wall\" && gridMap[bottomLeft].type !== \"start\"){\n            if(allowDiags){\n                if(!cutCorners){\n                    if(gridMap[bottomLeft+1].type !== \"wall\" && gridMap[bottomLeft-50].type !== \"wall\"){\n                        neighbors[6] = gridMap[bottomLeft];\n                    }\n                }else{\n                    neighbors[6] = gridMap[bottomLeft];\n                }\n            }\n        }\n    }\n    if(point.x < cols-1 && point.y < rows-1){\n        const bottomRight = getIndex((point.x+1), (point.y+1), cols);\n\n        if(gridMap[bottomRight].type !== \"wall\" && gridMap[bottomRight].type !== \"start\"){\n            if(allowDiags){\n                if(!cutCorners){\n                    if(gridMap[bottomRight-1].type !== \"wall\" && gridMap[bottomRight-50].type !== \"wall\"){\n                        neighbors[7] = gridMap[bottomRight];\n                    }\n                }else{\n                    neighbors[7] = gridMap[bottomRight]\n                }\n            }\n        }\n    }\n\n    return neighbors;\n}\n\nfunction AStar(rows, cols, gridMap, heuristicType, memState, setState, cutCorners, allowDiags){\n    const [startPoint, endPoints] = getPoints(gridMap);\n    const openSetStart = new MinHeap();\n    const openSetEnd = new MinHeap();\n    const cameFromStart = {};\n    const cameFromEnd = {};\n    const closedSetStart = {};\n    const closedSetEnd = {};\n    const gScore = {};\n    const fScore = {};\n    const states = [];\n\n    //TODO: Bug, clears grid but then returns it to its previous state\n    const newState = {\n        ...memState,\n        grid: new Array(rows*cols).fill({val: false, type: null}).map((square, i) => {\n            return {\n                ...square,\n                x: i % cols,\n                y: Math.abs((i - (i % cols)) / cols)\n            }\n        })\n    }\n    states.push(newState);\n\n    let goal = null;\n\n    if(!startPoint || !endPoints){\n        console.log(\"Map must have a start point, and an end point\");\n        return \"Map must have a start point, and an end point\"; \n    }\n\n    cameFromStart[getIndex(startPoint.x, startPoint.y, cols)] = null;\n\n    gScore[getIndex(startPoint.x, startPoint.y, cols)] = 0;\n\n    const endPointDistances = new Array(endPoints.length);\n\n    endPoints.map((endPoint, i) => {\n        const hScore = heuristic(startPoint, endPoint, heuristicType); \n\n        endPointDistances[i] = [endPoint, gScore[getIndex(startPoint.x, startPoint.y, cols)] + hScore];\n\n        return null;\n    })\n\n    // console.log(endPointDistances);\n    \n    endPointDistances.sort((a, b) => {\n        if(a[1] > b[1]){\n            return 1\n        }\n        if(a[1] < b[1]){\n            return -1\n        }\n\n        return 0;\n    });\n\n    goal = endPointDistances[0][0];\n\n    fScore[getIndex(startPoint.x, startPoint.y, cols)] = endPointDistances[0][1];\n\n    openSetStart.insert({point: startPoint, val: fScore[getIndex(startPoint.x, startPoint.y, cols)]});\n\n\n    cameFromEnd[getIndex(goal.x, goal.y, cols)] = null;\n\n    gScore[getIndex(goal.x, goal.y, cols)] = 0;\n\n    fScore[getIndex(goal.x, goal.y, cols)] = gScore[getIndex(goal.x, goal.y, cols)] + heuristic(goal, startPoint, heuristicType);\n\n    openSetEnd.insert({point: goal, val: fScore[getIndex(goal.x, goal.y, cols)]});\n\n\n    while(openSetStart.getHeap().length !== 0 && openSetEnd.getHeap().length !== 0){\n        const current1 = openSetStart.peek().point;\n        const current2 = openSetEnd.peek().point;\n\n        openSetStart.extract();\n        openSetEnd.extract();\n\n        closedSetStart[getIndex(current1.x, current1.y, cols)] = current1;\n        closedSetEnd[getIndex(current2.x, current2.y, cols)] = current2;\n\n\n        const newState = {\n            ...memState,\n            grid: memState.grid.map((square, index) => {\n                if(current1.x === square.x && current1.y === square.y){\n                    if(current1.type !== \"start\" && current1.type !== \"end\"){\n                        memState.grid[index] = {\n                            ...memState.grid[index],\n                            val: true,\n                            type: \"neighbors\"\n                        }\n                    }\n                    return {...square}\n                }\n                if(current2.x === square.x && current2.y === square.y){\n                    if(current2.type !== \"start\" && current2.type !== \"end\"){\n                        memState.grid[index] = {\n                            ...memState.grid[index],\n                            val: true,\n                            type: \"neighbors\"\n                        }\n                    }\n                    return {...square}\n                }\n                return {...square}\n            })\n        }\n        states.push(newState);\n\n        console.log(\"current1\", current2.x, current2.y);\n        console.log(current1.x, current1.y);\n\n        if(closedSetStart[getIndex(current2.x, current2.y, cols)] || closedSetEnd[getIndex(current1.x, current1.y, cols)]){\n            // const state = states[states.length-1];\n            // setState({\n            //     // return {\n            //     ...state,\n            //     //state object is immutable so updates have to be done this way\n            //     grid: state.grid.map((square, index) => {\n            //         if(cameFrom[index]){\n            //             if(square.type === \"end\"){\n            //                 let prev = cameFrom[index];\n                \n            //                 while(prev){                   \n            //                     if(prev.type !== \"start\" && prev.type !== \"end\"){\n            //                         state.grid[getIndex(prev.x,prev.y,state.cols)] = {\n            //                             ...state.grid[getIndex(prev.x,prev.y,state.cols)],\n            //                             val: true,\n            //                             type: \"path\"\n            //                         }\n            //                     }\n            //                     prev = cameFrom[getIndex(prev.x,prev.y,state.cols)];\n            //                 }\n            //                 return {...square};\n            //             }\n            //             return {...square};\n            //         }\n            //         return {...square};\n            //     })\n                \n            // });\n\n            console.log(\"PATH FOUND!!!!!\");\n            return states;\n        }\n\n        const neighbors1 = getNeighbors(current1, gridMap, rows, cols, cutCorners, allowDiags);\n        const neighbors2 = getNeighbors(current2, gridMap, rows, cols, cutCorners, allowDiags);\n\n        neighbors1.map((neighbor) => {\n            // console.log(neighbor);\n            // console.log((gScore[getIndex(current1.x, current1.y, cols)] + dist(current1, neighbor)) + heuristic(neighbor, goal));\n            // console.log(\"neighbor\", neighbor);\n\n            const current1PathGScore = gScore[getIndex(current1.x, current1.y, cols)] + dist(current1, neighbor);\n            \n            if(current1PathGScore < gScore[getIndex(neighbor.x, neighbor.y, cols)] || !gScore[getIndex(neighbor.x, neighbor.y, cols)]){\n                cameFromStart[getIndex(neighbor.x, neighbor.y, cols)] = current1;\n\n                gScore[getIndex(neighbor.x, neighbor.y, cols)] = current1PathGScore;\n\n                const hScore = heuristic(neighbor, goal, heuristicType);\n                \n                fScore[getIndex(neighbor.x, neighbor.y, cols)] = (gScore[getIndex(neighbor.x, neighbor.y, cols)] + hScore);\n                \n                if(!openSetStart.find(fScore[getIndex(neighbor.x, neighbor.y, cols)], neighbor)){\n                    openSetStart.insert({point: neighbor, val: fScore[getIndex(neighbor.x, neighbor.y, cols)]});\n                    \n                    const newState = {\n                        ...memState,\n                        grid: memState.grid.map((square, index) => {\n                            if(neighbor.x === square.x && neighbor.y === square.y){\n                                if(neighbor.type !== \"start\" && neighbor.type !== \"end\"){\n                                    memState.grid[index] = {\n                                        ...memState.grid[index],\n                                        val: true,\n                                        type: \"openset\"\n                                    }\n                                }\n                                return {...square}\n                            }\n                            return {...square}\n                        })\n                    }\n                    states.push(newState); \n                    \n                    return null;\n                }\n                return null;\n            }\n            return null;\n        });\n\n        neighbors2.map((neighbor) => {\n            // console.log(neighbor);\n            // console.log((gScore[getIndex(current2.x, current2.y, cols)] + dist(current2, neighbor)) + heuristic(neighbor, goal));\n            // console.log(\"neighbor\", neighbor);\n\n            const current2PathGScore = gScore[getIndex(current2.x, current2.y, cols)] + dist(current2, neighbor);\n            \n            if(current2PathGScore < gScore[getIndex(neighbor.x, neighbor.y, cols)] || !gScore[getIndex(neighbor.x, neighbor.y, cols)]){\n                cameFromEnd[getIndex(neighbor.x, neighbor.y, cols)] = current2;\n\n                gScore[getIndex(neighbor.x, neighbor.y, cols)] = current2PathGScore;\n\n                const hScore = heuristic(neighbor, startPoint, heuristicType);\n                \n                fScore[getIndex(neighbor.x, neighbor.y, cols)] = (gScore[getIndex(neighbor.x, neighbor.y, cols)] + hScore);\n                \n                if(!openSetEnd.find(fScore[getIndex(neighbor.x, neighbor.y, cols)], neighbor)){\n                    openSetEnd.insert({point: neighbor, val: fScore[getIndex(neighbor.x, neighbor.y, cols)]});\n                    \n                    const newState = {\n                        ...memState,\n                        grid: memState.grid.map((square, index) => {\n                            if(neighbor.x === square.x && neighbor.y === square.y){\n                                if(neighbor.type !== \"start\" && neighbor.type !== \"end\"){\n                                    memState.grid[index] = {\n                                        ...memState.grid[index],\n                                        val: true,\n                                        type: \"openset\"\n                                    }\n                                }\n                                return {...square}\n                            }\n                            return {...square}\n                        })\n                    }\n                    states.push(newState); \n                    \n                    return null;\n                }\n                return null;\n            }\n            return null;\n        });\n    }\n    return states;\n}\n\nexport default AStar"]},"metadata":{},"sourceType":"module"}