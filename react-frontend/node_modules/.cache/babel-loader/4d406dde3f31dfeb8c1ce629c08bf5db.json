{"ast":null,"code":"import react, { useContext } from 'react';\nimport { ApolloClient, InMemoryCache, ApolloLink, HttpLink } from '@apollo/client';\nimport UserContext from './UserContext';\nconst httpLink = new HttpLink({\n  uri: 'http://localhost:3000/graphql'\n});\nconst authLink = new ApolloLink((operation, forward) => {\n  const user = localStorage.getItem('user');\n  let accessToken;\n\n  if (user) {\n    accessToken = JSON.parse(user).accessToken;\n  } // Use the setContext method to set the HTTP headers.\n\n\n  operation.setContext({\n    headers: {\n      authorization: accessToken ? `Bearer ${accessToken}` : \"\"\n    }\n  }); // Call the next link in the middleware chain.\n\n  return forward(operation);\n});\nexport default new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache({\n    addTypename: false\n  }),\n  credentials: 'include'\n});","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/ApolloConfig.js"],"names":["react","useContext","ApolloClient","InMemoryCache","ApolloLink","HttpLink","UserContext","httpLink","uri","authLink","operation","forward","user","localStorage","getItem","accessToken","JSON","parse","setContext","headers","authorization","link","concat","cache","addTypename","credentials"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,YAAT,EAAuBC,aAAvB,EAAsCC,UAAtC,EAAkDC,QAAlD,QAAkE,gBAAlE;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,MAAMC,QAAQ,GAAG,IAAIF,QAAJ,CAAa;AAAEG,EAAAA,GAAG,EAAE;AAAP,CAAb,CAAjB;AAEA,MAAMC,QAAQ,GAAG,IAAIL,UAAJ,CAAe,CAACM,SAAD,EAAYC,OAAZ,KAAwB;AACpD,QAAMC,IAAI,GAAGC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAb;AACA,MAAIC,WAAJ;;AAEA,MAAGH,IAAH,EAAQ;AACJG,IAAAA,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWL,IAAX,EAAiBG,WAA/B;AACH,GANmD,CAQpD;;;AACAL,EAAAA,SAAS,CAACQ,UAAV,CAAqB;AACnBC,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAEL,WAAW,GAAI,UAASA,WAAY,EAAzB,GAA6B;AADhD;AADU,GAArB,EAToD,CAepD;;AACA,SAAOJ,OAAO,CAACD,SAAD,CAAd;AACH,CAjBgB,CAAjB;AAmBA,eAAe,IAAIR,YAAJ,CAAiB;AAC5BmB,EAAAA,IAAI,EAAEZ,QAAQ,CAACa,MAAT,CAAgBf,QAAhB,CADsB;AAE5BgB,EAAAA,KAAK,EAAE,IAAIpB,aAAJ,CAAkB;AACrBqB,IAAAA,WAAW,EAAE;AADQ,GAAlB,CAFqB;AAK5BC,EAAAA,WAAW,EAAE;AALe,CAAjB,CAAf","sourcesContent":["import react, { useContext } from 'react';\nimport { ApolloClient, InMemoryCache, ApolloLink, HttpLink } from '@apollo/client';\nimport UserContext from './UserContext';\n\nconst httpLink = new HttpLink({ uri: 'http://localhost:3000/graphql' });\n\nconst authLink = new ApolloLink((operation, forward) => {\n    const user = localStorage.getItem('user');\n    let accessToken;\n\n    if(user){\n        accessToken = JSON.parse(user).accessToken;\n    }\n  \n    // Use the setContext method to set the HTTP headers.\n    operation.setContext({\n      headers: {\n        authorization: accessToken ? `Bearer ${accessToken}` : \"\"\n      }\n    });\n  \n    // Call the next link in the middleware chain.\n    return forward(operation);\n});\n\nexport default new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache({\n        addTypename: false\n    }),\n    credentials: 'include'\n});"]},"metadata":{},"sourceType":"module"}