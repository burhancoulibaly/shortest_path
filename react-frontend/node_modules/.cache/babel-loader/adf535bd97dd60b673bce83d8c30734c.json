{"ast":null,"code":"class MinHeap {\n  constructor(heap = []) {\n    this.getHeap = () => {\n      return this._heap;\n    };\n\n    this.parentPos = pos => {\n      return parseInt((pos - 1) / 2);\n    };\n\n    this.leftChildPos = pos => {\n      return parseInt(2 * pos + 1);\n    };\n\n    this.rightChildPos = pos => {\n      return parseInt(2 * pos + 2);\n    };\n\n    this.insert = val => {\n      this._heap.push(val);\n\n      let pos = this._heap.length - 1;\n\n      if (this._heap.length <= 1) {\n        return;\n      }\n\n      while (this.parentPos(pos) >= 0 && this._heap[pos] < this._heap[this.parentPos(pos)]) {\n        this.swap(pos, this.parentPos(pos));\n        pos = this.parentPos(pos);\n      }\n\n      return;\n    };\n\n    this.peek = () => {\n      return this._heap[0];\n    };\n\n    this.extract = () => {\n      if (this._heap.length === 0) {\n        return -1;\n      }\n\n      const min = this._heap.shift();\n\n      this._heap.unshift(this._heap[this._heap.length - 1]);\n\n      this._heap.pop();\n\n      if (this._heap.length <= 1) {\n        return;\n      }\n\n      ;\n      this.minHeapify(0);\n      return min;\n    };\n\n    this.find = val => {\n      for (let i = 0; i < this._heap.length; i++) {\n        if (this._heap[i] === val) {\n          return i;\n        }\n      }\n\n      return -1;\n    };\n\n    this.delete = val => {\n      for (let i = 0; i < this._heap.length; i++) {\n        if (this._heap[i] === val) {\n          if (this._heap === 1) {\n            this._heap.pop();\n\n            return;\n          }\n\n          const tmp = this._heap[i];\n          this._heap[i] = this._heap[this._heap.length - 1];\n          this._heap[this._heap.length - 1] = tmp;\n\n          this._heap.pop();\n\n          return this.minHeapify(i);\n        }\n      }\n\n      return -1;\n    };\n\n    this.swap = (pos1, pos2) => {\n      const tmp = this._heap[pos1];\n      this._heap[pos1] = this._heap[pos2];\n      this._heap[pos2] = tmp;\n      return;\n    };\n\n    this.isEmpty = () => {\n      if (this._heap.length === 0) {\n        return true;\n      }\n    };\n\n    this.size = () => {\n      return this._heap.length;\n    };\n\n    this.minHeapify = pos => {\n      if (this.leftChildPos(pos) < this._heap.length) {\n        if (this.rightChildPos(pos) < this._heap.length) {\n          if (this._heap[pos] > this._heap[this.leftChildPos(pos)] || this._heap[pos] > this._heap[this.rightChildPos(pos)]) {\n            if (this._heap[this.leftChildPos(pos)] < this._heap[this.rightChildPos(pos)]) {\n              this.swap(pos, this.leftChildPos(pos));\n              return this.minHeapify(this.leftChildPos(pos));\n            }\n\n            this.swap(pos, this.rightChildPos(pos));\n            return this.minHeapify(this.rightChildPos(pos));\n            ;\n          }\n        }\n\n        if (this._heap[pos] > this._heap[this.leftChildPos(pos)]) {\n          this.swap(pos, this.leftChildPos(pos));\n          return this.minHeapify(this.leftChildPos(pos));\n        }\n      }\n\n      return;\n    };\n\n    this.minHeap = () => {\n      if (this._heap.length === 0) {\n        return;\n      }\n\n      for (let pos = parseInt(this._heap.length / 2) - 1; pos >= 0; pos--) {\n        this.minHeapify(pos);\n      }\n\n      return;\n    };\n\n    if (!heap.length) {}\n\n    this._heap = heap; //build min-heap\n\n    this.minHeap();\n  }\n\n}\n\nexport default MinHeap;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Algorithms/MinHeap.js"],"names":["MinHeap","constructor","heap","getHeap","_heap","parentPos","pos","parseInt","leftChildPos","rightChildPos","insert","val","push","length","swap","peek","extract","min","shift","unshift","pop","minHeapify","find","i","delete","tmp","pos1","pos2","isEmpty","size","minHeap"],"mappings":"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","sourcesContent":["class MinHeap{\n    constructor(heap=[]){\n        if(!heap.length){\n            \n        }\n        this._heap = heap;\n\n        //build min-heap\n        this.minHeap();\n    }\n\n    getHeap = () => {\n        return this._heap;\n    }\n\n    parentPos = (pos) => {\n        return parseInt((pos - 1) / 2);\n    }\n\n    leftChildPos = (pos) => {\n        return parseInt((2 * pos) + 1);\n    }\n\n    rightChildPos = (pos) => {\n        return parseInt((2 * pos) + 2);\n    }\n\n    insert = (val) => {\n        this._heap.push(val);\n\n        let pos = this._heap.length-1;\n\n        if(this._heap.length <= 1){\n            return;\n        }\n\n        while(this.parentPos(pos) >= 0 && this._heap[pos] < this._heap[this.parentPos(pos)]){\n            this.swap(pos, this.parentPos(pos));\n\n            pos = this.parentPos(pos);\n        }\n\n        return;\n    }\n\n    peek = () => {\n        return this._heap[0];\n    }\n\n    extract = () => {\n        if(this._heap.length === 0){\n            return -1;\n        }\n\n        const min = this._heap.shift();\n        this._heap.unshift(this._heap[this._heap.length-1]);\n        this._heap.pop();\n\n        if(this._heap.length <= 1){\n            return;\n        };\n\n        this.minHeapify(0);\n\n        return min;\n    }\n\n    find = (val) => {\n        for(let i = 0; i < this._heap.length; i++){\n            if(this._heap[i] === val){\n                return i;\n            }\n        }\n\n        return -1;\n    }\n\n    delete = (val) => {\n        for(let i = 0; i < this._heap.length; i++){\n            if(this._heap[i] === val){\n                if(this._heap === 1){\n                    this._heap.pop();\n\n                    return;\n                }\n\n                const tmp = this._heap[i];\n\n                this._heap[i] = this._heap[this._heap.length-1];\n                this._heap[this._heap.length-1] = tmp;\n                this._heap.pop()\n\n                return this.minHeapify(i);\n            }\n        }\n\n        return -1;\n    }\n\n    swap = (pos1, pos2) => {\n        const tmp = this._heap[pos1];\n        \n        this._heap[pos1] = this._heap[pos2];\n        this._heap[pos2] = tmp;\n\n        return;\n    }\n\n    isEmpty = () => {\n        if(this._heap.length === 0){\n            return true;\n        }\n    }\n\n    size = () => {\n        return this._heap.length\n    }\n\n    minHeapify = (pos) => {\n        if(this.leftChildPos(pos) < this._heap.length){\n            if(this.rightChildPos(pos) < this._heap.length){\n                if(this._heap[pos] > this._heap[this.leftChildPos(pos)] ||  this._heap[pos] > this._heap[this.rightChildPos(pos)]){\n                    if(this._heap[this.leftChildPos(pos)] < this._heap[this.rightChildPos(pos)]){\n                        this.swap(pos, this.leftChildPos(pos));\n                        return this.minHeapify(this.leftChildPos(pos));\n                    }\n        \n                    this.swap(pos, this.rightChildPos(pos));\n                    return this.minHeapify(this.rightChildPos(pos));;\n                }\n            }\n\n            if(this._heap[pos] > this._heap[this.leftChildPos(pos)]){\n                this.swap(pos, this.leftChildPos(pos));\n                return this.minHeapify(this.leftChildPos(pos)); \n            }\n        }\n        \n        return;\n    }\n\n    minHeap = () => {\n        if(this._heap.length === 0){\n            return;\n        }\n\n        for(let pos = parseInt(this._heap.length/2)-1; pos >= 0; pos--){\n            this.minHeapify(pos);\n        }\n\n        return;\n    }\n}\n\nexport default MinHeap;"]},"metadata":{},"sourceType":"module"}