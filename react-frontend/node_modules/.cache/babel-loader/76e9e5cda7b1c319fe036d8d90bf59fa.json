{"ast":null,"code":"var _jsxFileName = \"/home/menekou/projects/react/shortest-path/react-frontend/src/Map/Map.js\";\nimport React, { useState, useContext, useEffect, useMemo } from 'react';\nimport './Map.css';\nimport Square from '../Square/Square';\nimport MenuContext from '../MenuContext';\n\nfunction Map(props) {\n  const [menuState, dispatch] = useContext(MenuContext);\n  const [state, setState] = useState({\n    rows: 15,\n    cols: 50,\n    grid: new Array(15 * 50).fill({\n      val: false,\n      type: null\n    }),\n    //space-time O(1)\n    itemState: menuState.itemState\n  });\n  const {\n    state: memState\n  } = useMemo(() => ({\n    state\n  }), [state]); //If item button is changed\n\n  useEffect(() => {\n    setState(memState => {\n      return { ...memState,\n        itemState: menuState.itemState\n      };\n    });\n  }, [menuState.itemState]); //If menu clear button is clicked\n\n  useEffect(() => {\n    if (menuState.clear === true) {\n      setState(memState => {\n        return { ...memState,\n          grid: new Array(memState.rows * memState.cols).fill({\n            val: false,\n            type: null\n          })\n        };\n      });\n      return dispatch({\n        type: \"cleared\"\n      });\n    }\n  }, [menuState.clear, dispatch]);\n  useEffect(() => {\n    if (menuState.run === true) {\n      //Visualize path finding algorithm logic\n      return dispatch({\n        type: \"complete\"\n      });\n    }\n  }, [menuState.run, dispatch]);\n\n  const renderSquare = (x, y, val) => {\n    return /*#__PURE__*/React.createElement(Square //Minus 4 accounts for width and height\n    , {\n      width: memState.cols > memState.rows ? props.winDimensions.width / memState.cols - 4 : props.winDimensions.width / memState.cols * (Math.min(props.winDimensions.width / memState.cols, props.winDimensions.height / memState.rows) / Math.max(props.winDimensions.width / memState.cols, props.winDimensions.height / memState.rows)) - 4,\n      height: memState.rows === memState.cols ? props.winDimensions.height / memState.rows - 4 //converting aspect ration of the square to 1:1 by multiplying the height by minimum of the width and height divided by the maximum of the width and height\n      : props.winDimensions.height / memState.rows * (Math.min(props.winDimensions.width / memState.cols, props.winDimensions.height / memState.rows) / Math.max(props.winDimensions.width / memState.cols, props.winDimensions.height / memState.rows)) - 4,\n      x: x,\n      y: y,\n      val: val,\n      squareClick: (x, y) => handleClick(x, y),\n      itemState: memState.itemState,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }\n    });\n  };\n\n  const renderMap = () => {\n    //space-time O(1)\n    const rows = Array(memState.rows); //each row will contain an array of 50 available indexes\n\n    const cols = Array(memState.rows); //time O(n)\n\n    for (let i = 0; i < memState.grid.length; i++) {\n      if (i % memState.cols === 0) {\n        cols[i / memState.cols] = Array(memState.cols); //space-time O(1)\n\n        rows[i] = /*#__PURE__*/React.createElement(\"div\", {\n          className: \"grid-row\",\n          key: i / memState.cols,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 21\n          }\n        }, cols[i / memState.cols]);\n      }\n\n      let square = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"grid-col\",\n        key: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 17\n        }\n      }, renderSquare(i % memState.cols, Math.abs((i - i % memState.cols) / memState.cols), memState.grid[i].val));\n      cols[(i - i % memState.cols) / memState.cols][i % memState.cols] = square;\n    }\n\n    const map = rows;\n    return map;\n  };\n\n  const handleClick = (x, y) => {\n    switch (memState.itemState) {\n      case \"start\":\n        setState(memoizedState => ({ ...memState,\n          //state object is immutable so updates have to be done this way\n          grid: memState.grid.map((square, index) => {\n            if (index === x + y * memState.cols) {\n              // console.log(x,y,square.type,memState.itemState);\n              if (square.type === memState.itemState || !square.val) {\n                return square.val ? { ...square,\n                  val: false,\n                  type: null\n                } : { ...square,\n                  val: true,\n                  type: memState.itemState\n                };\n              }\n            }\n\n            if (square.type === memState.itemState && square.val && !memState.grid[x + y * memState.cols].val) {\n              return { ...square,\n                val: false\n              };\n            }\n\n            return { ...square\n            };\n          })\n        }));\n        break;\n\n      case \"wall\":\n        setState(memoizedState => ({ ...memState,\n          //state object is immutable so updates have to be done this way\n          grid: memState.grid.map((square, index) => {\n            if (index === x + y * memState.cols) {\n              // console.log(x,y,square.type,state.itemState);\n              if (square.type === memState.itemState || !square.val) {\n                return square.val ? { ...square,\n                  val: false,\n                  type: null\n                } : { ...square,\n                  val: true,\n                  type: memState.itemState\n                };\n              }\n            }\n\n            return { ...square\n            };\n          })\n        }));\n        break;\n\n      case \"end\":\n        setState(memoizedState => ({ ...memState,\n          //state object is immutable so updates have to be done this way\n          grid: memState.grid.map((square, index) => {\n            if (index === x + y * memState.cols) {\n              // console.log(x,y,square.type,state.itemState);\n              if (square.type === memState.itemState || !square.val) {\n                return square.val ? { ...square,\n                  val: false,\n                  type: null\n                } : { ...square,\n                  val: true,\n                  type: memState.itemState\n                };\n              }\n            }\n\n            return { ...square\n            };\n          })\n        }));\n        break;\n\n      default:\n        break;\n    }\n\n    return;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"map\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 9\n    }\n  }, console.time(), renderMap(), console.timeEnd());\n}\n\nexport default Map;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Map/Map.js"],"names":["React","useState","useContext","useEffect","useMemo","Square","MenuContext","Map","props","menuState","dispatch","state","setState","rows","cols","grid","Array","fill","val","type","itemState","memState","clear","run","renderSquare","x","y","winDimensions","width","Math","min","height","max","handleClick","renderMap","i","length","square","abs","map","memoizedState","index","console","time","timeEnd"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,EAAiDC,OAAjD,QAAgE,OAAhE;AACA,OAAO,WAAP;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;;AAEA,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAChB,QAAM,CAACC,SAAD,EAAYC,QAAZ,IAAwBR,UAAU,CAACI,WAAD,CAAxC;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC;AAC/BY,IAAAA,IAAI,EAAE,EADyB;AAE/BC,IAAAA,IAAI,EAAE,EAFyB;AAG/BC,IAAAA,IAAI,EAAE,IAAIC,KAAJ,CAAU,KAAG,EAAb,EAAiBC,IAAjB,CAAsB;AAACC,MAAAA,GAAG,EAAE,KAAN;AAAaC,MAAAA,IAAI,EAAE;AAAnB,KAAtB,CAHyB;AAGuB;AACtDC,IAAAA,SAAS,EAAEX,SAAS,CAACW;AAJU,GAAD,CAAlC;AAOA,QAAM;AAAET,IAAAA,KAAK,EAAEU;AAAT,MAAsBjB,OAAO,CAAC,OAAO;AAACO,IAAAA;AAAD,GAAP,CAAD,EAAkB,CAACA,KAAD,CAAlB,CAAnC,CATgB,CAWhB;;AACAR,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,QAAQ,CAAES,QAAD,IAAc;AACnB,aAAO,EACH,GAAGA,QADA;AAEHD,QAAAA,SAAS,EAAEX,SAAS,CAACW;AAFlB,OAAP;AAIH,KALO,CAAR;AAMH,GAPQ,EAON,CAACX,SAAS,CAACW,SAAX,CAPM,CAAT,CAZgB,CAqBhB;;AACAjB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGM,SAAS,CAACa,KAAV,KAAoB,IAAvB,EAA4B;AACxBV,MAAAA,QAAQ,CAAES,QAAD,IAAc;AACnB,eAAO,EACH,GAAGA,QADA;AAEHN,UAAAA,IAAI,EAAE,IAAIC,KAAJ,CAAUK,QAAQ,CAACR,IAAT,GAAcQ,QAAQ,CAACP,IAAjC,EAAuCG,IAAvC,CAA4C;AAACC,YAAAA,GAAG,EAAE,KAAN;AAAaC,YAAAA,IAAI,EAAE;AAAnB,WAA5C;AAFH,SAAP;AAIH,OALO,CAAR;AAOA,aAAOT,QAAQ,CAAC;AAACS,QAAAA,IAAI,EAAE;AAAP,OAAD,CAAf;AACH;AACJ,GAXQ,EAWN,CAACV,SAAS,CAACa,KAAX,EAAkBZ,QAAlB,CAXM,CAAT;AAcAP,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGM,SAAS,CAACc,GAAV,KAAkB,IAArB,EAA0B;AACtB;AAEA,aAAOb,QAAQ,CAAC;AAACS,QAAAA,IAAI,EAAE;AAAP,OAAD,CAAf;AACH;AACJ,GANQ,EAMN,CAACV,SAAS,CAACc,GAAX,EAAgBb,QAAhB,CANM,CAAT;;AAQA,QAAMc,YAAY,GAAG,CAACC,CAAD,EAAGC,CAAH,EAAKR,GAAL,KAAa;AAC9B,wBACI,oBAAC,MAAD,CACI;AADJ;AAEI,MAAA,KAAK,EACDG,QAAQ,CAACP,IAAT,GAAgBO,QAAQ,CAACR,IAAzB,GACOL,KAAK,CAACmB,aAAN,CAAoBC,KAApB,GAA4BP,QAAQ,CAACP,IAAtC,GAA8C,CADpD,GAEON,KAAK,CAACmB,aAAN,CAAoBC,KAApB,GAA4BP,QAAQ,CAACP,IAAtC,IAA+Ce,IAAI,CAACC,GAAL,CAAUtB,KAAK,CAACmB,aAAN,CAAoBC,KAApB,GAA4BP,QAAQ,CAACP,IAA/C,EAAsDN,KAAK,CAACmB,aAAN,CAAoBI,MAApB,GAA6BV,QAAQ,CAACR,IAA5F,IAAqGgB,IAAI,CAACG,GAAL,CAAUxB,KAAK,CAACmB,aAAN,CAAoBC,KAApB,GAA4BP,QAAQ,CAACP,IAA/C,EAAsDN,KAAK,CAACmB,aAAN,CAAoBI,MAApB,GAA6BV,QAAQ,CAACR,IAA5F,CAApJ,IAA0P,CALxQ;AAOI,MAAA,MAAM,EACFQ,QAAQ,CAACR,IAAT,KAAkBQ,QAAQ,CAACP,IAA3B,GACON,KAAK,CAACmB,aAAN,CAAoBI,MAApB,GAA6BV,QAAQ,CAACR,IAAvC,GAA+C,CADrD,CAEI;AAFJ,QAGOL,KAAK,CAACmB,aAAN,CAAoBI,MAApB,GAA6BV,QAAQ,CAACR,IAAvC,IAAgDgB,IAAI,CAACC,GAAL,CAAUtB,KAAK,CAACmB,aAAN,CAAoBC,KAApB,GAA4BP,QAAQ,CAACP,IAA/C,EAAsDN,KAAK,CAACmB,aAAN,CAAoBI,MAApB,GAA6BV,QAAQ,CAACR,IAA5F,IAAqGgB,IAAI,CAACG,GAAL,CAAUxB,KAAK,CAACmB,aAAN,CAAoBC,KAApB,GAA4BP,QAAQ,CAACP,IAA/C,EAAsDN,KAAK,CAACmB,aAAN,CAAoBI,MAApB,GAA6BV,QAAQ,CAACR,IAA5F,CAArJ,IAA2P,CAXzQ;AAaI,MAAA,CAAC,EAAEY,CAbP;AAcI,MAAA,CAAC,EAAEC,CAdP;AAeI,MAAA,GAAG,EAAER,GAfT;AAgBI,MAAA,WAAW,EAAE,CAACO,CAAD,EAAIC,CAAJ,KAAUO,WAAW,CAACR,CAAD,EAAIC,CAAJ,CAhBtC;AAiBI,MAAA,SAAS,EAAEL,QAAQ,CAACD,SAjBxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAqBH,GAtBD;;AAwBA,QAAMc,SAAS,GAAG,MAAM;AACpB;AACA,UAAMrB,IAAI,GAAGG,KAAK,CAACK,QAAQ,CAACR,IAAV,CAAlB,CAFoB,CAGpB;;AACA,UAAMC,IAAI,GAAGE,KAAK,CAACK,QAAQ,CAACR,IAAV,CAAlB,CAJoB,CAMpB;;AACA,SAAI,IAAIsB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGd,QAAQ,CAACN,IAAT,CAAcqB,MAAjC,EAAyCD,CAAC,EAA1C,EAA6C;AACzC,UAAGA,CAAC,GAAGd,QAAQ,CAACP,IAAb,KAAsB,CAAzB,EAA2B;AACvBA,QAAAA,IAAI,CAACqB,CAAC,GAAGd,QAAQ,CAACP,IAAd,CAAJ,GAA0BE,KAAK,CAACK,QAAQ,CAACP,IAAV,CAA/B,CADuB,CACuB;;AAE9CD,QAAAA,IAAI,CAACsB,CAAD,CAAJ,gBACI;AAAK,UAAA,SAAS,EAAC,UAAf;AAA0B,UAAA,GAAG,EAAEA,CAAC,GAAGd,QAAQ,CAACP,IAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACKA,IAAI,CAACqB,CAAC,GAAGd,QAAQ,CAACP,IAAd,CADT,CADJ;AAKH;;AAED,UAAIuB,MAAM,gBACN;AAAK,QAAA,SAAS,EAAC,UAAf;AAA0B,QAAA,GAAG,EAAEF,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKX,YAAY,CAACW,CAAC,GAAGd,QAAQ,CAACP,IAAd,EAAoBe,IAAI,CAACS,GAAL,CAAS,CAACH,CAAC,GAAIA,CAAC,GAAGd,QAAQ,CAACP,IAAnB,IAA4BO,QAAQ,CAACP,IAA9C,CAApB,EAAyEO,QAAQ,CAACN,IAAT,CAAcoB,CAAd,EAAiBjB,GAA1F,CADjB,CADJ;AAMAJ,MAAAA,IAAI,CAAC,CAACqB,CAAC,GAAIA,CAAC,GAAGd,QAAQ,CAACP,IAAnB,IAA4BO,QAAQ,CAACP,IAAtC,CAAJ,CAAgDqB,CAAC,GAAGd,QAAQ,CAACP,IAA7D,IAAqEuB,MAArE;AACH;;AAED,UAAME,GAAG,GAAG1B,IAAZ;AAEA,WAAO0B,GAAP;AACH,GA9BD;;AAgCA,QAAMN,WAAW,GAAG,CAACR,CAAD,EAAGC,CAAH,KAAS;AACzB,YAAQL,QAAQ,CAACD,SAAjB;AACI,WAAK,OAAL;AACIR,QAAAA,QAAQ,CAAC4B,aAAa,KAAK,EACvB,GAAGnB,QADoB;AAEvB;AACAN,UAAAA,IAAI,EAAEM,QAAQ,CAACN,IAAT,CAAcwB,GAAd,CAAkB,CAACF,MAAD,EAASI,KAAT,KAAmB;AACvC,gBAAGA,KAAK,KAAKhB,CAAC,GAAIC,CAAC,GAAGL,QAAQ,CAACP,IAA/B,EAAqC;AACjC;AACA,kBAAGuB,MAAM,CAAClB,IAAP,KAAgBE,QAAQ,CAACD,SAAzB,IAAsC,CAACiB,MAAM,CAACnB,GAAjD,EAAqD;AACjD,uBAAOmB,MAAM,CAACnB,GAAP,GACD,EAAC,GAAGmB,MAAJ;AAAYnB,kBAAAA,GAAG,EAAE,KAAjB;AAAwBC,kBAAAA,IAAI,EAAE;AAA9B,iBADC,GAED,EAAC,GAAGkB,MAAJ;AAAYnB,kBAAAA,GAAG,EAAE,IAAjB;AAAuBC,kBAAAA,IAAI,EAAEE,QAAQ,CAACD;AAAtC,iBAFN;AAGH;AACJ;;AAED,gBAAGiB,MAAM,CAAClB,IAAP,KAAgBE,QAAQ,CAACD,SAAzB,IAAsCiB,MAAM,CAACnB,GAA7C,IAAoD,CAACG,QAAQ,CAACN,IAAT,CAAcU,CAAC,GAAIC,CAAC,GAAGL,QAAQ,CAACP,IAAhC,EAAuCI,GAA/F,EAAmG;AAC/F,qBAAO,EAAC,GAAGmB,MAAJ;AAAYnB,gBAAAA,GAAG,EAAE;AAAjB,eAAP;AACH;;AAED,mBAAO,EAAC,GAAGmB;AAAJ,aAAP;AACH,WAfK;AAHiB,SAAL,CAAd,CAAR;AAqBA;;AAEJ,WAAK,MAAL;AACIzB,QAAAA,QAAQ,CAAC4B,aAAa,KAAK,EACvB,GAAGnB,QADoB;AAEvB;AACAN,UAAAA,IAAI,EAAEM,QAAQ,CAACN,IAAT,CAAcwB,GAAd,CAAkB,CAACF,MAAD,EAASI,KAAT,KAAmB;AACvC,gBAAGA,KAAK,KAAKhB,CAAC,GAAIC,CAAC,GAAGL,QAAQ,CAACP,IAA/B,EAAqC;AACjC;AACA,kBAAGuB,MAAM,CAAClB,IAAP,KAAgBE,QAAQ,CAACD,SAAzB,IAAsC,CAACiB,MAAM,CAACnB,GAAjD,EAAqD;AACjD,uBAAOmB,MAAM,CAACnB,GAAP,GACD,EAAC,GAAGmB,MAAJ;AAAYnB,kBAAAA,GAAG,EAAE,KAAjB;AAAwBC,kBAAAA,IAAI,EAAE;AAA9B,iBADC,GAED,EAAC,GAAGkB,MAAJ;AAAYnB,kBAAAA,GAAG,EAAE,IAAjB;AAAuBC,kBAAAA,IAAI,EAAEE,QAAQ,CAACD;AAAtC,iBAFN;AAGH;AACJ;;AAED,mBAAO,EAAC,GAAGiB;AAAJ,aAAP;AACH,WAXK;AAHiB,SAAL,CAAd,CAAR;AAiBA;;AAEJ,WAAK,KAAL;AACIzB,QAAAA,QAAQ,CAAC4B,aAAa,KAAK,EACvB,GAAGnB,QADoB;AAEvB;AACAN,UAAAA,IAAI,EAAEM,QAAQ,CAACN,IAAT,CAAcwB,GAAd,CAAkB,CAACF,MAAD,EAASI,KAAT,KAAmB;AACvC,gBAAGA,KAAK,KAAKhB,CAAC,GAAIC,CAAC,GAAGL,QAAQ,CAACP,IAA/B,EAAqC;AACjC;AACA,kBAAGuB,MAAM,CAAClB,IAAP,KAAgBE,QAAQ,CAACD,SAAzB,IAAsC,CAACiB,MAAM,CAACnB,GAAjD,EAAqD;AACjD,uBAAOmB,MAAM,CAACnB,GAAP,GACD,EAAC,GAAGmB,MAAJ;AAAYnB,kBAAAA,GAAG,EAAE,KAAjB;AAAwBC,kBAAAA,IAAI,EAAE;AAA9B,iBADC,GAED,EAAC,GAAGkB,MAAJ;AAAYnB,kBAAAA,GAAG,EAAE,IAAjB;AAAuBC,kBAAAA,IAAI,EAAEE,QAAQ,CAACD;AAAtC,iBAFN;AAGH;AACJ;;AAED,mBAAO,EAAC,GAAGiB;AAAJ,aAAP;AACH,WAXK;AAHiB,SAAL,CAAd,CAAR;AAiBA;;AAEJ;AACI;AAlER;;AAqEA;AACH,GAvED;;AA2EA,sBACI;AAAK,IAAA,EAAE,EAAC,KAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKK,OAAO,CAACC,IAAR,EADL,EAEST,SAAS,EAFlB,EAGKQ,OAAO,CAACE,OAAR,EAHL,CADJ;AAOH;;AAED,eAAerC,GAAf","sourcesContent":["import React, { useState, useContext, useEffect, useMemo } from 'react';\nimport './Map.css';\nimport Square from '../Square/Square';\nimport MenuContext from '../MenuContext';\n\nfunction Map(props) {\n    const [menuState, dispatch] = useContext(MenuContext);\n    const [state, setState] = useState({\n        rows: 15,\n        cols: 50,\n        grid: new Array(15*50).fill({val: false, type: null}),//space-time O(1)\n        itemState: menuState.itemState\n    })\n\n    const { state: memState } = useMemo(() => ({state}), [state])\n\n    //If item button is changed\n    useEffect(() => {\n        setState((memState) => {\n            return {\n                ...memState,\n                itemState: menuState.itemState\n            }\n        })\n    }, [menuState.itemState]);\n\n    //If menu clear button is clicked\n    useEffect(() => {\n        if(menuState.clear === true){\n            setState((memState) => {\n                return {\n                    ...memState,\n                    grid: new Array(memState.rows*memState.cols).fill({val: false, type: null})\n                }\n            })\n\n            return dispatch({type: \"cleared\"});\n        }\n    }, [menuState.clear, dispatch]);\n\n    \n    useEffect(() => {\n        if(menuState.run === true){\n            //Visualize path finding algorithm logic\n\n            return dispatch({type: \"complete\"});\n        }\n    }, [menuState.run, dispatch]);\n    \n    const renderSquare = (x,y,val) => {\n        return (\n            <Square\n                //Minus 4 accounts for width and height\n                width={\n                    memState.cols > memState.rows\n                        ? (props.winDimensions.width / memState.cols) - 4\n                        : (props.winDimensions.width / memState.cols) * (Math.min((props.winDimensions.width / memState.cols),(props.winDimensions.height / memState.rows)) / Math.max((props.winDimensions.width / memState.cols),(props.winDimensions.height / memState.rows))) - 4 \n                }\n                height={\n                    memState.rows === memState.cols\n                        ? (props.winDimensions.height / memState.rows) - 4\n                        //converting aspect ration of the square to 1:1 by multiplying the height by minimum of the width and height divided by the maximum of the width and height\n                        : (props.winDimensions.height / memState.rows) * (Math.min((props.winDimensions.width / memState.cols),(props.winDimensions.height / memState.rows)) / Math.max((props.winDimensions.width / memState.cols),(props.winDimensions.height / memState.rows))) - 4\n                }\n                x={x}\n                y={y}\n                val={val}\n                squareClick={(x, y) => handleClick(x, y)}\n                itemState={memState.itemState}\n            />\n        )\n    }\n\n    const renderMap = () => {\n        //space-time O(1)\n        const rows = Array(memState.rows);\n        //each row will contain an array of 50 available indexes\n        const cols = Array(memState.rows);\n\n        //time O(n)\n        for(let i = 0; i < memState.grid.length; i++){\n            if(i % memState.cols === 0){\n                cols[i / memState.cols] = Array(memState.cols)//space-time O(1)\n\n                rows[i] = (\n                    <div className=\"grid-row\" key={i / memState.cols}>\n                        {cols[i / memState.cols]}\n                    </div>\n                )\n            }\n\n            let square = (\n                <div className=\"grid-col\" key={i}>\n                    {renderSquare(i % memState.cols, Math.abs((i - (i % memState.cols)) / memState.cols), memState.grid[i].val)}\n                </div>\n            )\n\n            cols[(i - (i % memState.cols)) / memState.cols][i % memState.cols] = square;\n        }\n\n        const map = rows;\n\n        return map;\n    }\n\n    const handleClick = (x,y) => {\n        switch (memState.itemState) {\n            case \"start\":\n                setState(memoizedState => ({\n                    ...memState,\n                    //state object is immutable so updates have to be done this way\n                    grid: memState.grid.map((square, index) => {\n                        if(index === x + (y * memState.cols)){\n                            // console.log(x,y,square.type,memState.itemState);\n                            if(square.type === memState.itemState || !square.val){\n                                return square.val\n                                    ? {...square, val: false, type: null}\n                                    : {...square, val: true, type: memState.itemState}\n                            }\n                        }\n\n                        if(square.type === memState.itemState && square.val && !memState.grid[x + (y * memState.cols)].val){\n                            return {...square, val: false}\n                        }\n\n                        return {...square}\n                    })\n                }));\n                \n                break;\n\n            case \"wall\":\n                setState(memoizedState => ({\n                    ...memState,\n                    //state object is immutable so updates have to be done this way\n                    grid: memState.grid.map((square, index) => {\n                        if(index === x + (y * memState.cols)){\n                            // console.log(x,y,square.type,state.itemState);\n                            if(square.type === memState.itemState || !square.val){\n                                return square.val\n                                    ? {...square, val: false, type: null}\n                                    : {...square, val: true, type: memState.itemState}\n                            }\n                        }\n\n                        return {...square}\n                    })\n                }));\n\n                break;\n\n            case \"end\":\n                setState(memoizedState => ({\n                    ...memState,\n                    //state object is immutable so updates have to be done this way\n                    grid: memState.grid.map((square, index) => {\n                        if(index === x + (y * memState.cols)){\n                            // console.log(x,y,square.type,state.itemState);\n                            if(square.type === memState.itemState || !square.val){\n                                return square.val\n                                    ? {...square, val: false, type: null}\n                                    : {...square, val: true, type: memState.itemState}\n                            }\n                        }\n\n                        return {...square}\n                    })\n                }));\n\n                break;\n        \n            default:\n                break;\n        }\n\n        return;\n    }\n    \n\n\n    return (\n        <div id=\"map\">\n            {console.time()}\n                {renderMap()}\n            {console.timeEnd()}\n        </div>\n    )\n}\n\nexport default Map;"]},"metadata":{},"sourceType":"module"}