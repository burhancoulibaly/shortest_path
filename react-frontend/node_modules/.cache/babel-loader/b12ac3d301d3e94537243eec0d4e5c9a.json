{"ast":null,"code":"class FibonacciHeap {\n  constructor() {\n    this.getRootList = () => {\n      return this._rootList;\n    };\n\n    this.insert = node => {\n      node.setParent(null);\n\n      this._rootList.push(node);\n\n      if (this._rootList.length > 1) {\n        const node1 = this._rootList[this._rootList.length - 2];\n        const node2 = this._rootList[this._rootList.length - 1];\n        node2.setRight(node1.getRight());\n        node1.getRight().setLeft(node2);\n        node1.setRight(node2);\n        node2.setLeft(node1);\n      } else {\n        const node1 = this._rootList[this._rootList.length - 1];\n        node1.setRight(node1);\n        node1.setLeft(node1);\n      }\n\n      if (this._min === null || node.getVal() < this._min.getVal()) {\n        this._min = node;\n      }\n    };\n\n    this.peek = () => {\n      return this._min;\n    };\n\n    this.extractMin = () => {\n      const min = this._min;\n\n      if (min) {\n        if (min.getChild()) {\n          min.getChild().forEach(node => {\n            node.setParent(null);\n            this.insert(node);\n          });\n        }\n\n        if (min === min.getRight()) {\n          this._min = null;\n        } else {\n          this._min = min.getRight();\n        }\n\n        this._rootList.forEach((node, index) => {\n          if (node === min) {\n            this._rootList.splice(index, 1);\n          }\n\n          return;\n        });\n      }\n\n      this.consolidate();\n      return min;\n    };\n\n    this.link = (node1, node2) => {\n      this._rootList.forEach((node, index) => {\n        if (node2 === node) {\n          node1.setParent(null);\n          node1.setLeft(null);\n          node1.setRight(null);\n\n          if (node1.getChild() === null) {\n            node1.setChild([]);\n          }\n\n          node1.getChild().push(node2);\n\n          if (node1.getChild().length > 1) {\n            const child1 = node1.getChild()[node1.getChild().length - 2];\n            const child2 = node1.getChild()[node1.getChild().length - 1];\n\n            if (child1.point.x === 49 && child1.point.y === 14) {\n              console.log(child1);\n            }\n\n            if (child2.point.x === 49 && child2.point.y === 14) {\n              console.log(child1);\n            }\n\n            child2.setRight(child1.getRight());\n            child1.getRight().setLeft(child2);\n            child1.setRight(child2);\n            child2.setLeft(child1);\n            child2.setParent(child1.getParent());\n            child2.setIsMarked(false);\n          } else {\n            const child1 = node1.getChild()[node1.getChild().length - 1];\n            child1.setRight(child1);\n            child1.setLeft(child1);\n            child1.setParent(node1);\n            child1.setIsMarked(false);\n          }\n\n          node1.incrementDegree();\n        }\n\n        return null;\n      });\n\n      return node1;\n    };\n\n    this.consolidate = () => {\n      const arr = new Array(parseInt(this._rootList.length / Math.log(2)));\n\n      this._rootList.forEach((node, index) => {\n        let node1 = node;\n        let degree = node1.getDegree(); //degree is being used as an index\n\n        while (arr[degree]) {\n          let node2 = arr[degree];\n\n          if (node1.getVal() > node2.getVal()) {\n            const tmpNode = node1;\n            node1 = node2;\n            node2 = tmpNode;\n          }\n\n          node1 = this.link(node1, node2);\n          arr[degree] = undefined;\n          degree += 1;\n        }\n\n        arr[degree] = node1;\n      });\n\n      this._rootList = [];\n      arr.forEach((node, index) => {\n        if (node) {\n          this.insert(node);\n\n          if (this._min === null || arr[index].getVal() < this._min.getVal()) {\n            this._min = arr[index];\n          }\n        }\n      });\n    };\n\n    this.union = h => {\n      this._min = h.peek();\n      const hStartIndex = this._rootList.length;\n      const hEndIndex = h.length - 1;\n      this._rootList = this._rootList.concat(h);\n\n      if (hStartIndex !== 0) {\n        const node1 = this._rootList[hStartIndex - 1];\n        const node2 = this._rootList[hStartIndex];\n        const node3 = this._rootList[hEndIndex];\n        node3.setRight(node1.getRight());\n        node1.getRight().setLeft(node3);\n        node1.setRight(node2);\n        node2.setLeft(node1);\n      }\n\n      if ((this._min === null || h.peek()) && h.peek() < this._min) {\n        this._min = h.peek();\n      } //clear h object\n\n    };\n\n    this.decreaseKey = (node, val) => {\n      if (val > node.getVal()) {\n        throw new Error(\"Replacement key is greater than the original key\");\n      }\n\n      node.setVal(val);\n      const parent = node.getParent();\n\n      if (parent !== null && node.getVal() < parent.getVal()) {\n        this.cut(node, parent);\n        this.cascadingCut(parent);\n      }\n    };\n\n    this.cut = (child, parent) => {\n      parent.getChild().forEach((node, index) => {\n        if (node === child) {\n          node.getLeft().setRight(node.getRight());\n          node.getRight().setLeft(node.getLeft());\n          parent.getChild().splice(index, 1);\n\n          if (parent.getChild().length === 0) {\n            parent.setChild(null);\n          }\n\n          node.setParent(null);\n          node.setLeft(null);\n          node.setRight(null);\n          node.setIsMarked(false);\n          this.insert(node); //Understand better why the degree is being decremented here\n\n          parent.decrementDegree();\n        }\n\n        return;\n      });\n    };\n\n    this.cascadingCut = parent => {\n      const grandParent = parent.getParent();\n\n      if (grandParent !== null) {\n        if (parent.isMarked() === false) {\n          parent.setIsMarked(true);\n        } else {\n          this.cut(parent, grandParent);\n          this.cascadingCut(grandParent);\n        }\n      }\n    };\n\n    this._rootList = [];\n    this._min = null;\n  } //Good\n\n\n}\n\nexport default FibonacciHeap;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Algorithms/FibonacciHeap.js"],"names":["FibonacciHeap","constructor","getRootList","_rootList","insert","node","setParent","push","length","node1","node2","setRight","getRight","setLeft","_min","getVal","peek","extractMin","min","getChild","forEach","index","splice","consolidate","link","setChild","child1","child2","point","x","y","console","log","getParent","setIsMarked","incrementDegree","arr","Array","parseInt","Math","degree","getDegree","tmpNode","undefined","union","h","hStartIndex","hEndIndex","concat","node3","decreaseKey","val","Error","setVal","parent","cut","cascadingCut","child","getLeft","decrementDegree","grandParent","isMarked"],"mappings":"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","sourcesContent":["class FibonacciHeap{\n    constructor(){\n        this._rootList = [];\n        this._min = null;\n    }\n\n    //Good\n    getRootList = () => {\n        return this._rootList;\n    }\n\n    //Good\n    insert = (node) => {\n        node.setParent(null);\n\n        this._rootList.push(node);\n\n        if(this._rootList.length > 1){\n            const node1 = this._rootList[this._rootList.length-2];\n            const node2 = this._rootList[this._rootList.length-1];\n            \n            node2.setRight(node1.getRight());\n            node1.getRight().setLeft(node2);\n            node1.setRight(node2);\n            node2.setLeft(node1);\n        }else{\n            const node1 = this._rootList[this._rootList.length-1];\n            node1.setRight(node1);\n            node1.setLeft(node1);\n        }\n        \n        if(this._min === null || node.getVal() < this._min.getVal()){\n            this._min = node;\n        }\n    }\n\n    //Good\n    peek = () => {\n        return this._min;\n    }\n\n    //Good\n    extractMin = () => {\n        const min = this._min;\n\n        if(min){\n            if(min.getChild()){\n                min.getChild().forEach((node) => {\n                    node.setParent(null);\n    \n                    this.insert(node);\n                })\n            }\n\n            if(min === min.getRight()){\n                this._min = null;\n            }else{\n                this._min = min.getRight()\n            }\n\n            this._rootList.forEach((node, index) => {\n                if(node === min){\n                    this._rootList.splice(index, 1);\n                }\n                return;\n            })\n\n        }\n\n        this.consolidate();\n\n        return min;\n    }\n\n    //Good\n    link = (node1, node2) => {\n        this._rootList.forEach((node, index) => {\n            if(node2 === node){\n                node1.setParent(null);\n                node1.setLeft(null);\n                node1.setRight(null);\n                \n                if(node1.getChild() === null){\n                    node1.setChild([]);\n                }\n\n                node1.getChild().push(node2);\n                \n                if(node1.getChild().length > 1){\n                    const child1 = node1.getChild()[node1.getChild().length-2];\n                    const child2 = node1.getChild()[node1.getChild().length-1];\n\n                    if(child1.point.x === 49 && child1.point.y === 14){\n                        console.log(child1);\n                    }\n                    if(child2.point.x === 49 && child2.point.y === 14){\n                        console.log(child1);\n                    }\n\n                    child2.setRight(child1.getRight());\n                    child1.getRight().setLeft(child2);\n                    child1.setRight(child2);\n                    child2.setLeft(child1);\n                    child2.setParent(child1.getParent());\n\n                    child2.setIsMarked(false);\n                }else{\n                    const child1 = node1.getChild()[node1.getChild().length-1];\n\n                    child1.setRight(child1);\n                    child1.setLeft(child1);\n                    child1.setParent(node1);\n\n                    child1.setIsMarked(false);\n                }\n\n                node1.incrementDegree();\n            }\n\n            return null;\n        });\n\n        return node1;\n    }\n\n    //Good\n    consolidate = () => {\n        const arr = new Array(parseInt(this._rootList.length / Math.log(2)));\n        \n        this._rootList.forEach((node, index) => {\n            let node1 = node;\n            let degree = node1.getDegree();\n\n            //degree is being used as an index\n            while(arr[degree]){\n                let node2 = arr[degree];\n\n                if(node1.getVal() > node2.getVal()){\n                    const tmpNode = node1;\n\n                    node1 = node2;\n                    node2 = tmpNode;\n                }\n\n                node1 = this.link(node1, node2);\n\n                arr[degree] = undefined;\n\n                degree += 1;\n            }\n            \n            arr[degree] = node1;\n        })\n\n        this._rootList = [];\n\n        arr.forEach((node, index) => {\n            if(node){\n                this.insert(node);\n\n                if(this._min === null || arr[index].getVal() < this._min.getVal()){\n                    this._min = arr[index];\n                }\n            }\n        })\n    }\n\n    //To be seen\n    union = (h) => {   \n        this._min = h.peek();\n\n        const hStartIndex = this._rootList.length;\n        const hEndIndex = h.length-1;\n\n        this._rootList = this._rootList.concat(h);\n\n        if(hStartIndex !== 0){\n            const node1 = this._rootList[hStartIndex-1];\n            const node2 = this._rootList[hStartIndex];\n            const node3 = this._rootList[hEndIndex];\n\n            node3.setRight(node1.getRight())\n            node1.getRight().setLeft(node3)\n            node1.setRight(node2);\n            node2.setLeft(node1);\n        }\n\n        if((this._min === null || h.peek()) && h.peek() < this._min){\n            this._min = h.peek();\n        }\n\n        //clear h object\n    }\n\n    //Good\n    decreaseKey = (node, val) => {\n        if(val > node.getVal()){\n            throw new Error(\"Replacement key is greater than the original key\");\n        }\n\n        node.setVal(val);\n\n        const parent = node.getParent();\n\n        if(parent !== null && node.getVal() < parent.getVal()){\n            this.cut(node, parent);\n            this.cascadingCut(parent);\n        }\n    }\n    \n    //Good\n    cut = (child, parent) => {\n        parent.getChild().forEach((node, index) => {\n            if(node === child){\n                node.getLeft().setRight(node.getRight());\n                node.getRight().setLeft(node.getLeft());\n\n                parent.getChild().splice(index, 1);   \n\n                if(parent.getChild().length === 0){\n                    parent.setChild(null);\n                }\n\n                node.setParent(null);\n                node.setLeft(null);\n                node.setRight(null);\n                node.setIsMarked(false);\n\n                this.insert(node);\n\n                //Understand better why the degree is being decremented here\n                parent.decrementDegree();\n            }\n            return;\n        })\n    }\n\n    //Good\n    cascadingCut = (parent) => {\n        const grandParent = parent.getParent();\n\n        if(grandParent !== null){\n            if(parent.isMarked() === false){\n                parent.setIsMarked(true);\n            }else{\n                this.cut(parent, grandParent);\n                this.cascadingCut(grandParent);\n            }\n        }\n    }\n}\n\nexport default FibonacciHeap;\n\n"]},"metadata":{},"sourceType":"module"}