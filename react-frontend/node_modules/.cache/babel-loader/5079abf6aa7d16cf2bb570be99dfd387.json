{"ast":null,"code":"import MinHeap from './MinHeap';\n\nfunction heuristic(point, endPoint) {\n  console.log(); //TODO make this a switch for the different types of heuristic functions\n\n  const distance = Math.sqrt(Math.pow(point.x - endPoint.x, 2) + Math.pow(point.x - endPoint.y, 2));\n}\n\nfunction AStar(rows, cols, gridMap) {\n  let startPoint = null;\n  let wallPoints = [];\n  let endPoints = [];\n  let openSet = null;\n  let cameFrom = {};\n  let gScore = {};\n  let fScore = {};\n  gridMap.map(square => {\n    if (square.val && square.type === \"start\") {\n      // console.log(square);\n      startPoint = square;\n      return null;\n    }\n\n    if (square.val && square.type === \"wall\") {\n      // console.log(square);\n      wallPoints.push(square);\n      return null;\n    }\n\n    if (square.val && square.type === \"end\") {\n      // console.log(square);\n      endPoints.push(square);\n      return null;\n    }\n\n    return null;\n  });\n\n  if (!startPoint || !endPoints) {\n    console.log(\"Map must have a start point, and an end point\");\n    return \"Map must have a start point, and an end point\";\n  }\n\n  gScore[\"start\"] = 0;\n  const endPointDistances = new Array(endPoints.length);\n  endPoints.map((endPoint, i) => {\n    console.log(startPoint, endPoint);\n    endPointDistances[i] = heuristic(startPoint, endPoint);\n    return;\n  }); // console.log(openSet.getHeap());\n\n  console.log(endPointDistances);\n}\n\nexport default AStar;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Algorithms/AStar.js"],"names":["MinHeap","heuristic","point","endPoint","console","log","distance","Math","sqrt","pow","x","y","AStar","rows","cols","gridMap","startPoint","wallPoints","endPoints","openSet","cameFrom","gScore","fScore","map","square","val","type","push","endPointDistances","Array","length","i"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,WAApB;;AAEA,SAASC,SAAT,CAAmBC,KAAnB,EAA0BC,QAA1B,EAAmC;AAC/BC,EAAAA,OAAO,CAACC,GAAR,GAD+B,CAE/B;;AACA,QAAMC,QAAQ,GAAGC,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,GAAL,CAAUP,KAAK,CAACQ,CAAN,GAAQP,QAAQ,CAACO,CAA3B,EAA+B,CAA/B,IAAoCH,IAAI,CAACE,GAAL,CAAUP,KAAK,CAACQ,CAAN,GAAQP,QAAQ,CAACQ,CAA3B,EAA+B,CAA/B,CAA9C,CAAjB;AACH;;AAED,SAASC,KAAT,CAAeC,IAAf,EAAqBC,IAArB,EAA2BC,OAA3B,EAAmC;AAC/B,MAAIC,UAAU,GAAG,IAAjB;AACA,MAAIC,UAAU,GAAG,EAAjB;AACA,MAAIC,SAAS,GAAG,EAAhB;AAEA,MAAIC,OAAO,GAAG,IAAd;AACA,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,MAAM,GAAG,EAAb;AAEAP,EAAAA,OAAO,CAACQ,GAAR,CAAaC,MAAD,IAAY;AACpB,QAAGA,MAAM,CAACC,GAAP,IAAcD,MAAM,CAACE,IAAP,KAAiB,OAAlC,EAA0C;AACtC;AACAV,MAAAA,UAAU,GAAGQ,MAAb;AAEA,aAAO,IAAP;AACH;;AAED,QAAGA,MAAM,CAACC,GAAP,IAAcD,MAAM,CAACE,IAAP,KAAgB,MAAjC,EAAwC;AACpC;AACAT,MAAAA,UAAU,CAACU,IAAX,CAAgBH,MAAhB;AAEA,aAAO,IAAP;AACH;;AAED,QAAGA,MAAM,CAACC,GAAP,IAAcD,MAAM,CAACE,IAAP,KAAgB,KAAjC,EAAuC;AACnC;AACAR,MAAAA,SAAS,CAACS,IAAV,CAAeH,MAAf;AAEA,aAAO,IAAP;AACH;;AAED,WAAO,IAAP;AACH,GAvBD;;AAyBA,MAAG,CAACR,UAAD,IAAe,CAACE,SAAnB,EAA6B;AACzBd,IAAAA,OAAO,CAACC,GAAR,CAAY,+CAAZ;AACA,WAAO,+CAAP;AACH;;AAEDgB,EAAAA,MAAM,CAAC,OAAD,CAAN,GAAkB,CAAlB;AAEA,QAAMO,iBAAiB,GAAG,IAAIC,KAAJ,CAAUX,SAAS,CAACY,MAApB,CAA1B;AAEAZ,EAAAA,SAAS,CAACK,GAAV,CAAc,CAACpB,QAAD,EAAW4B,CAAX,KAAiB;AAC3B3B,IAAAA,OAAO,CAACC,GAAR,CAAYW,UAAZ,EAAwBb,QAAxB;AACCyB,IAAAA,iBAAiB,CAACG,CAAD,CAAjB,GAAuB9B,SAAS,CAACe,UAAD,EAAab,QAAb,CAAhC;AAEA;AACJ,GALD,EA5C+B,CAmD/B;;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYuB,iBAAZ;AACH;;AAED,eAAehB,KAAf","sourcesContent":["import MinHeap from './MinHeap';\n\nfunction heuristic(point, endPoint){\n    console.log()\n    //TODO make this a switch for the different types of heuristic functions\n    const distance = Math.sqrt(Math.pow((point.x-endPoint.x), 2) + Math.pow((point.x-endPoint.y), 2));  \n}\n\nfunction AStar(rows, cols, gridMap){\n    let startPoint = null;\n    let wallPoints = [];\n    let endPoints = [];\n\n    let openSet = null;\n    let cameFrom = {};\n    let gScore = {};\n    let fScore = {};\n\n    gridMap.map((square) => {\n        if(square.val && square.type ===  \"start\"){\n            // console.log(square);\n            startPoint = square;\n\n            return null;\n        }\n\n        if(square.val && square.type === \"wall\"){\n            // console.log(square);\n            wallPoints.push(square);\n\n            return null;\n        }\n\n        if(square.val && square.type === \"end\"){\n            // console.log(square);\n            endPoints.push(square);\n\n            return null;\n        }\n\n        return null;\n    })\n\n    if(!startPoint || !endPoints){\n        console.log(\"Map must have a start point, and an end point\");\n        return \"Map must have a start point, and an end point\"; \n    }\n\n    gScore[\"start\"] = 0;\n\n    const endPointDistances = new Array(endPoints.length);\n\n    endPoints.map((endPoint, i) => {\n        console.log(startPoint, endPoint)\n         endPointDistances[i] = heuristic(startPoint, endPoint);\n\n         return;\n    })\n    \n    // console.log(openSet.getHeap());\n\n    console.log(endPointDistances);\n}\n\nexport default AStar"]},"metadata":{},"sourceType":"module"}