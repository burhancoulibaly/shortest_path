{"ast":null,"code":"import MinHeap from './MinHeap';\n\nfunction getIndex(x, y, cols) {\n  return x + y * cols;\n}\n\nfunction heuristic(startPoint, endstartPoint) {\n  //TODO make this a switch for the different types of heuristic functions\n  const distance = Math.sqrt(Math.pow(startPoint.x - endstartPoint.x, 2) + Math.pow(startPoint.y - endPoint.y, 2));\n  return [endPoint, distance];\n}\n\nfunction dist(startPoint, endstartPoint) {\n  //TODO make this a switch for the different types of heuristic functions\n  const distance = Math.sqrt(Math.pow(startPoint.x - endstartPoint.x, 2) + Math.pow(startPoint.y - endPoint.y, 2));\n  return distance;\n}\n\nfunction getPoints(gridMap) {\n  let startPoint = null;\n  let wallPoints = [];\n  let endPoints = [];\n  gridMap.map(square => {\n    if (square.val && square.type === \"start\") {\n      // console.log(square);\n      startPoint = square;\n      return null;\n    }\n\n    if (square.val && square.type === \"wall\") {\n      // console.log(square);\n      wallPoints.push(square);\n      return null;\n    }\n\n    if (square.val && square.type === \"end\") {\n      // console.log(square);\n      endPoints.push(square);\n      return null;\n    }\n\n    return null;\n  });\n  return [startPoint, wallPoints, endPoints];\n}\n\nfunction getNeighbors(point, gridMap, cols) {\n  //Point                                 Index\n  // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n  // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n  // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n  // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n  // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n  // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n  // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n  // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n  const left = getIndex(point.x - 1, point.y, cols);\n  const right = getIndex(point.x + 1, point.y, cols);\n  const up = getIndex(point.x, point.y - 1, cols);\n  const down = getIndex(point.x, point.y + 1, cols);\n  const topLeft = getIndex(point.x - 1, point.y - 1, cols);\n  const topRight = getIndex(point.x + 1, point.y - 1, cols);\n  const bottomLeft = getIndex(point.x - 1, point.y + 1, cols);\n  const bottomRight = getIndex(point.x + 1, point.y + 1, cols);\n  const neighbors = new Array(8); //Grid was setup so whenever a point has a type it has a value otherwise it's null\n\n  if (gridMap[left] && gridMap[left].type !== \"wall\") {\n    neighbors[0] = gridMap[left];\n  }\n\n  if (gridMap[right] && gridMap[right].type !== \"wall\") {\n    neighbors[1] = gridMap[right];\n  }\n\n  if (gridMap[up] && gridMap[up].type !== \"wall\") {\n    neighbors[2] = gridMap[up];\n  }\n\n  if (gridMap[down] && gridMap[down].type !== \"wall\") {\n    neighbors[3] = gridMap[down];\n  }\n\n  if (gridMap[topLeft] && gridMap[topLeft].type !== \"wall\") {\n    neighbors[4] = gridMap[topLeft];\n  }\n\n  if (gridMap[topRight] && gridMap[topRight].type !== \"wall\") {\n    neighbors[5] = gridMap[topRight];\n  }\n\n  if (gridMap[bottomLeft] && gridMap[bottomLeft].type !== \"wall\") {\n    neighbors[6] = gridMap[bottomLeft];\n  }\n\n  if (gridMap[bottomRight] && gridMap[bottomRight].type !== \"wall\") {\n    neighbors[7] = gridMap[bottomRight];\n  }\n\n  return neighbors;\n}\n\nfunction AStar(rows, cols, gridMap) {\n  const [startPoint, wallPoints, endPoints] = getPoints(gridMap);\n  let points = {};\n  let openSet = new MinHeap();\n  let cameFrom = {};\n  let gScore = {};\n  let fScore = {};\n  let goal = null;\n\n  if (!startPoint || !endPoints) {\n    console.log(\"Map must have a start point, and an end point\");\n    return \"Map must have a start point, and an end point\";\n  }\n\n  gScore[getIndex(startPoint.x, startPoint.y, cols)] = 0;\n  const endPointDistances = new Array(endPoints.length);\n  endPoints.map((endPoint, i) => {\n    const score = heuristic(startPoint, endPoint);\n    endPointDistances[i] = [score[0], gScore[getIndex(startPoint.x, startPoint.y, cols)] + score[1]];\n    return null;\n  });\n  console.log(endPointDistances);\n  endPointDistances.sort((a, b) => {\n    if (a[1] > b[1]) {\n      return 1;\n    }\n\n    if (a[1] < b[1]) {\n      return -1;\n    }\n\n    return 0;\n  });\n  goal = endPointDistances[0][0];\n  fScore[getIndex(startPoint.x, startPoint.y, cols)] = endPointDistances[0][1];\n  points[fScore[getIndex(startPoint.x, startPoint.y, cols)]] = startPoint;\n  openSet.insert(fScore[getIndex(startPoint.x, startPoint.y, cols)]);\n\n  while (openSet.getHeap().length !== 0) {\n    const current = points[openSet.peek()];\n    console.log(current);\n\n    if (current.x === goal.x && current.y === goal.y) {\n      console.log(\"GOOOAAAAALLLLLLL\");\n      return;\n    }\n\n    const neighbors = getNeighbors(current, gridMap, cols);\n    console.log(neighbors);\n    openSet.extract();\n    neighbors.map(neighbor => {\n      currentPathGScore = gScore[getIndex(startPoint.x, startPoint.y, cols)] + dist(current, neighbor);\n\n      if (gScore[neighbor] && currentPathGScore < gScore[neighbor]) {}\n    });\n  }\n\n  return;\n}\n\nexport default AStar;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Algorithms/AStar.js"],"names":["MinHeap","getIndex","x","y","cols","heuristic","startPoint","endstartPoint","distance","Math","sqrt","pow","endPoint","dist","getPoints","gridMap","wallPoints","endPoints","map","square","val","type","push","getNeighbors","point","left","right","up","down","topLeft","topRight","bottomLeft","bottomRight","neighbors","Array","AStar","rows","points","openSet","cameFrom","gScore","fScore","goal","console","log","endPointDistances","length","i","score","sort","a","b","insert","getHeap","current","peek","extract","neighbor","currentPathGScore"],"mappings":"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","sourcesContent":["import MinHeap from './MinHeap';\n\nfunction getIndex(x, y, cols){\n    return x + (y * cols);\n}\n\nfunction heuristic(startPoint, endstartPoint){\n    //TODO make this a switch for the different types of heuristic functions\n    const distance = Math.sqrt(Math.pow((startPoint.x-endstartPoint.x), 2) + Math.pow((startPoint.y-endPoint.y), 2));  \n\n    return [endPoint, distance];\n} \n\nfunction dist(startPoint, endstartPoint){\n    //TODO make this a switch for the different types of heuristic functions\n    const distance = Math.sqrt(Math.pow((startPoint.x-endstartPoint.x), 2) + Math.pow((startPoint.y-endPoint.y), 2));  \n\n    return distance;\n} \n\nfunction getPoints(gridMap){\n    let startPoint = null;\n    let wallPoints = [];\n    let endPoints = [];\n\n    gridMap.map((square) => {\n        if(square.val && square.type ===  \"start\"){\n            // console.log(square);\n            startPoint = square;\n\n            return null;\n        }\n\n        if(square.val && square.type === \"wall\"){\n            // console.log(square);\n            wallPoints.push(square);\n\n            return null;\n        }\n\n        if(square.val && square.type === \"end\"){\n            // console.log(square);\n            endPoints.push(square);\n\n            return null;\n        }\n\n        return null;\n    })\n\n    return [startPoint, wallPoints, endPoints];\n}\n\nfunction getNeighbors(point, gridMap, cols){\n    //Point                                 Index\n    // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n    // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n    // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n    // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n    // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n    // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n    // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n    // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n\n    const left        = getIndex((point.x-1), (point.y), cols);\n    const right       = getIndex((point.x+1), (point.y), cols);\n    const up          = getIndex((point.x), (point.y-1), cols);\n    const down        = getIndex((point.x), (point.y+1), cols);\n    const topLeft     = getIndex((point.x-1), (point.y-1), cols);\n    const topRight    = getIndex((point.x+1), (point.y-1), cols);\n    const bottomLeft  = getIndex((point.x-1), (point.y+1), cols);\n    const bottomRight = getIndex((point.x+1), (point.y+1), cols);\n    \n    const neighbors = new Array(8);\n\n    //Grid was setup so whenever a point has a type it has a value otherwise it's null\n    if(gridMap[left] && gridMap[left].type !== \"wall\"){\n        neighbors[0] = gridMap[left];\n    }\n    if(gridMap[right] && gridMap[right].type !== \"wall\"){\n        neighbors[1] = gridMap[right];\n    }\n    if(gridMap[up] && gridMap[up].type !== \"wall\"){\n        neighbors[2] = gridMap[up];\n    }\n    if(gridMap[down] && gridMap[down].type !== \"wall\"){\n        neighbors[3] = gridMap[down];\n    }\n    if(gridMap[topLeft] && gridMap[topLeft].type !== \"wall\"){\n        neighbors[4] = gridMap[topLeft];\n    }\n    if(gridMap[topRight] && gridMap[topRight].type !== \"wall\"){\n        neighbors[5] = gridMap[topRight];\n    }\n    if(gridMap[bottomLeft] && gridMap[bottomLeft].type !== \"wall\"){\n        neighbors[6] = gridMap[bottomLeft];\n    }\n    if(gridMap[bottomRight] && gridMap[bottomRight].type !== \"wall\"){\n        neighbors[7] = gridMap[bottomRight];\n    }\n\n    return neighbors;\n}\n\nfunction AStar(rows, cols, gridMap){\n    const [startPoint, wallPoints, endPoints] = getPoints(gridMap);\n\n    let points = {};\n    let openSet = new MinHeap();\n    let cameFrom = {};\n    let gScore = {};\n    let fScore = {};\n    let goal = null;\n    \n\n    if(!startPoint || !endPoints){\n        console.log(\"Map must have a start point, and an end point\");\n        return \"Map must have a start point, and an end point\"; \n    }\n\n    gScore[getIndex(startPoint.x, startPoint.y, cols)] = 0;\n\n    const endPointDistances = new Array(endPoints.length);\n\n    endPoints.map((endPoint, i) => {\n        const score = heuristic(startPoint, endPoint); \n\n        endPointDistances[i] = [score[0], gScore[getIndex(startPoint.x, startPoint.y, cols)] + score[1]];\n\n        return null;\n    })\n\n    console.log(endPointDistances);\n    \n    endPointDistances.sort((a, b) => {\n        if(a[1] > b[1]){\n            return 1\n        }\n        if(a[1] < b[1]){\n            return -1\n        }\n\n        return 0;\n    });\n\n    goal = endPointDistances[0][0];\n\n    fScore[getIndex(startPoint.x, startPoint.y, cols)] = endPointDistances[0][1];\n\n    points[fScore[getIndex(startPoint.x, startPoint.y, cols)]] = startPoint;\n    openSet.insert(fScore[getIndex(startPoint.x, startPoint.y, cols)]);\n\n    while(openSet.getHeap().length !== 0){\n        const current = points[openSet.peek()];\n\n        console.log(current);\n\n        if(current.x === goal.x && current.y === goal.y){\n            console.log(\"GOOOAAAAALLLLLLL\")\n            return;\n        }\n\n        const neighbors = getNeighbors(current, gridMap, cols);\n\n        console.log(neighbors)\n        openSet.extract();\n\n        neighbors.map((neighbor) => {\n            currentPathGScore = gScore[getIndex(startPoint.x, startPoint.y, cols)] + dist(current, neighbor);\n\n            if(gScore[neighbor] && currentPathGScore < gScore[neighbor]){\n                \n            }\n        });\n    }\n\n    return;\n}\n\nexport default AStar"]},"metadata":{},"sourceType":"module"}