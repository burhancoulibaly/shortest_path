{"ast":null,"code":"import FibonacciHeapNode from '../Algorithms/FibonacciHeapNode';\nimport FibonacciHeap from '../Algorithms/FibonacciHeap';\n\nfunction getIndex(x, y, cols) {\n  return x + y * cols;\n}\n\nfunction dist(startPoint, endPoint) {\n  //TODO make this a switch for the different types of heuristic functions\n  const distance = Math.sqrt(Math.pow(endPoint.point.x - startPoint.point.x, 2) + Math.pow(endPoint.point.y - startPoint.point.y, 2));\n  return distance;\n}\n\nfunction getPoints(gridMap) {\n  let startPoint = null;\n  let endPoints = [];\n  gridMap.map(square => {\n    if (square.val && square.type === \"start\") {\n      // console.log(square);\n      startPoint = square;\n      return null;\n    }\n\n    if (square.val && square.type === \"end\") {\n      // console.log(square);\n      endPoints.push(square);\n      return null;\n    }\n\n    return null;\n  });\n  return [startPoint, endPoints];\n}\n\nfunction getNeighbors(current, gridMap, rows, cols, gScore, points) {\n  console.log(\"hello\"); //Point                                 Index\n  // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n  // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n  // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n  // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n  // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n  // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n  // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n  // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n\n  const neighbors = new Array(8);\n\n  if (current.point.x > 0) {\n    const left = getIndex(current.point.x - 1, current.point.y, cols);\n\n    if (gridMap[left].type !== \"wall\" && gridMap[left].type !== \"start\") {\n      neighbors[0] = points[gScore[left]][points[gScore[left]].length - 1];\n      console.log(points[gScore[left]][points[gScore[left]].length - 1]);\n      console.log(\"pop\", gScore[left]);\n      points[gScore[left]].pop();\n    }\n  }\n\n  if (current.point.x < cols - 1) {\n    const right = getIndex(current.point.x + 1, current.point.y, cols);\n\n    if (gridMap[right].type !== \"wall\" && gridMap[right].type !== \"start\") {\n      neighbors[1] = points[gScore[right]][points[gScore[right]].length - 1];\n      console.log(\"pop\", gScore[right]);\n      points[gScore[right]].pop();\n    }\n  }\n\n  if (current.point.y > 0) {\n    const up = getIndex(current.point.x, current.point.y - 1, cols);\n\n    if (gridMap[up].type !== \"wall\" && gridMap[up].type !== \"start\") {\n      neighbors[2] = points[gScore[up]][points[gScore[up]].length - 1];\n      console.log(\"pop\", gScore[up]);\n      points[gScore[up]].pop();\n    }\n  }\n\n  if (current.point.y < rows - 1) {\n    const down = getIndex(current.point.x, current.point.y + 1, cols);\n\n    if (gridMap[down].type !== \"wall\" && gridMap[down].type !== \"start\") {\n      neighbors[3] = points[gScore[down]][points[gScore[down]].length - 1];\n      console.log(\"pop\", gScore[down]);\n      points[gScore[down]].pop();\n    }\n  }\n\n  if (current.point.x > 0 && current.point.y > 0) {\n    const topLeft = getIndex(current.point.x - 1, current.point.y - 1, cols);\n\n    if (gridMap[topLeft].type !== \"wall\" && gridMap[topLeft].type !== \"start\") {\n      neighbors[4] = points[gScore[topLeft]][points[gScore[topLeft]].length - 1];\n      console.log(\"pop\", gScore[topLeft]);\n      points[gScore[topLeft]].pop();\n    }\n  }\n\n  if (current.point.x < cols - 1 && current.point.y > 0) {\n    const topRight = getIndex(current.point.x + 1, current.point.y - 1, cols);\n\n    if (gridMap[topRight].type !== \"wall\" && gridMap[topRight].type !== \"start\") {\n      neighbors[5] = points[gScore[topRight]][points[gScore[topRight]].length - 1];\n      console.log(\"pop\", gScore[topRight]);\n      points[gScore[topRight]].pop();\n    }\n  }\n\n  if (current.point.x > 0 && current.point.y < rows - 1) {\n    const bottomLeft = getIndex(current.point.x - 1, current.point.y + 1, cols);\n\n    if (gridMap[bottomLeft].type !== \"wall\" && gridMap[bottomLeft].type !== \"start\") {\n      neighbors[6] = points[gScore[bottomLeft]][points[gScore[bottomLeft]].length - 1];\n      console.log(\"pop\", gScore[bottomLeft]);\n      points[gScore[bottomLeft]].pop();\n    }\n  }\n\n  if (current.point.x < cols - 1 && current.point.y < rows - 1) {\n    const bottomRight = getIndex(current.point.x + 1, current.point.y + 1, cols);\n\n    if (gridMap[bottomRight].type !== \"wall\" && gridMap[bottomRight].type !== \"start\") {\n      neighbors[7] = points[gScore[bottomRight]][points[gScore[bottomRight]].length - 1];\n      console.log(\"pop\", gScore[bottomRight]);\n      points[gScore[bottomRight]].pop();\n    }\n  }\n\n  return neighbors;\n}\n\nfunction Dijkstra(rows, cols, gridMap, memState, setState) {\n  const [startPoint, endPoints] = getPoints(gridMap);\n  const queue = new FibonacciHeap();\n  const points = {};\n  const cameFrom = {};\n  const node = {};\n  const states = []; //TODO: Bug, clears grid but then returns it to its previous state\n\n  const newState = { ...memState,\n    grid: new Array(rows * cols).fill({\n      val: false,\n      type: null\n    }).map((square, i) => {\n      return { ...square,\n        x: i % cols,\n        y: Math.abs((i - i % cols) / cols)\n      };\n    })\n  };\n  states.push(newState);\n  let goal = endPoints[0];\n\n  if (!startPoint || !endPoints) {\n    console.log(\"Map must have a start point, and an end point\");\n    return \"Map must have a start point, and an end point\";\n  }\n\n  gridMap.map((square, index) => {\n    if (getIndex(startPoint.x, startPoint.y, cols) !== index) {\n      node[index] = {\n        dist: 0,\n        node: null\n      };\n      cameFrom[index] = null;\n    }\n\n    if (getIndex(startPoint.x, startPoint.y, cols) !== index) {\n      node[index] = {\n        dist: Number.POSITIVE_INFINITY,\n        node: null\n      };\n      cameFrom[index] = null;\n    }\n\n    const currNode = new FibonacciHeapNode(node[index].dist, square);\n    node[index].node = currNode;\n    queue.insert(currNode);\n    return null;\n  });\n\n  while (queue.getRootList().length > 0) {\n    console.log(\"new min\", queue.peek());\n    console.log(points);\n    const current = queue.peek().getPoint();\n    console.log(current);\n    queue.extractMin(); // points[gScore[getIndex(current.point.x, current.point.y, cols)]].pop();\n    // console.log(Array.from(queue.getRootList()))\n    // const newState = {\n    //     ...memState,\n    //     grid: memState.grid.map((square, index) => {\n    //         if(current.point.x === square.x && current.point.y === square.y){\n    //             if(current.point.type !== \"start\" && current.point.type !== \"end\"){\n    //                 memState.grid[index] = {\n    //                     ...memState.grid[index],\n    //                     val: true,\n    //                     type: \"neighbors\"\n    //                 }\n    //             }\n    //             return {...square}\n    //         }\n    //         return {...square}\n    //     })\n    // }\n    // states.push(newState);\n    // if(current.point.x === goal.x && current.point.y === goal.y){\n    //     const state = states[states.length-1];\n    //     setState({\n    //         // return {\n    //         ...state,\n    //         //state object is immutable so updates have to be done this way\n    //         grid: state.grid.map((square, index) => {\n    //             if(cameFrom[index]){\n    //                 if(square.type === \"end\"){\n    //                     let prev = cameFrom[index];\n    //                     while(prev){                   \n    //                         if(prev.type !== \"start\" && prev.type !== \"end\"){\n    //                             state.grid[getIndex(prev.x,prev.y,state.cols)] = {\n    //                                 ...state.grid[getIndex(prev.x,prev.y,state.cols)],\n    //                                 val: true,\n    //                                 type: \"path\"\n    //                             }\n    //                         }\n    //                         prev = cameFrom[getIndex(prev.x,prev.y,state.cols)];\n    //                     }\n    //                     return {...square};\n    //                 }\n    //                 return {...square};\n    //             }\n    //             return {...square};\n    //         })\n    //     });\n    //     console.log(\"PATH FOUND!!!!!\");\n    //     return states;\n    // }\n    // const neighbors = getNeighbors(current, gridMap, rows, cols, gScore, points);\n    // console.log(neighbors)\n    // neighbors.map((neighbor) => {\n    //     console.log(neighbor);\n    //     console.log(points);\n    //     const currentPathGScore = gScore[getIndex(current.point.x, current.point.y, cols)] + dist(current, neighbor);\n    //     if(currentPathGScore < gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)]){\n    //         gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)] = currentPathGScore;\n    //         cameFrom[getIndex(neighbor.point.x, neighbor.point.y, cols)] = current;\n    //         if(points[gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)]] == null){\n    //             points[gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)]] = [];\n    //         }\n    //         points[gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)]].push({point: neighbor.point, node: neighbor.node});\n    //         //TODO: figure out how to do this in constant time\n    //         queue.decreaseKey(neighbor.node, gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)]);\n    //         // console.log(gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)]);\n    //         // console.log(Array.from(points[gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)]]))\n    //         return null;\n    //     }\n    //     console.log(\"gscore arr\",points[gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)]].length === 0)\n    //     if(points[gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)]].length === 0){\n    //         points[gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)]].push({point: neighbor.point, node: neighbor.node});\n    //     } \n    //     return null;\n    // })\n  }\n}\n\nexport default Dijkstra;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Algorithms/Dijkstra.js"],"names":["FibonacciHeapNode","FibonacciHeap","getIndex","x","y","cols","dist","startPoint","endPoint","distance","Math","sqrt","pow","point","getPoints","gridMap","endPoints","map","square","val","type","push","getNeighbors","current","rows","gScore","points","console","log","neighbors","Array","left","length","pop","right","up","down","topLeft","topRight","bottomLeft","bottomRight","Dijkstra","memState","setState","queue","cameFrom","node","states","newState","grid","fill","i","abs","goal","index","Number","POSITIVE_INFINITY","currNode","insert","getRootList","peek","getPoint","extractMin"],"mappings":"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","sourcesContent":["import FibonacciHeapNode from '../Algorithms/FibonacciHeapNode';\nimport FibonacciHeap from '../Algorithms/FibonacciHeap';\n\nfunction getIndex(x, y, cols){\n    return (x + (y * cols));\n}\n\nfunction dist(startPoint, endPoint){\n    //TODO make this a switch for the different types of heuristic functions\n    const distance = Math.sqrt(Math.pow((endPoint.point.x-startPoint.point.x), 2) + Math.pow((endPoint.point.y-startPoint.point.y), 2));     \n    return distance;\n}\n\nfunction getPoints(gridMap){\n    let startPoint = null;\n    let endPoints = [];\n    \n    gridMap.map((square) => {\n        if(square.val && square.type ===  \"start\"){\n            // console.log(square);\n            startPoint = square;\n\n            return null;\n        }\n\n        if(square.val && square.type === \"end\"){\n            // console.log(square);\n            endPoints.push(square);\n\n            return null;\n        }\n\n        return null;\n    })\n\n    return [startPoint, endPoints];\n}\n\nfunction getNeighbors(current, gridMap, rows, cols, gScore, points){\n    console.log(\"hello\");\n    //Point                                 Index\n    // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n    // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n    // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n    // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n    // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n    // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n    // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n    // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n\n    const neighbors = new Array(8);\n    \n    if(current.point.x > 0){\n        const left = getIndex((current.point.x-1), (current.point.y), cols);\n\n        if(gridMap[left].type !== \"wall\" && gridMap[left].type !== \"start\"){\n            neighbors[0] = points[gScore[left]][points[gScore[left]].length-1];\n            console.log(points[gScore[left]][points[gScore[left]].length-1]);\n            console.log(\"pop\", gScore[left]);\n            points[gScore[left]].pop();\n        }\n    }\n    if(current.point.x < cols-1){\n        const right = getIndex((current.point.x+1), (current.point.y), cols);\n\n        if(gridMap[right].type !== \"wall\" && gridMap[right].type !== \"start\"){\n            neighbors[1] = points[gScore[right]][points[gScore[right]].length-1];\n            console.log(\"pop\", gScore[right]);\n            points[gScore[right]].pop();\n        }\n    }\n    if(current.point.y > 0){\n        const up = getIndex((current.point.x), (current.point.y-1), cols);\n\n        if(gridMap[up].type !== \"wall\" && gridMap[up].type !== \"start\"){\n            neighbors[2] = points[gScore[up]][points[gScore[up]].length-1];\n            console.log(\"pop\", gScore[up]);\n            points[gScore[up]].pop();\n        }\n    }\n    if(current.point.y < rows-1){\n        const down = getIndex((current.point.x), (current.point.y+1), cols);\n\n        if(gridMap[down].type !== \"wall\" && gridMap[down].type !== \"start\"){\n            neighbors[3] = points[gScore[down]][points[gScore[down]].length-1];\n            console.log(\"pop\", gScore[down]);\n            points[gScore[down]].pop();\n        }\n    }\n    if(current.point.x > 0 && current.point.y > 0){\n        const topLeft = getIndex((current.point.x-1), (current.point.y-1), cols);\n\n        if(gridMap[topLeft].type !== \"wall\" && gridMap[topLeft].type !== \"start\"){\n            neighbors[4] = points[gScore[topLeft]][points[gScore[topLeft]].length-1];\n            console.log(\"pop\", gScore[topLeft]);\n            points[gScore[topLeft]].pop();\n        }\n    }\n    if(current.point.x < cols-1 && current.point.y > 0){\n        const topRight = getIndex((current.point.x+1), (current.point.y-1), cols);\n\n        if(gridMap[topRight].type !== \"wall\" && gridMap[topRight].type !== \"start\"){\n            neighbors[5] = points[gScore[topRight]][points[gScore[topRight]].length-1];\n            console.log(\"pop\", gScore[topRight]);\n            points[gScore[topRight]].pop();\n        }\n    }\n    if(current.point.x > 0 && current.point.y < rows-1){\n        const bottomLeft  = getIndex((current.point.x-1), (current.point.y+1), cols);\n\n        if(gridMap[bottomLeft].type !== \"wall\" && gridMap[bottomLeft].type !== \"start\"){\n            neighbors[6] = points[gScore[bottomLeft]][points[gScore[bottomLeft]].length-1];\n            console.log(\"pop\", gScore[bottomLeft]);\n            points[gScore[bottomLeft]].pop();\n        }\n    }\n    if(current.point.x < cols-1 && current.point.y < rows-1){\n        const bottomRight = getIndex((current.point.x+1), (current.point.y+1), cols);\n\n        if(gridMap[bottomRight].type !== \"wall\" && gridMap[bottomRight].type !== \"start\"){\n            neighbors[7] = points[gScore[bottomRight]][points[gScore[bottomRight]].length-1];\n            console.log(\"pop\", gScore[bottomRight]);\n            points[gScore[bottomRight]].pop();\n        }\n    }\n\n    return neighbors;\n}\n\nfunction Dijkstra(rows, cols, gridMap, memState, setState){\n    const [startPoint, endPoints] = getPoints(gridMap);\n    const queue = new FibonacciHeap();\n    const points = {};\n    const cameFrom = {};\n    const node = {};\n    const states = [];\n\n    //TODO: Bug, clears grid but then returns it to its previous state\n    const newState = {\n        ...memState,\n        grid: new Array(rows*cols).fill({val: false, type: null}).map((square, i) => {\n            return {\n                ...square,\n                x: i % cols,\n                y: Math.abs((i - (i % cols)) / cols)\n            }\n        })\n    }\n    states.push(newState);\n\n    let goal = endPoints[0];\n\n    if(!startPoint || !endPoints){\n        console.log(\"Map must have a start point, and an end point\");\n        return \"Map must have a start point, and an end point\"; \n    }\n\n    gridMap.map((square, index) => {\n        if(getIndex(startPoint.x, startPoint.y, cols) !== index){\n            node[index] = {dist: 0, node: null};\n            cameFrom[index] = null\n        }\n\n        if(getIndex(startPoint.x, startPoint.y, cols) !== index){\n            node[index] = {dist: Number.POSITIVE_INFINITY, node: null};\n            cameFrom[index] = null\n        }\n\n        const currNode = new FibonacciHeapNode(node[index].dist, square);\n        node[index].node = currNode;\n        queue.insert(currNode);\n\n        return null;\n    });\n\n    while(queue.getRootList().length > 0){\n        console.log(\"new min\",queue.peek());\n        console.log(points)\n        const current = queue.peek().getPoint();\n        console.log(current);\n\n        queue.extractMin();\n        // points[gScore[getIndex(current.point.x, current.point.y, cols)]].pop();\n\n        // console.log(Array.from(queue.getRootList()))\n\n        // const newState = {\n        //     ...memState,\n        //     grid: memState.grid.map((square, index) => {\n        //         if(current.point.x === square.x && current.point.y === square.y){\n        //             if(current.point.type !== \"start\" && current.point.type !== \"end\"){\n        //                 memState.grid[index] = {\n        //                     ...memState.grid[index],\n        //                     val: true,\n        //                     type: \"neighbors\"\n        //                 }\n        //             }\n        //             return {...square}\n        //         }\n        //         return {...square}\n        //     })\n        // }\n        // states.push(newState);\n\n        // if(current.point.x === goal.x && current.point.y === goal.y){\n        //     const state = states[states.length-1];\n        //     setState({\n        //         // return {\n        //         ...state,\n        //         //state object is immutable so updates have to be done this way\n        //         grid: state.grid.map((square, index) => {\n        //             if(cameFrom[index]){\n        //                 if(square.type === \"end\"){\n        //                     let prev = cameFrom[index];\n                \n        //                     while(prev){                   \n        //                         if(prev.type !== \"start\" && prev.type !== \"end\"){\n        //                             state.grid[getIndex(prev.x,prev.y,state.cols)] = {\n        //                                 ...state.grid[getIndex(prev.x,prev.y,state.cols)],\n        //                                 val: true,\n        //                                 type: \"path\"\n        //                             }\n        //                         }\n        //                         prev = cameFrom[getIndex(prev.x,prev.y,state.cols)];\n        //                     }\n        //                     return {...square};\n        //                 }\n        //                 return {...square};\n        //             }\n        //             return {...square};\n        //         })\n            \n        //     });\n\n        //     console.log(\"PATH FOUND!!!!!\");\n        //     return states;\n        // }\n\n        // const neighbors = getNeighbors(current, gridMap, rows, cols, gScore, points);\n        // console.log(neighbors)\n        // neighbors.map((neighbor) => {\n        //     console.log(neighbor);\n        //     console.log(points);\n\n        //     const currentPathGScore = gScore[getIndex(current.point.x, current.point.y, cols)] + dist(current, neighbor);\n\n        //     if(currentPathGScore < gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)]){\n\n        //         gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)] = currentPathGScore;\n                \n        //         cameFrom[getIndex(neighbor.point.x, neighbor.point.y, cols)] = current;\n\n        //         if(points[gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)]] == null){\n        //             points[gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)]] = [];\n        //         }\n                \n        //         points[gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)]].push({point: neighbor.point, node: neighbor.node});\n\n        //         //TODO: figure out how to do this in constant time\n        //         queue.decreaseKey(neighbor.node, gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)]);\n                \n        //         // console.log(gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)]);\n        //         // console.log(Array.from(points[gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)]]))\n\n        //         return null;\n        //     }\n\n        //     console.log(\"gscore arr\",points[gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)]].length === 0)\n        //     if(points[gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)]].length === 0){\n        //         points[gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)]].push({point: neighbor.point, node: neighbor.node});\n        //     } \n\n        //     return null;\n        // })\n    }\n}\n\nexport default Dijkstra;"]},"metadata":{},"sourceType":"module"}