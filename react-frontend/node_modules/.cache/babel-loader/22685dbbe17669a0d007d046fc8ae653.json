{"ast":null,"code":"import MinHeap from './MinHeap';\n\nfunction heuristic(point, endPoint) {\n  //TODO make this a switch for the different types of heuristic functions\n  const distance = Math.sqrt(Math.pow(point.x - endPoint.x, 2) + Math.pow(point.y - endPoint.y, 2));\n  return [endPoint, distance];\n}\n\nfunction getPoints(gridMap) {\n  let startPoint = null;\n  let wallPoints = [];\n  let endPoints = [];\n  gridMap.map(square => {\n    if (square.val && square.type === \"start\") {\n      // console.log(square);\n      startPoint = square;\n      return null;\n    }\n\n    if (square.val && square.type === \"wall\") {\n      // console.log(square);\n      wallPoints.push(square);\n      return null;\n    }\n\n    if (square.val && square.type === \"end\") {\n      // console.log(square);\n      endPoints.push(square);\n      return null;\n    }\n\n    return null;\n  });\n  return [startPoint, wallPoints, endPoints];\n}\n\nfunction AStar(rows, cols, gridMap) {\n  const [startPoint, wallPoints, endPoints] = getPoints(gridMap);\n  let points = {};\n  let openSet = new MinHeap();\n  let cameFrom = {};\n  let gScore = {};\n  let fScore = {};\n  let goal = null;\n\n  if (!startPoint || !endPoints) {\n    console.log(\"Map must have a start point, and an end point\");\n    return \"Map must have a start point, and an end point\";\n  }\n\n  gScore[startPoint.x + startPoint.y * cols] = 0;\n  const endPointDistances = new Array(endPoints.length);\n  endPoints.map((endPoint, i) => {\n    const heuristicCost = heuristic(startPoint, endPoint);\n    endPointDistances[i] = [heuristicCost[0], gScore[startPoint.x + startPoint.y * cols] + heuristicCost[1]];\n    return null;\n  });\n  console.log(endPointDistances);\n  endPointDistances.sort((a, b) => {\n    if (a[1] > b[1]) {\n      return 1;\n    }\n\n    if (a[1] < b[1]) {\n      return -1;\n    }\n\n    return 0;\n  });\n  goal = endPointDistances[0][0];\n  fScore[startPoint.x + startPoint.y * cols] = endPointDistances[0][1];\n  points[fScore[startPoint.x + startPoint.y * cols]] = startPoint;\n  openSet.insert(fScore);\n\n  while (openSet.length !== 0) {\n    const current = points[openSet.peek()];\n\n    if (current.x == goal.x && current.y == goal.y) {\n      return;\n    }\n  }\n}\n\nexport default AStar;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Algorithms/AStar.js"],"names":["MinHeap","heuristic","point","endPoint","distance","Math","sqrt","pow","x","y","getPoints","gridMap","startPoint","wallPoints","endPoints","map","square","val","type","push","AStar","rows","cols","points","openSet","cameFrom","gScore","fScore","goal","console","log","endPointDistances","Array","length","i","heuristicCost","sort","a","b","insert","current","peek"],"mappings":"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","sourcesContent":["import MinHeap from './MinHeap';\n\nfunction heuristic(point, endPoint){\n    //TODO make this a switch for the different types of heuristic functions\n    const distance = Math.sqrt(Math.pow((point.x-endPoint.x), 2) + Math.pow((point.y-endPoint.y), 2));  \n\n    return [endPoint, distance];\n} \n\nfunction getPoints(gridMap){\n    let startPoint = null;\n    let wallPoints = [];\n    let endPoints = [];\n\n    gridMap.map((square) => {\n        if(square.val && square.type ===  \"start\"){\n            // console.log(square);\n            startPoint = square;\n\n            return null;\n        }\n\n        if(square.val && square.type === \"wall\"){\n            // console.log(square);\n            wallPoints.push(square);\n\n            return null;\n        }\n\n        if(square.val && square.type === \"end\"){\n            // console.log(square);\n            endPoints.push(square);\n\n            return null;\n        }\n\n        return null;\n    })\n\n    return [startPoint, wallPoints, endPoints];\n} \n\nfunction AStar(rows, cols, gridMap){\n    const [startPoint, wallPoints, endPoints] = getPoints(gridMap);\n\n    let points = {};\n    let openSet = new MinHeap();\n    let cameFrom = {};\n    let gScore = {};\n    let fScore = {};\n    let goal = null;\n    \n\n    if(!startPoint || !endPoints){\n        console.log(\"Map must have a start point, and an end point\");\n        return \"Map must have a start point, and an end point\"; \n    }\n\n    gScore[startPoint.x + (startPoint.y * cols)] = 0;\n\n    const endPointDistances = new Array(endPoints.length);\n\n    endPoints.map((endPoint, i) => {\n        const heuristicCost = heuristic(startPoint, endPoint); \n\n        endPointDistances[i] = [heuristicCost[0], gScore[startPoint.x + (startPoint.y * cols)] + heuristicCost[1]];\n\n        return null;\n    })\n\n    console.log(endPointDistances);\n    \n    endPointDistances.sort((a, b) => {\n        if(a[1] > b[1]){\n            return 1\n        }\n        if(a[1] < b[1]){\n            return -1\n        }\n\n        return 0;\n    });\n\n    goal = endPointDistances[0][0];\n\n    fScore[startPoint.x + (startPoint.y * cols)] = endPointDistances[0][1];\n\n    points[fScore[startPoint.x + (startPoint.y * cols)]] = startPoint;\n    openSet.insert(fScore);\n\n    while(openSet.length !== 0){\n        const current = points[openSet.peek()];\n\n        if(current.x == goal.x && current.y == goal.y){\n            return;\n        }\n    }\n}\n\nexport default AStar"]},"metadata":{},"sourceType":"module"}