{"ast":null,"code":"import FibonacciHeapNode from '../Algorithms/FibonacciHeapNode';\nimport FibonacciHeap from '../Algorithms/FibonacciHeap';\n\nfunction getIndex(x, y, cols) {\n  return x + y * cols;\n}\n\nfunction dist(startPoint, endPoint) {\n  //TODO make this a switch for the different types of heuristic functions\n  const distance = Math.sqrt(Math.pow(endPoint.getPoint().x - startPoint.getPoint().x, 2) + Math.pow(endPoint.getPoint().y - startPoint.getPoint().y, 2));\n  return distance;\n}\n\nfunction getPoints(gridMap) {\n  let startPoint = null;\n  let endPoints = [];\n  gridMap.map(square => {\n    if (square.val && square.type === \"start\") {\n      // console.log(square);\n      startPoint = square;\n      return null;\n    }\n\n    if (square.val && square.type === \"end\") {\n      // console.log(square);\n      endPoints.push(square);\n      return null;\n    }\n\n    return null;\n  });\n  return [startPoint, endPoints];\n}\n\nfunction getNeighbors(current, rows, cols, node) {\n  //Point                                 Index\n  // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n  // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n  // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n  // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n  // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n  // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n  // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n  // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n  const neighbors = new Array(8);\n\n  if (current.getPoint().x > 0) {\n    const left = getIndex(current.getPoint().x - 1, current.getPoint().y, cols);\n    neighbors[0] = node[left].node;\n  }\n\n  if (current.getPoint().x < cols - 1) {\n    const right = getIndex(current.getPoint().x + 1, current.getPoint().y, cols);\n    neighbors[1] = node[right].node;\n  }\n\n  if (current.getPoint().y > 0) {\n    const up = getIndex(current.getPoint().x, current.getPoint().y - 1, cols);\n    neighbors[2] = node[up].node;\n  }\n\n  if (current.getPoint().y < rows - 1) {\n    const down = getIndex(current.getPoint().x, current.getPoint().y + 1, cols);\n    neighbors[3] = node[down].node;\n  }\n\n  if (current.getPoint().x > 0 && current.getPoint().y > 0) {\n    const topLeft = getIndex(current.getPoint().x - 1, current.getPoint().y - 1, cols);\n    neighbors[4] = node[topLeft].node;\n  }\n\n  if (current.getPoint().x < cols - 1 && current.getPoint().y > 0) {\n    const topRight = getIndex(current.getPoint().x + 1, current.getPoint().y - 1, cols);\n    neighbors[5] = node[topRight].node;\n  }\n\n  if (current.getPoint().x > 0 && current.getPoint().y < rows - 1) {\n    const bottomLeft = getIndex(current.getPoint().x - 1, current.getPoint().y + 1, cols);\n    neighbors[6] = node[bottomLeft].node;\n  }\n\n  if (current.getPoint().x < cols - 1 && current.getPoint().y < rows - 1) {\n    const bottomRight = getIndex(current.getPoint().x + 1, current.getPoint().y + 1, cols);\n    neighbors[7] = node[bottomRight].node;\n  }\n\n  return neighbors;\n}\n\nfunction Dijkstra(rows, cols, gridMap, memState, setState) {\n  const [startPoint, endPoints] = getPoints(gridMap);\n  const queue = new FibonacciHeap();\n  const cameFrom = {};\n  const node = {};\n  const states = []; //TODO: Bug, clears grid but then returns it to its previous state\n\n  const newState = { ...memState,\n    grid: new Array(rows * cols).fill({\n      val: false,\n      type: null\n    }).map((square, i) => {\n      return { ...square,\n        x: i % cols,\n        y: Math.abs((i - i % cols) / cols)\n      };\n    })\n  };\n  states.push(newState);\n  let goal = endPoints[0];\n\n  if (!startPoint || !endPoints) {\n    console.log(\"Map must have a start point, and an end point\");\n    return \"Map must have a start point, and an end point\";\n  }\n\n  gridMap.map((square, index) => {\n    if (getIndex(startPoint.x, startPoint.y, cols) === index) {\n      node[index] = {\n        dist: 0,\n        node: null\n      };\n      cameFrom[index] = null;\n    }\n\n    if (getIndex(startPoint.x, startPoint.y, cols) !== index) {\n      node[index] = {\n        dist: Number.POSITIVE_INFINITY,\n        node: null\n      };\n      cameFrom[index] = null;\n    }\n\n    const currNode = new FibonacciHeapNode(node[index].dist, square);\n    node[index].node = currNode;\n    queue.insert(currNode);\n    return null;\n  });\n  console.log(Array.from(queue.getRootList()));\n  let count = 0;\n\n  while (queue.getRootList().length > 0) {\n    console.log(\"new min\", queue.peek());\n    const current = queue.peek();\n    queue.extractMin();\n    console.log(Array.from(queue.getRootList()));\n\n    if (count === 3) {\n      break;\n    }\n\n    count++; //     // console.log(Array.from(queue.getRootList()))\n    //     const newState = {\n    //         ...memState,\n    //         grid: memState.grid.map((square, index) => {\n    //             if(current.getPoint().x === square.x && current.getPoint().y === square.y){\n    //                 if(current.getPoint().type !== \"start\" && current.getPoint().type !== \"end\"){\n    //                     memState.grid[index] = {\n    //                         ...memState.grid[index],\n    //                         val: true,\n    //                         type: \"neighbors\"\n    //                     }\n    //                 }\n    //                 return {...square}\n    //             }\n    //             return {...square}\n    //         })\n    //     }\n    //     states.push(newState);\n    //     if(current.getPoint().x === goal.x && current.getPoint().y === goal.y){\n    //         const state = states[states.length-1];\n    //         setState({\n    //             // return {\n    //             ...state,\n    //             //state object is immutable so updates have to be done this way\n    //             grid: state.grid.map((square, index) => {\n    //                 if(cameFrom[index]){\n    //                     if(square.type === \"end\"){\n    //                         let prev = cameFrom[index];\n    //                         while(prev){                   \n    //                             if(prev.type !== \"start\" && prev.type !== \"end\"){\n    //                                 state.grid[getIndex(prev.x,prev.y,state.cols)] = {\n    //                                     ...state.grid[getIndex(prev.x,prev.y,state.cols)],\n    //                                     val: true,\n    //                                     type: \"path\"\n    //                                 }\n    //                             }\n    //                             prev = cameFrom[getIndex(prev.x,prev.y,state.cols)];\n    //                         }\n    //                         return {...square};\n    //                     }\n    //                     return {...square};\n    //                 }\n    //                 return {...square};\n    //             })\n    //         });\n    //         console.log(\"PATH FOUND!!!!!\");\n    //         return states;\n    //     }\n\n    const neighbors = getNeighbors(current, rows, cols, node); // console.log(neighbors)\n\n    neighbors.map(neighbor => {\n      // console.log(neighbor);\n      const currentDist = node[getIndex(current.getPoint().x, current.getPoint().y, cols)].dist + dist(current, neighbor);\n\n      if (currentDist < node[getIndex(neighbor.getPoint().x, neighbor.getPoint().y, cols)].dist) {\n        node[getIndex(neighbor.getPoint().x, neighbor.getPoint().y, cols)].dist = currentDist;\n        cameFrom[getIndex(neighbor.getPoint().x, neighbor.getPoint().y, cols)] = current;\n        console.log(\"before\", Object.assign({}, neighbor));\n        queue.decreaseKey(neighbor, node[getIndex(neighbor.getPoint().x, neighbor.getPoint().y, cols)].dist);\n        console.log(\"after\", Object.assign({}, neighbor));\n        console.log(Array.from(queue.getRootList()));\n        return null;\n      }\n\n      return null;\n    }); // if(count === 13){\n    //     break;\n    // }\n    // count++;\n  }\n}\n\nexport default Dijkstra;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Algorithms/Dijkstra.js"],"names":["FibonacciHeapNode","FibonacciHeap","getIndex","x","y","cols","dist","startPoint","endPoint","distance","Math","sqrt","pow","getPoint","getPoints","gridMap","endPoints","map","square","val","type","push","getNeighbors","current","rows","node","neighbors","Array","left","right","up","down","topLeft","topRight","bottomLeft","bottomRight","Dijkstra","memState","setState","queue","cameFrom","states","newState","grid","fill","i","abs","goal","console","log","index","Number","POSITIVE_INFINITY","currNode","insert","from","getRootList","count","length","peek","extractMin","neighbor","currentDist","Object","assign","decreaseKey"],"mappings":"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","sourcesContent":["import FibonacciHeapNode from '../Algorithms/FibonacciHeapNode';\nimport FibonacciHeap from '../Algorithms/FibonacciHeap';\n\nfunction getIndex(x, y, cols){\n    return (x + (y * cols));\n}\n\nfunction dist(startPoint, endPoint){\n    //TODO make this a switch for the different types of heuristic functions\n    const distance = Math.sqrt(Math.pow((endPoint.getPoint().x-startPoint.getPoint().x), 2) + Math.pow((endPoint.getPoint().y-startPoint.getPoint().y), 2));     \n    return distance;\n}\n\nfunction getPoints(gridMap){\n    let startPoint = null;\n    let endPoints = [];\n    \n    gridMap.map((square) => {\n        if(square.val && square.type ===  \"start\"){\n            // console.log(square);\n            startPoint = square;\n\n            return null;\n        }\n\n        if(square.val && square.type === \"end\"){\n            // console.log(square);\n            endPoints.push(square);\n\n            return null;\n        }\n\n        return null;\n    })\n\n    return [startPoint, endPoints];\n}\n\nfunction getNeighbors(current, rows, cols, node){\n    //Point                                 Index\n    // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n    // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n    // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n    // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n    // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n    // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n    // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n    // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n\n    const neighbors = new Array(8);\n    \n    if(current.getPoint().x > 0){\n        const left = getIndex((current.getPoint().x-1), (current.getPoint().y), cols);\n\n        neighbors[0] = node[left].node;\n    }\n    if(current.getPoint().x < cols-1){\n        const right = getIndex((current.getPoint().x+1), (current.getPoint().y), cols);\n\n        neighbors[1] = node[right].node;\n    }\n    if(current.getPoint().y > 0){\n        const up = getIndex((current.getPoint().x), (current.getPoint().y-1), cols);\n\n        neighbors[2] = node[up].node;\n    }\n    if(current.getPoint().y < rows-1){\n        const down = getIndex((current.getPoint().x), (current.getPoint().y+1), cols);\n\n        neighbors[3] = node[down].node;\n    }\n    if(current.getPoint().x > 0 && current.getPoint().y > 0){\n        const topLeft = getIndex((current.getPoint().x-1), (current.getPoint().y-1), cols);\n\n        neighbors[4] = node[topLeft].node;\n    }\n    if(current.getPoint().x < cols-1 && current.getPoint().y > 0){\n        const topRight = getIndex((current.getPoint().x+1), (current.getPoint().y-1), cols);\n\n        neighbors[5] = node[topRight].node;\n    }\n    if(current.getPoint().x > 0 && current.getPoint().y < rows-1){\n        const bottomLeft  = getIndex((current.getPoint().x-1), (current.getPoint().y+1), cols);\n\n        neighbors[6] = node[bottomLeft].node;\n    }\n    if(current.getPoint().x < cols-1 && current.getPoint().y < rows-1){\n        const bottomRight = getIndex((current.getPoint().x+1), (current.getPoint().y+1), cols);\n\n        neighbors[7] = node[bottomRight].node;\n    }\n\n    return neighbors;\n}\n\nfunction Dijkstra(rows, cols, gridMap, memState, setState){\n    const [startPoint, endPoints] = getPoints(gridMap);\n    const queue = new FibonacciHeap();\n    const cameFrom = {};\n    const node = {};\n    const states = [];\n\n    //TODO: Bug, clears grid but then returns it to its previous state\n    const newState = {\n        ...memState,\n        grid: new Array(rows*cols).fill({val: false, type: null}).map((square, i) => {\n            return {\n                ...square,\n                x: i % cols,\n                y: Math.abs((i - (i % cols)) / cols)\n            }\n        })\n    }\n    states.push(newState);\n\n    let goal = endPoints[0];\n\n    if(!startPoint || !endPoints){\n        console.log(\"Map must have a start point, and an end point\");\n        return \"Map must have a start point, and an end point\"; \n    }\n\n    gridMap.map((square, index) => {\n        if(getIndex(startPoint.x, startPoint.y, cols) === index){\n            node[index] = {dist: 0, node: null};\n            cameFrom[index] = null\n        }\n\n        if(getIndex(startPoint.x, startPoint.y, cols) !== index){\n            node[index] = {dist: Number.POSITIVE_INFINITY, node: null};\n            cameFrom[index] = null\n        }\n\n        const currNode = new FibonacciHeapNode(node[index].dist, square);\n        node[index].node = currNode;\n        queue.insert(currNode);\n\n        return null;\n    });\n    console.log(Array.from(queue.getRootList()));\n    let count = 0;\n    while(queue.getRootList().length > 0){\n        console.log(\"new min\",queue.peek());\n        const current = queue.peek();\n\n        \n\n        queue.extractMin();\n        console.log(Array.from(queue.getRootList()));\n        if(count ===3){\n            break;\n        }\n        count++;\n        \n\n    //     // console.log(Array.from(queue.getRootList()))\n\n    //     const newState = {\n    //         ...memState,\n    //         grid: memState.grid.map((square, index) => {\n    //             if(current.getPoint().x === square.x && current.getPoint().y === square.y){\n    //                 if(current.getPoint().type !== \"start\" && current.getPoint().type !== \"end\"){\n    //                     memState.grid[index] = {\n    //                         ...memState.grid[index],\n    //                         val: true,\n    //                         type: \"neighbors\"\n    //                     }\n    //                 }\n    //                 return {...square}\n    //             }\n    //             return {...square}\n    //         })\n    //     }\n    //     states.push(newState);\n\n    //     if(current.getPoint().x === goal.x && current.getPoint().y === goal.y){\n    //         const state = states[states.length-1];\n    //         setState({\n    //             // return {\n    //             ...state,\n    //             //state object is immutable so updates have to be done this way\n    //             grid: state.grid.map((square, index) => {\n    //                 if(cameFrom[index]){\n    //                     if(square.type === \"end\"){\n    //                         let prev = cameFrom[index];\n                \n    //                         while(prev){                   \n    //                             if(prev.type !== \"start\" && prev.type !== \"end\"){\n    //                                 state.grid[getIndex(prev.x,prev.y,state.cols)] = {\n    //                                     ...state.grid[getIndex(prev.x,prev.y,state.cols)],\n    //                                     val: true,\n    //                                     type: \"path\"\n    //                                 }\n    //                             }\n    //                             prev = cameFrom[getIndex(prev.x,prev.y,state.cols)];\n    //                         }\n    //                         return {...square};\n    //                     }\n    //                     return {...square};\n    //                 }\n    //                 return {...square};\n    //             })\n            \n    //         });\n\n    //         console.log(\"PATH FOUND!!!!!\");\n    //         return states;\n    //     }\n\n        const neighbors = getNeighbors(current, rows, cols, node);\n        // console.log(neighbors)\n        neighbors.map((neighbor) => {\n            // console.log(neighbor);\n\n            const currentDist = node[getIndex(current.getPoint().x, current.getPoint().y, cols)].dist + dist(current, neighbor);\n\n            if(currentDist < node[getIndex(neighbor.getPoint().x, neighbor.getPoint().y, cols)].dist){\n\n                node[getIndex(neighbor.getPoint().x, neighbor.getPoint().y, cols)].dist = currentDist;\n                \n                cameFrom[getIndex(neighbor.getPoint().x, neighbor.getPoint().y, cols)] = current;\n                console.log(\"before\",Object.assign({}, neighbor));\n                queue.decreaseKey(neighbor, node[getIndex(neighbor.getPoint().x, neighbor.getPoint().y, cols)].dist);\n\n                console.log(\"after\",Object.assign({}, neighbor));\n                console.log(Array.from(queue.getRootList()));\n\n                return null;\n            } \n\n            return null;\n        })\n\n        // if(count === 13){\n        //     break;\n        // }\n\n        // count++;\n    }\n}\n\nexport default Dijkstra;"]},"metadata":{},"sourceType":"module"}