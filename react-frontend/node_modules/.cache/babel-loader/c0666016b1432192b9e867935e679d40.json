{"ast":null,"code":"import { ApolloClient, createHttpLink, InMemoryCache } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nconst httpLink = createHttpLink({\n  uri: 'http://localhost:3000/graphql'\n});\nconst authLink = setContext((_, {\n  headers\n}) => {\n  // get the authentication token from local storage if it exists\n  const accessToken = localStorage.getItem('accessToken');\n  console.log(accessToken); // return the headers to the context so httpLink can read them\n\n  return {\n    headers: { ...headers,\n      authorization: accessToken ? `Bearer ${accessToken}` : \"\"\n    }\n  };\n});\nexport default new ApolloClient({\n  // link: authLink.concat(httpLink),\n  uri: 'http://localhost:3000/graphql',\n  cache: new InMemoryCache({\n    addTypename: false\n  }),\n  credentials: 'include'\n});","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/ApolloConfig.js"],"names":["ApolloClient","createHttpLink","InMemoryCache","setContext","httpLink","uri","authLink","_","headers","accessToken","localStorage","getItem","console","log","authorization","cache","addTypename","credentials"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,cAAvB,EAAuCC,aAAvC,QAA4D,gBAA5D;AACA,SAASC,UAAT,QAA2B,6BAA3B;AAEA,MAAMC,QAAQ,GAAGH,cAAc,CAAC;AAAEI,EAAAA,GAAG,EAAE;AAAP,CAAD,CAA/B;AAEA,MAAMC,QAAQ,GAAGH,UAAU,CAAC,CAACI,CAAD,EAAI;AAAEC,EAAAA;AAAF,CAAJ,KAAoB;AAC9C;AACA,QAAMC,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAApB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,WAAZ,EAH8C,CAI9C;;AACA,SAAO;AACLD,IAAAA,OAAO,EAAE,EACP,GAAGA,OADI;AAEPM,MAAAA,aAAa,EAAEL,WAAW,GAAI,UAASA,WAAY,EAAzB,GAA6B;AAFhD;AADJ,GAAP;AAMD,CAX0B,CAA3B;AAaA,eAAe,IAAIT,YAAJ,CAAiB;AAC5B;AACAK,EAAAA,GAAG,EAAE,+BAFuB;AAG5BU,EAAAA,KAAK,EAAE,IAAIb,aAAJ,CAAkB;AACrBc,IAAAA,WAAW,EAAE;AADQ,GAAlB,CAHqB;AAM5BC,EAAAA,WAAW,EAAE;AANe,CAAjB,CAAf","sourcesContent":["import { ApolloClient, createHttpLink, InMemoryCache } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nconst httpLink = createHttpLink({ uri: 'http://localhost:3000/graphql' });\n\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const accessToken = localStorage.getItem('accessToken');\n  console.log(accessToken);\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: accessToken ? `Bearer ${accessToken}` : \"\",\n    }\n  }\n});\n\nexport default new ApolloClient({\n    // link: authLink.concat(httpLink),\n    uri: 'http://localhost:3000/graphql',\n    cache: new InMemoryCache({\n        addTypename: false\n    }),\n    credentials: 'include'\n});"]},"metadata":{},"sourceType":"module"}