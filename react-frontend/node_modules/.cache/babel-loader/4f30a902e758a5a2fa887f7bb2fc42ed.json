{"ast":null,"code":"import FibonacciHeapNode from '../Algorithms/FibonacciHeapNode';\nimport FibonacciHeap from '../Algorithms/FibonacciHeap';\n\nfunction getIndex(x, y, cols) {\n  return x + y * cols;\n}\n\nfunction dist(startPoint, endPoint) {\n  //TODO make this a switch for the different types of heuristic functions\n  const distance = Math.sqrt(Math.pow(endPoint.point.x - startPoint.point.x, 2) + Math.pow(endPoint.point.y - startPoint.point.y, 2));\n  return distance;\n}\n\nfunction getPoints(gridMap) {\n  let startPoint = null;\n  let endPoints = [];\n  gridMap.map(square => {\n    if (square.val && square.type === \"start\") {\n      // console.log(square);\n      startPoint = square;\n      return null;\n    }\n\n    if (square.val && square.type === \"end\") {\n      // console.log(square);\n      endPoints.push(square);\n      return null;\n    }\n\n    return null;\n  });\n  return [startPoint, endPoints];\n}\n\nfunction getNeighbors(current, gridMap, rows, cols, gScore, points) {\n  console.log(\"hello\"); //Point                                 Index\n  // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n  // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n  // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n  // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n  // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n  // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n  // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n  // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n\n  const neighbors = new Array(8);\n\n  if (current.point.x > 0) {\n    const left = getIndex(current.point.x - 1, current.point.y, cols);\n    neighbors[0] = n;\n  }\n\n  if (current.point.x < cols - 1) {\n    const right = getIndex(current.point.x + 1, current.point.y, cols);\n    neighbors[1] = points[gScore[right]][points[gScore[right]].length - 1];\n  }\n\n  if (current.point.y > 0) {\n    const up = getIndex(current.point.x, current.point.y - 1, cols);\n\n    if (gridMap[up].type !== \"wall\" && gridMap[up].type !== \"start\") {\n      neighbors[2] = points[gScore[up]][points[gScore[up]].length - 1];\n      console.log(\"pop\", gScore[up]);\n      points[gScore[up]].pop();\n    }\n  }\n\n  if (current.point.y < rows - 1) {\n    const down = getIndex(current.point.x, current.point.y + 1, cols);\n\n    if (gridMap[down].type !== \"wall\" && gridMap[down].type !== \"start\") {\n      neighbors[3] = points[gScore[down]][points[gScore[down]].length - 1];\n      console.log(\"pop\", gScore[down]);\n      points[gScore[down]].pop();\n    }\n  }\n\n  if (current.point.x > 0 && current.point.y > 0) {\n    const topLeft = getIndex(current.point.x - 1, current.point.y - 1, cols);\n\n    if (gridMap[topLeft].type !== \"wall\" && gridMap[topLeft].type !== \"start\") {\n      neighbors[4] = points[gScore[topLeft]][points[gScore[topLeft]].length - 1];\n      console.log(\"pop\", gScore[topLeft]);\n      points[gScore[topLeft]].pop();\n    }\n  }\n\n  if (current.point.x < cols - 1 && current.point.y > 0) {\n    const topRight = getIndex(current.point.x + 1, current.point.y - 1, cols);\n\n    if (gridMap[topRight].type !== \"wall\" && gridMap[topRight].type !== \"start\") {\n      neighbors[5] = points[gScore[topRight]][points[gScore[topRight]].length - 1];\n      console.log(\"pop\", gScore[topRight]);\n      points[gScore[topRight]].pop();\n    }\n  }\n\n  if (current.point.x > 0 && current.point.y < rows - 1) {\n    const bottomLeft = getIndex(current.point.x - 1, current.point.y + 1, cols);\n\n    if (gridMap[bottomLeft].type !== \"wall\" && gridMap[bottomLeft].type !== \"start\") {\n      neighbors[6] = points[gScore[bottomLeft]][points[gScore[bottomLeft]].length - 1];\n      console.log(\"pop\", gScore[bottomLeft]);\n      points[gScore[bottomLeft]].pop();\n    }\n  }\n\n  if (current.point.x < cols - 1 && current.point.y < rows - 1) {\n    const bottomRight = getIndex(current.point.x + 1, current.point.y + 1, cols);\n\n    if (gridMap[bottomRight].type !== \"wall\" && gridMap[bottomRight].type !== \"start\") {\n      neighbors[7] = points[gScore[bottomRight]][points[gScore[bottomRight]].length - 1];\n      console.log(\"pop\", gScore[bottomRight]);\n      points[gScore[bottomRight]].pop();\n    }\n  }\n\n  return neighbors;\n}\n\nfunction Dijkstra(rows, cols, gridMap, memState, setState) {\n  const [startPoint, endPoints] = getPoints(gridMap);\n  const queue = new FibonacciHeap();\n  const cameFrom = {};\n  const node = {};\n  const states = []; //TODO: Bug, clears grid but then returns it to its previous state\n\n  const newState = { ...memState,\n    grid: new Array(rows * cols).fill({\n      val: false,\n      type: null\n    }).map((square, i) => {\n      return { ...square,\n        x: i % cols,\n        y: Math.abs((i - i % cols) / cols)\n      };\n    })\n  };\n  states.push(newState);\n  let goal = endPoints[0];\n\n  if (!startPoint || !endPoints) {\n    console.log(\"Map must have a start point, and an end point\");\n    return \"Map must have a start point, and an end point\";\n  }\n\n  gridMap.map((square, index) => {\n    if (getIndex(startPoint.x, startPoint.y, cols) === index) {\n      node[index] = {\n        dist: 0,\n        node: null\n      };\n      cameFrom[index] = null;\n    }\n\n    if (getIndex(startPoint.x, startPoint.y, cols) !== index) {\n      node[index] = {\n        dist: Number.POSITIVE_INFINITY,\n        node: null\n      };\n      cameFrom[index] = null;\n    }\n\n    const currNode = new FibonacciHeapNode(node[index].dist, square);\n    node[index].node = currNode;\n    queue.insert(currNode);\n    return null;\n  });\n\n  while (queue.getRootList().length > 0) {\n    console.log(\"new min\", queue.peek());\n    const current = queue.peek();\n    console.log(current);\n    queue.extractMin(); // console.log(Array.from(queue.getRootList()))\n\n    const newState = { ...memState,\n      grid: memState.grid.map((square, index) => {\n        if (current.point.x === square.x && current.point.y === square.y) {\n          if (current.point.type !== \"start\" && current.point.type !== \"end\") {\n            memState.grid[index] = { ...memState.grid[index],\n              val: true,\n              type: \"neighbors\"\n            };\n          }\n\n          return { ...square\n          };\n        }\n\n        return { ...square\n        };\n      })\n    };\n    states.push(newState);\n\n    if (current.point.x === goal.x && current.point.y === goal.y) {\n      const state = states[states.length - 1];\n      setState({ // return {\n        ...state,\n        //state object is immutable so updates have to be done this way\n        grid: state.grid.map((square, index) => {\n          if (cameFrom[index]) {\n            if (square.type === \"end\") {\n              let prev = cameFrom[index];\n\n              while (prev) {\n                if (prev.type !== \"start\" && prev.type !== \"end\") {\n                  state.grid[getIndex(prev.x, prev.y, state.cols)] = { ...state.grid[getIndex(prev.x, prev.y, state.cols)],\n                    val: true,\n                    type: \"path\"\n                  };\n                }\n\n                prev = cameFrom[getIndex(prev.x, prev.y, state.cols)];\n              }\n\n              return { ...square\n              };\n            }\n\n            return { ...square\n            };\n          }\n\n          return { ...square\n          };\n        })\n      });\n      console.log(\"PATH FOUND!!!!!\");\n      return states;\n    }\n\n    const neighbors = getNeighbors(current, gridMap, rows, cols, node);\n    console.log(neighbors); // neighbors.map((neighbor) => {\n    //     console.log(neighbor);\n    //     console.log(points);\n    //     const currentPathGScore = gScore[getIndex(current.point.x, current.point.y, cols)] + dist(current, neighbor);\n    //     if(currentPathGScore < gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)]){\n    //         gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)] = currentPathGScore;\n    //         cameFrom[getIndex(neighbor.point.x, neighbor.point.y, cols)] = current;\n    //         if(points[gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)]] == null){\n    //             points[gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)]] = [];\n    //         }\n    //         points[gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)]].push({point: neighbor.point, node: neighbor.node});\n    //         //TODO: figure out how to do this in constant time\n    //         queue.decreaseKey(neighbor.node, gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)]);\n    //         // console.log(gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)]);\n    //         // console.log(Array.from(points[gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)]]))\n    //         return null;\n    //     }\n    //     console.log(\"gscore arr\",points[gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)]].length === 0)\n    //     if(points[gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)]].length === 0){\n    //         points[gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)]].push({point: neighbor.point, node: neighbor.node});\n    //     } \n    //     return null;\n    // })\n  }\n}\n\nexport default Dijkstra;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Algorithms/Dijkstra.js"],"names":["FibonacciHeapNode","FibonacciHeap","getIndex","x","y","cols","dist","startPoint","endPoint","distance","Math","sqrt","pow","point","getPoints","gridMap","endPoints","map","square","val","type","push","getNeighbors","current","rows","gScore","points","console","log","neighbors","Array","left","n","right","length","up","pop","down","topLeft","topRight","bottomLeft","bottomRight","Dijkstra","memState","setState","queue","cameFrom","node","states","newState","grid","fill","i","abs","goal","index","Number","POSITIVE_INFINITY","currNode","insert","getRootList","peek","extractMin","state","prev"],"mappings":"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","sourcesContent":["import FibonacciHeapNode from '../Algorithms/FibonacciHeapNode';\nimport FibonacciHeap from '../Algorithms/FibonacciHeap';\n\nfunction getIndex(x, y, cols){\n    return (x + (y * cols));\n}\n\nfunction dist(startPoint, endPoint){\n    //TODO make this a switch for the different types of heuristic functions\n    const distance = Math.sqrt(Math.pow((endPoint.point.x-startPoint.point.x), 2) + Math.pow((endPoint.point.y-startPoint.point.y), 2));     \n    return distance;\n}\n\nfunction getPoints(gridMap){\n    let startPoint = null;\n    let endPoints = [];\n    \n    gridMap.map((square) => {\n        if(square.val && square.type ===  \"start\"){\n            // console.log(square);\n            startPoint = square;\n\n            return null;\n        }\n\n        if(square.val && square.type === \"end\"){\n            // console.log(square);\n            endPoints.push(square);\n\n            return null;\n        }\n\n        return null;\n    })\n\n    return [startPoint, endPoints];\n}\n\nfunction getNeighbors(current, gridMap, rows, cols, gScore, points){\n    console.log(\"hello\");\n    //Point                                 Index\n    // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n    // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n    // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n    // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n    // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n    // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n    // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n    // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n\n    const neighbors = new Array(8);\n    \n    if(current.point.x > 0){\n        const left = getIndex((current.point.x-1), (current.point.y), cols);\n\n        neighbors[0] = n;\n    }\n    if(current.point.x < cols-1){\n        const right = getIndex((current.point.x+1), (current.point.y), cols);\n\n        neighbors[1] = points[gScore[right]][points[gScore[right]].length-1];\n    }\n    if(current.point.y > 0){\n        const up = getIndex((current.point.x), (current.point.y-1), cols);\n\n        if(gridMap[up].type !== \"wall\" && gridMap[up].type !== \"start\"){\n            neighbors[2] = points[gScore[up]][points[gScore[up]].length-1];\n            console.log(\"pop\", gScore[up]);\n            points[gScore[up]].pop();\n        }\n    }\n    if(current.point.y < rows-1){\n        const down = getIndex((current.point.x), (current.point.y+1), cols);\n\n        if(gridMap[down].type !== \"wall\" && gridMap[down].type !== \"start\"){\n            neighbors[3] = points[gScore[down]][points[gScore[down]].length-1];\n            console.log(\"pop\", gScore[down]);\n            points[gScore[down]].pop();\n        }\n    }\n    if(current.point.x > 0 && current.point.y > 0){\n        const topLeft = getIndex((current.point.x-1), (current.point.y-1), cols);\n\n        if(gridMap[topLeft].type !== \"wall\" && gridMap[topLeft].type !== \"start\"){\n            neighbors[4] = points[gScore[topLeft]][points[gScore[topLeft]].length-1];\n            console.log(\"pop\", gScore[topLeft]);\n            points[gScore[topLeft]].pop();\n        }\n    }\n    if(current.point.x < cols-1 && current.point.y > 0){\n        const topRight = getIndex((current.point.x+1), (current.point.y-1), cols);\n\n        if(gridMap[topRight].type !== \"wall\" && gridMap[topRight].type !== \"start\"){\n            neighbors[5] = points[gScore[topRight]][points[gScore[topRight]].length-1];\n            console.log(\"pop\", gScore[topRight]);\n            points[gScore[topRight]].pop();\n        }\n    }\n    if(current.point.x > 0 && current.point.y < rows-1){\n        const bottomLeft  = getIndex((current.point.x-1), (current.point.y+1), cols);\n\n        if(gridMap[bottomLeft].type !== \"wall\" && gridMap[bottomLeft].type !== \"start\"){\n            neighbors[6] = points[gScore[bottomLeft]][points[gScore[bottomLeft]].length-1];\n            console.log(\"pop\", gScore[bottomLeft]);\n            points[gScore[bottomLeft]].pop();\n        }\n    }\n    if(current.point.x < cols-1 && current.point.y < rows-1){\n        const bottomRight = getIndex((current.point.x+1), (current.point.y+1), cols);\n\n        if(gridMap[bottomRight].type !== \"wall\" && gridMap[bottomRight].type !== \"start\"){\n            neighbors[7] = points[gScore[bottomRight]][points[gScore[bottomRight]].length-1];\n            console.log(\"pop\", gScore[bottomRight]);\n            points[gScore[bottomRight]].pop();\n        }\n    }\n\n    return neighbors;\n}\n\nfunction Dijkstra(rows, cols, gridMap, memState, setState){\n    const [startPoint, endPoints] = getPoints(gridMap);\n    const queue = new FibonacciHeap();\n    const cameFrom = {};\n    const node = {};\n    const states = [];\n\n    //TODO: Bug, clears grid but then returns it to its previous state\n    const newState = {\n        ...memState,\n        grid: new Array(rows*cols).fill({val: false, type: null}).map((square, i) => {\n            return {\n                ...square,\n                x: i % cols,\n                y: Math.abs((i - (i % cols)) / cols)\n            }\n        })\n    }\n    states.push(newState);\n\n    let goal = endPoints[0];\n\n    if(!startPoint || !endPoints){\n        console.log(\"Map must have a start point, and an end point\");\n        return \"Map must have a start point, and an end point\"; \n    }\n\n    gridMap.map((square, index) => {\n        if(getIndex(startPoint.x, startPoint.y, cols) === index){\n            node[index] = {dist: 0, node: null};\n            cameFrom[index] = null\n        }\n\n        if(getIndex(startPoint.x, startPoint.y, cols) !== index){\n            node[index] = {dist: Number.POSITIVE_INFINITY, node: null};\n            cameFrom[index] = null\n        }\n\n        const currNode = new FibonacciHeapNode(node[index].dist, square);\n        node[index].node = currNode;\n        queue.insert(currNode);\n\n        return null;\n    });\n\n    while(queue.getRootList().length > 0){\n        console.log(\"new min\",queue.peek());\n        const current = queue.peek();\n        console.log(current);\n\n        queue.extractMin();\n\n        // console.log(Array.from(queue.getRootList()))\n\n        const newState = {\n            ...memState,\n            grid: memState.grid.map((square, index) => {\n                if(current.point.x === square.x && current.point.y === square.y){\n                    if(current.point.type !== \"start\" && current.point.type !== \"end\"){\n                        memState.grid[index] = {\n                            ...memState.grid[index],\n                            val: true,\n                            type: \"neighbors\"\n                        }\n                    }\n                    return {...square}\n                }\n                return {...square}\n            })\n        }\n        states.push(newState);\n\n        if(current.point.x === goal.x && current.point.y === goal.y){\n            const state = states[states.length-1];\n            setState({\n                // return {\n                ...state,\n                //state object is immutable so updates have to be done this way\n                grid: state.grid.map((square, index) => {\n                    if(cameFrom[index]){\n                        if(square.type === \"end\"){\n                            let prev = cameFrom[index];\n                \n                            while(prev){                   \n                                if(prev.type !== \"start\" && prev.type !== \"end\"){\n                                    state.grid[getIndex(prev.x,prev.y,state.cols)] = {\n                                        ...state.grid[getIndex(prev.x,prev.y,state.cols)],\n                                        val: true,\n                                        type: \"path\"\n                                    }\n                                }\n                                prev = cameFrom[getIndex(prev.x,prev.y,state.cols)];\n                            }\n                            return {...square};\n                        }\n                        return {...square};\n                    }\n                    return {...square};\n                })\n            \n            });\n\n            console.log(\"PATH FOUND!!!!!\");\n            return states;\n        }\n\n        const neighbors = getNeighbors(current, gridMap, rows, cols, node);\n        console.log(neighbors)\n        // neighbors.map((neighbor) => {\n        //     console.log(neighbor);\n        //     console.log(points);\n\n        //     const currentPathGScore = gScore[getIndex(current.point.x, current.point.y, cols)] + dist(current, neighbor);\n\n        //     if(currentPathGScore < gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)]){\n\n        //         gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)] = currentPathGScore;\n                \n        //         cameFrom[getIndex(neighbor.point.x, neighbor.point.y, cols)] = current;\n\n        //         if(points[gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)]] == null){\n        //             points[gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)]] = [];\n        //         }\n                \n        //         points[gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)]].push({point: neighbor.point, node: neighbor.node});\n\n        //         //TODO: figure out how to do this in constant time\n        //         queue.decreaseKey(neighbor.node, gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)]);\n                \n        //         // console.log(gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)]);\n        //         // console.log(Array.from(points[gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)]]))\n\n        //         return null;\n        //     }\n\n        //     console.log(\"gscore arr\",points[gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)]].length === 0)\n        //     if(points[gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)]].length === 0){\n        //         points[gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)]].push({point: neighbor.point, node: neighbor.node});\n        //     } \n\n        //     return null;\n        // })\n    }\n}\n\nexport default Dijkstra;"]},"metadata":{},"sourceType":"module"}