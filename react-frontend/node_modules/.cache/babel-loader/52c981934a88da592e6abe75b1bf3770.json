{"ast":null,"code":"function AStar(rows, cols, gridMap) {\n  let startPoint = null;\n  let wallPoints = [];\n  let endPoints = [];\n  gridMap.map(square => {\n    if (square.val && square.type === \"start\") {\n      // console.log(square);\n      startPoint = square;\n      return null;\n    }\n\n    if (square.val && square.type === \"wall\") {\n      // console.log(square);\n      wallPoints.push(square);\n      return null;\n    }\n\n    if (square.val && square.type === \"end\") {\n      // console.log(square);\n      endPoints.push(square);\n      return null;\n    }\n\n    return null;\n  });\n\n  if (!startPoint || !endPoints) {\n    console.log(\"Map must have a start point, and an end point\");\n    return \"Map must have a start point, and an end point\";\n  }\n\n  console.log(startPoint, wallPoints, endPoints);\n}\n\nclass MinHeap {\n  constructor(heap = null) {\n    this.insert = () => {};\n\n    this.extract = () => {};\n\n    this.find = () => {};\n\n    this.delete = () => {};\n\n    this.swap = () => {};\n\n    this.isEmpty = () => {};\n\n    this.size = () => {};\n\n    this.minHeap = () => {};\n\n    this.heap = [];\n\n    if (arr) {\n      this.minHeap(arr);\n    }\n  }\n\n}\n\nexport default AStar;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Algorithms/AStar.js"],"names":["AStar","rows","cols","gridMap","startPoint","wallPoints","endPoints","map","square","val","type","push","console","log","MinHeap","constructor","heap","insert","extract","find","delete","swap","isEmpty","size","minHeap","arr"],"mappings":"AAAA,SAASA,KAAT,CAAeC,IAAf,EAAqBC,IAArB,EAA2BC,OAA3B,EAAmC;AAC/B,MAAIC,UAAU,GAAG,IAAjB;AACA,MAAIC,UAAU,GAAG,EAAjB;AACA,MAAIC,SAAS,GAAG,EAAhB;AAIAH,EAAAA,OAAO,CAACI,GAAR,CAAaC,MAAD,IAAY;AACpB,QAAGA,MAAM,CAACC,GAAP,IAAcD,MAAM,CAACE,IAAP,KAAiB,OAAlC,EAA0C;AACtC;AACAN,MAAAA,UAAU,GAAGI,MAAb;AAEA,aAAO,IAAP;AACH;;AAED,QAAGA,MAAM,CAACC,GAAP,IAAcD,MAAM,CAACE,IAAP,KAAgB,MAAjC,EAAwC;AACpC;AACAL,MAAAA,UAAU,CAACM,IAAX,CAAgBH,MAAhB;AAEA,aAAO,IAAP;AACH;;AAED,QAAGA,MAAM,CAACC,GAAP,IAAcD,MAAM,CAACE,IAAP,KAAgB,KAAjC,EAAuC;AACnC;AACAJ,MAAAA,SAAS,CAACK,IAAV,CAAeH,MAAf;AAEA,aAAO,IAAP;AACH;;AAED,WAAO,IAAP;AACH,GAvBD;;AAyBA,MAAG,CAACJ,UAAD,IAAe,CAACE,SAAnB,EAA6B;AACzBM,IAAAA,OAAO,CAACC,GAAR,CAAY,+CAAZ;AACA,WAAO,+CAAP;AACH;;AAEDD,EAAAA,OAAO,CAACC,GAAR,CAAYT,UAAZ,EAAwBC,UAAxB,EAAoCC,SAApC;AAGH;;AAED,MAAMQ,OAAN,CAAa;AACTC,EAAAA,WAAW,CAACC,IAAI,GAAC,IAAN,EAAW;AAAA,SAQtBC,MARsB,GAQb,MAAM,CAEd,CAVqB;;AAAA,SAYtBC,OAZsB,GAYZ,MAAM,CAEf,CAdqB;;AAAA,SAgBtBC,IAhBsB,GAgBf,MAAM,CAEZ,CAlBqB;;AAAA,SAoBtBC,MApBsB,GAoBb,MAAM,CAEd,CAtBqB;;AAAA,SAwBtBC,IAxBsB,GAwBf,MAAM,CAEZ,CA1BqB;;AAAA,SA4BtBC,OA5BsB,GA4BZ,MAAM,CAEf,CA9BqB;;AAAA,SAgCtBC,IAhCsB,GAgCf,MAAM,CAEZ,CAlCqB;;AAAA,SAoCtBC,OApCsB,GAoCZ,MAAM,CAEf,CAtCqB;;AAClB,SAAKR,IAAL,GAAY,EAAZ;;AAEA,QAAGS,GAAH,EAAO;AACH,WAAKD,OAAL,CAAaC,GAAb;AACH;AACJ;;AAPQ;;AA0Cb,eAAezB,KAAf","sourcesContent":["function AStar(rows, cols, gridMap){\n    let startPoint = null;\n    let wallPoints = [];\n    let endPoints = [];\n\n\n\n    gridMap.map((square) => {\n        if(square.val && square.type ===  \"start\"){\n            // console.log(square);\n            startPoint = square;\n\n            return null;\n        }\n\n        if(square.val && square.type === \"wall\"){\n            // console.log(square);\n            wallPoints.push(square);\n\n            return null;\n        }\n\n        if(square.val && square.type === \"end\"){\n            // console.log(square);\n            endPoints.push(square);\n\n            return null;\n        }\n\n        return null;\n    })\n\n    if(!startPoint || !endPoints){\n        console.log(\"Map must have a start point, and an end point\");\n        return \"Map must have a start point, and an end point\"; \n    }\n\n    console.log(startPoint, wallPoints, endPoints);\n\n\n}\n\nclass MinHeap{\n    constructor(heap=null){\n        this.heap = [];\n\n        if(arr){\n            this.minHeap(arr);\n        }\n    }\n\n    insert = () => {\n\n    }\n\n    extract = () => {\n        \n    }\n\n    find = () => {\n\n    }\n\n    delete = () => {\n\n    }\n\n    swap = () => {\n\n    }\n\n    isEmpty = () => {\n\n    }\n\n    size = () => {\n\n    }\n\n    minHeap = () => {\n\n    }\n}\n\nexport default AStar"]},"metadata":{},"sourceType":"module"}