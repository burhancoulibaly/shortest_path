{"ast":null,"code":"import MinHeap from './MinHeap';\n\nfunction getIndex(x, y, cols) {\n  return x + y * cols;\n}\n\nfunction heuristic(startPoint, endPoint) {\n  //TODO make this a switch for the different types of heuristic functions\n  const distance = Math.sqrt(Math.pow(startPoint.x - endPoint.x, 2) + Math.pow(startPoint.y - endPoint.y, 2));\n  return distance;\n}\n\nfunction dist(startPoint, endPoint) {\n  //TODO make this a switch for the different types of heuristic functions\n  const distance = Math.sqrt(Math.pow(startPoint.x - endPoint.x, 2) + Math.pow(startPoint.y - endPoint.y, 2));\n  return distance;\n}\n\nfunction getPoints(gridMap) {\n  let startPoint = null;\n  let wallPoints = [];\n  let endPoints = [];\n  gridMap.map(square => {\n    if (square.val && square.type === \"start\") {\n      // console.log(square);\n      startPoint = square;\n      return null;\n    }\n\n    if (square.val && square.type === \"wall\") {\n      // console.log(square);\n      wallPoints.push(square);\n      return null;\n    }\n\n    if (square.val && square.type === \"end\") {\n      // console.log(square);\n      endPoints.push(square);\n      return null;\n    }\n\n    return null;\n  });\n  return [startPoint, wallPoints, endPoints];\n}\n\nfunction getNeighbors(point, gridMap, rows, cols) {\n  //Point                                 Index\n  // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n  // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n  // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n  // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n  // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n  // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n  // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n  // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n  const neighbors = new Array(8);\n\n  if (point.x > 0) {\n    const left = getIndex(point.x - 1, point.y, cols);\n\n    if (gridMap[left].val && gridMap[left].type !== \"wall\") {\n      neighbors[0] = gridMap[left];\n    }\n  }\n\n  if (point.x < cols) {\n    const right = getIndex(point.x + 1, point.y, cols);\n\n    if (gridMap[right].val && gridMap[right].type !== \"wall\") {\n      neighbors[1] = gridMap[right];\n    }\n  }\n\n  if (point.y > 0) {\n    const up = getIndex(point.x, point.y - 1, cols);\n\n    if (gridMap[up].val && gridMap[up].type !== \"wall\" && gridMap[up].type !== \"end\" && gridMap[up].type !== \"start\") {\n      neighbors[2] = gridMap[up];\n    }\n  }\n\n  if (point.y < rows) {\n    const down = getIndex(point.x, point.y + 1, cols);\n\n    if (gridMap[down].val && gridMap[down].type !== \"wall\" && gridMap[down].type !== \"end\" && gridMap[down].type !== \"start\") {\n      neighbors[3] = gridMap[down];\n    }\n  }\n\n  if (point.x > 0 && point.y > 0) {\n    const topLeft = getIndex(point.x - 1, point.y - 1, cols);\n\n    if (gridMap[topLeft].val && gridMap[topLeft].type !== \"wall\" && gridMap[topLeft].type !== \"end\" && gridMap[topLeft].type !== \"start\") {\n      neighbors[4] = gridMap[topLeft];\n    }\n  }\n\n  if (point.x < cols && point.y > 0) {\n    const topRight = getIndex(point.x + 1, point.y - 1, cols);\n\n    if (gridMap[topRight].val && gridMap[topRight].type !== \"wall\" && gridMap[topRight].type !== \"end\" && gridMap[topRight].type !== \"start\") {\n      neighbors[5] = gridMap[topRight];\n    }\n  }\n\n  if (point.x > 0 && point.y < rows) {\n    const bottomLeft = getIndex(point.x - 1, point.y + 1, cols);\n\n    if (gridMap[bottomLeft].val && gridMap[bottomLeft].type !== \"wall\" && gridMap[bottomLeft].type !== \"end\" && gridMap[bottomLeft].type !== \"start\") {\n      neighbors[6] = gridMap[bottomLeft];\n    }\n  }\n\n  if (point.x < cols && point.y < rows) {\n    const bottomRight = getIndex(point.x + 1, point.y + 1, cols);\n\n    if (gridMap[bottomRight].val && gridMap[bottomRight].type !== \"wall\" && gridMap[bottomRight].type !== \"end\" && gridMap[bottomRight].type !== \"start\") {\n      neighbors[7] = gridMap[bottomRight];\n    }\n  }\n\n  return neighbors;\n}\n\nfunction AStar(rows, cols, gridMap) {\n  const [startPoint, wallPoints, endPoints] = getPoints(gridMap);\n  let points = {};\n  let openSet = new MinHeap();\n  let cameFrom = {};\n  let gScore = {};\n  let fScore = {};\n  let goal = null;\n\n  if (!startPoint || !endPoints) {\n    console.log(\"Map must have a start point, and an end point\");\n    return \"Map must have a start point, and an end point\";\n  }\n\n  gScore[getIndex(startPoint.x, startPoint.y, cols)] = 0;\n  const endPointDistances = new Array(endPoints.length);\n  endPoints.map((endPoint, i) => {\n    const score = heuristic(startPoint, endPoint);\n    endPointDistances[i] = [endPoint, gScore[getIndex(startPoint.x, startPoint.y, cols)] + score];\n    return null;\n  }); // console.log(endPointDistances);\n\n  endPointDistances.sort((a, b) => {\n    if (a[1] > b[1]) {\n      return 1;\n    }\n\n    if (a[1] < b[1]) {\n      return -1;\n    }\n\n    return 0;\n  });\n  goal = endPointDistances[0][0];\n  fScore[getIndex(startPoint.x, startPoint.y, cols)] = endPointDistances[0][1];\n  openSet.insert(fScore[getIndex(startPoint.x, startPoint.y, cols)]);\n  points[fScore[getIndex(startPoint.x, startPoint.y, cols)]] = startPoint;\n  console.log(points);\n\n  while (openSet.getHeap().length !== 0) {\n    const current = points[openSet.peek().toString()]; // console.log(current);\n\n    if (current.x === goal.x && current.y === goal.y) {\n      console.log(\"current\", current);\n      console.log(\"goal\", goal);\n      console.log(\"GOOOAAAAALLLLLLL\");\n      console.log(cameFrom);\n      return cameFrom;\n    }\n\n    const neighbors = getNeighbors(current, gridMap, rows, cols);\n    openSet.extract();\n    neighbors.map(neighbor => {\n      // console.log(\"neighbor\", neighbor);\n      const currentPathGScore = gScore[getIndex(current.x, current.y, cols)] + dist(current, neighbor);\n\n      if (gScore[getIndex(neighbor.x, neighbor.y, cols)]) {\n        if (currentPathGScore < gScore[getIndex(neighbor.x, neighbor.y, cols)]) {\n          cameFrom[getIndex(neighbor.x, neighbor.y, cols)] = current;\n          gScore[getIndex(neighbor.x, neighbor.y, cols)] = currentPathGScore;\n          fScore[getIndex(neighbor.x, neighbor.y, cols)] = gScore[getIndex(neighbor.x, neighbor.y, cols)] + heuristic(neighbor, goal);\n\n          if (!openSet.find(fScore[getIndex(neighbor.x, neighbor.y, cols)])) {\n            openSet.insert(fScore[getIndex(neighbor.x, neighbor.y, cols)]);\n            points[fScore[getIndex(neighbor.x, neighbor.y, cols)]] = neighbor;\n          }\n\n          return null;\n        }\n\n        return null;\n      }\n\n      cameFrom[getIndex(neighbor.x, neighbor.y, cols)] = current;\n      gScore[getIndex(neighbor.x, neighbor.y, cols)] = currentPathGScore;\n      fScore[getIndex(neighbor.x, neighbor.y, cols)] = gScore[getIndex(neighbor.x, neighbor.y, cols)] + heuristic(neighbor, goal); // console.log(openSet.find(fScore[getIndex(neighbor.x, neighbor.y, cols)]));\n\n      if (!openSet.find(fScore[getIndex(neighbor.x, neighbor.y, cols)])) {\n        openSet.insert(fScore[getIndex(neighbor.x, neighbor.y, cols)]);\n        points[fScore[getIndex(neighbor.x, neighbor.y, cols)]] = neighbor;\n      }\n\n      return null;\n    });\n  }\n\n  console.log(openSet.getHeap());\n  return;\n}\n\nexport default AStar;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Algorithms/AStar.js"],"names":["MinHeap","getIndex","x","y","cols","heuristic","startPoint","endPoint","distance","Math","sqrt","pow","dist","getPoints","gridMap","wallPoints","endPoints","map","square","val","type","push","getNeighbors","point","rows","neighbors","Array","left","right","up","down","topLeft","topRight","bottomLeft","bottomRight","AStar","points","openSet","cameFrom","gScore","fScore","goal","console","log","endPointDistances","length","i","score","sort","a","b","insert","getHeap","current","peek","toString","extract","neighbor","currentPathGScore","find"],"mappings":"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","sourcesContent":["import MinHeap from './MinHeap';\n\nfunction getIndex(x, y, cols){\n    return (x + (y * cols));\n}\n\nfunction heuristic(startPoint, endPoint){\n    //TODO make this a switch for the different types of heuristic functions\n    const distance = Math.sqrt(Math.pow((startPoint.x-endPoint.x), 2) + Math.pow((startPoint.y-endPoint.y), 2));  \n\n    return distance;\n} \n\nfunction dist(startPoint, endPoint){\n    //TODO make this a switch for the different types of heuristic functions\n    const distance = Math.sqrt(Math.pow((startPoint.x-endPoint.x), 2) + Math.pow((startPoint.y-endPoint.y), 2));  \n\n    return distance;\n} \n\nfunction getPoints(gridMap){\n    let startPoint = null;\n    let wallPoints = [];\n    let endPoints = [];\n\n    gridMap.map((square) => {\n        if(square.val && square.type ===  \"start\"){\n            // console.log(square);\n            startPoint = square;\n\n            return null;\n        }\n\n        if(square.val && square.type === \"wall\"){\n            // console.log(square);\n            wallPoints.push(square);\n\n            return null;\n        }\n\n        if(square.val && square.type === \"end\"){\n            // console.log(square);\n            endPoints.push(square);\n\n            return null;\n        }\n\n        return null;\n    })\n\n    return [startPoint, wallPoints, endPoints];\n}\n\nfunction getNeighbors(point, gridMap, rows, cols){\n    //Point                                 Index\n    // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n    // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n    // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n    // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n    // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n    // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n    // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n    // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n\n    const neighbors = new Array(8);\n\n    if(point.x > 0){\n        const left = getIndex((point.x-1), (point.y), cols);\n\n        if(gridMap[left].val && gridMap[left].type !== \"wall\"){\n            neighbors[0] = gridMap[left];\n        }\n    }\n    if(point.x < cols){\n        const right = getIndex((point.x+1), (point.y), cols);\n\n        if(gridMap[right].val && gridMap[right].type !== \"wall\"){\n            neighbors[1] = gridMap[right];\n        }\n    }\n    if(point.y > 0){\n        const up = getIndex((point.x), (point.y-1), cols);\n\n        if(gridMap[up].val && gridMap[up].type !== \"wall\" && gridMap[up].type !== \"end\" && gridMap[up].type !== \"start\"){\n            neighbors[2] = gridMap[up];\n        }\n    }\n    if(point.y < rows){\n        const down = getIndex((point.x), (point.y+1), cols);\n\n        if(gridMap[down].val && gridMap[down].type !== \"wall\" && gridMap[down].type !== \"end\" && gridMap[down].type !== \"start\"){\n            neighbors[3] = gridMap[down];\n        }\n    }\n    if(point.x > 0 && point.y > 0){\n        const topLeft = getIndex((point.x-1), (point.y-1), cols);\n\n        if(gridMap[topLeft].val && gridMap[topLeft].type !== \"wall\" && gridMap[topLeft].type !== \"end\" && gridMap[topLeft].type !== \"start\"){\n            neighbors[4] = gridMap[topLeft];\n        }\n    }\n    if(point.x < cols && point.y > 0){\n        const topRight = getIndex((point.x+1), (point.y-1), cols);\n\n        if(gridMap[topRight].val && gridMap[topRight].type !== \"wall\" && gridMap[topRight].type !== \"end\" && gridMap[topRight].type !== \"start\"){\n            neighbors[5] = gridMap[topRight];\n        }\n    }\n    if(point.x > 0 && point.y < rows){\n        const bottomLeft  = getIndex((point.x-1), (point.y+1), cols);\n\n        if(gridMap[bottomLeft].val && gridMap[bottomLeft].type !== \"wall\" && gridMap[bottomLeft].type !== \"end\" && gridMap[bottomLeft].type !== \"start\"){\n            neighbors[6] = gridMap[bottomLeft];\n        }\n    }\n    if(point.x < cols && point.y < rows){\n        const bottomRight = getIndex((point.x+1), (point.y+1), cols);\n\n        if(gridMap[bottomRight].val && gridMap[bottomRight].type !== \"wall\" && gridMap[bottomRight].type !== \"end\" && gridMap[bottomRight].type !== \"start\"){\n            neighbors[7] = gridMap[bottomRight];\n        }\n    }\n\n    return neighbors;\n}\n\nfunction AStar(rows, cols, gridMap){\n    const [startPoint, wallPoints, endPoints] = getPoints(gridMap);\n\n    let points = {};\n    let openSet = new MinHeap();\n    let cameFrom = {};\n    let gScore = {};\n    let fScore = {};\n    let goal = null;\n    \n\n    if(!startPoint || !endPoints){\n        console.log(\"Map must have a start point, and an end point\");\n        return \"Map must have a start point, and an end point\"; \n    }\n\n    gScore[getIndex(startPoint.x, startPoint.y, cols)] = 0;\n\n    const endPointDistances = new Array(endPoints.length);\n\n    endPoints.map((endPoint, i) => {\n        const score = heuristic(startPoint, endPoint); \n\n        endPointDistances[i] = [endPoint, gScore[getIndex(startPoint.x, startPoint.y, cols)] + score];\n\n        return null;\n    })\n\n    // console.log(endPointDistances);\n    \n    endPointDistances.sort((a, b) => {\n        if(a[1] > b[1]){\n            return 1\n        }\n        if(a[1] < b[1]){\n            return -1\n        }\n\n        return 0;\n    });\n\n    goal = endPointDistances[0][0];\n\n    fScore[getIndex(startPoint.x, startPoint.y, cols)] = endPointDistances[0][1];\n\n    openSet.insert(fScore[getIndex(startPoint.x, startPoint.y, cols)]);\n    points[fScore[getIndex(startPoint.x, startPoint.y, cols)]] = startPoint;\n\n    console.log(points);\n    while(openSet.getHeap().length !== 0){\n        const current = points[openSet.peek().toString()];\n        // console.log(current);\n\n        if(current.x === goal.x && current.y === goal.y){\n            console.log(\"current\",current);\n            console.log(\"goal\", goal);\n            console.log(\"GOOOAAAAALLLLLLL\");\n            console.log(cameFrom);\n            return cameFrom;\n        }\n\n        const neighbors = getNeighbors(current, gridMap, rows, cols);\n\n\n        openSet.extract();\n\n\n        neighbors.map((neighbor) => {            \n            // console.log(\"neighbor\", neighbor);\n            const currentPathGScore = gScore[getIndex(current.x, current.y, cols)] + dist(current, neighbor);\n\n            if(gScore[getIndex(neighbor.x, neighbor.y, cols)]){\n                if(currentPathGScore < gScore[getIndex(neighbor.x, neighbor.y, cols)]){\n\n                    cameFrom[getIndex(neighbor.x, neighbor.y, cols)] = current;\n                    gScore[getIndex(neighbor.x, neighbor.y, cols)] = currentPathGScore\n                    fScore[getIndex(neighbor.x, neighbor.y, cols)] = gScore[getIndex(neighbor.x, neighbor.y, cols)] + heuristic(neighbor, goal);\n                    \n                    if(!openSet.find(fScore[getIndex(neighbor.x, neighbor.y, cols)])){\n                        openSet.insert(fScore[getIndex(neighbor.x, neighbor.y, cols)]);\n                        points[fScore[getIndex(neighbor.x, neighbor.y, cols)]] = neighbor;\n                    } \n                    return null;\n                }\n                return null;\n            }\n\n            cameFrom[getIndex(neighbor.x, neighbor.y, cols)] = current;\n            gScore[getIndex(neighbor.x, neighbor.y, cols)] = currentPathGScore;\n            fScore[getIndex(neighbor.x, neighbor.y, cols)] = (gScore[getIndex(neighbor.x, neighbor.y, cols)] + heuristic(neighbor, goal));\n            \n            // console.log(openSet.find(fScore[getIndex(neighbor.x, neighbor.y, cols)]));\n            if(!openSet.find(fScore[getIndex(neighbor.x, neighbor.y, cols)])){\n                openSet.insert(fScore[getIndex(neighbor.x, neighbor.y, cols)]);\n                points[fScore[getIndex(neighbor.x, neighbor.y, cols)]] = neighbor;\n            }\n            return null;    \n        });\n    }\n\n    console.log(openSet.getHeap());\n\n    return;\n}\n\nexport default AStar"]},"metadata":{},"sourceType":"module"}