{"ast":null,"code":"import MinHeap from './MinHeap';\n\nfunction AStar(rows, cols, gridMap) {\n  let startPoint = null;\n  let wallPoints = [];\n  let endPoints = [];\n  let openSet = null;\n  let cameFrom = {};\n  let gScore = {};\n  let fScore;\n  console.log(openSet.getHeap());\n  gridMap.map(square => {\n    if (square.val && square.type === \"start\") {\n      // console.log(square);\n      startPoint = square;\n      return null;\n    }\n\n    if (square.val && square.type === \"wall\") {\n      // console.log(square);\n      wallPoints.push(square);\n      return null;\n    }\n\n    if (square.val && square.type === \"end\") {\n      // console.log(square);\n      endPoints.push(square);\n      return null;\n    }\n\n    return null;\n  });\n\n  if (!startPoint || !endPoints) {\n    console.log(\"Map must have a start point, and an end point\");\n    return \"Map must have a start point, and an end point\";\n  }\n}\n\nexport default AStar;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Algorithms/AStar.js"],"names":["MinHeap","AStar","rows","cols","gridMap","startPoint","wallPoints","endPoints","openSet","cameFrom","gScore","fScore","console","log","getHeap","map","square","val","type","push"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,WAApB;;AAEA,SAASC,KAAT,CAAeC,IAAf,EAAqBC,IAArB,EAA2BC,OAA3B,EAAmC;AAC/B,MAAIC,UAAU,GAAG,IAAjB;AACA,MAAIC,UAAU,GAAG,EAAjB;AACA,MAAIC,SAAS,GAAG,EAAhB;AAEA,MAAIC,OAAO,GAAG,IAAd;AACA,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,MAAJ;AAGAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,OAAO,CAACM,OAAR,EAAZ;AAGAV,EAAAA,OAAO,CAACW,GAAR,CAAaC,MAAD,IAAY;AACpB,QAAGA,MAAM,CAACC,GAAP,IAAcD,MAAM,CAACE,IAAP,KAAiB,OAAlC,EAA0C;AACtC;AACAb,MAAAA,UAAU,GAAGW,MAAb;AAEA,aAAO,IAAP;AACH;;AAED,QAAGA,MAAM,CAACC,GAAP,IAAcD,MAAM,CAACE,IAAP,KAAgB,MAAjC,EAAwC;AACpC;AACAZ,MAAAA,UAAU,CAACa,IAAX,CAAgBH,MAAhB;AAEA,aAAO,IAAP;AACH;;AAED,QAAGA,MAAM,CAACC,GAAP,IAAcD,MAAM,CAACE,IAAP,KAAgB,KAAjC,EAAuC;AACnC;AACAX,MAAAA,SAAS,CAACY,IAAV,CAAeH,MAAf;AAEA,aAAO,IAAP;AACH;;AAED,WAAO,IAAP;AACH,GAvBD;;AAyBA,MAAG,CAACX,UAAD,IAAe,CAACE,SAAnB,EAA6B;AACzBK,IAAAA,OAAO,CAACC,GAAR,CAAY,+CAAZ;AACA,WAAO,+CAAP;AACH;AACJ;;AAED,eAAeZ,KAAf","sourcesContent":["import MinHeap from './MinHeap';\n\nfunction AStar(rows, cols, gridMap){\n    let startPoint = null;\n    let wallPoints = [];\n    let endPoints = [];\n\n    let openSet = null;\n    let cameFrom = {};\n    let gScore = {};\n    let fScore \n\n   \n    console.log(openSet.getHeap());\n\n\n    gridMap.map((square) => {\n        if(square.val && square.type ===  \"start\"){\n            // console.log(square);\n            startPoint = square;\n\n            return null;\n        }\n\n        if(square.val && square.type === \"wall\"){\n            // console.log(square);\n            wallPoints.push(square);\n\n            return null;\n        }\n\n        if(square.val && square.type === \"end\"){\n            // console.log(square);\n            endPoints.push(square);\n\n            return null;\n        }\n\n        return null;\n    })\n\n    if(!startPoint || !endPoints){\n        console.log(\"Map must have a start point, and an end point\");\n        return \"Map must have a start point, and an end point\"; \n    }\n}\n\nexport default AStar"]},"metadata":{},"sourceType":"module"}