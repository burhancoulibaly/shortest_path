{"ast":null,"code":"var _jsxFileName = \"/home/menekou/projects/react/shortest-path/react-frontend/src/Routes.js\";\nimport React, { useState, useMemo, useEffect } from \"react\";\nimport axios from \"axios\";\nimport apolloClient from './ApolloConfig';\nimport LoginPage from './Login Page/LoginPage';\nimport Home from './Home/Home';\nimport App from './App/App';\nimport { ApolloProvider } from '@apollo/client';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\nimport UserContext from './UserContext';\n\nfunction Routes() {\n  const [user, setUser] = useState();\n  console.log(user);\n  axios.interceptors.request.use(function (request) {\n    request.headers[\"Content-Type\"] = 'application/json; charset=utf-8';\n    request.headers[\"Accept\"] = 'application/json';\n    request.headers[\"authorization\"] = user ? `Bearer ${user.accessToken}` : \"\";\n    request.withCredentials = true;\n    return request;\n  }, function (error) {\n    return Promise.reject(error);\n  });\n  const value = useMemo(() => [user, setUser], [user, setUser]);\n  useEffect(() => {\n    const updateUser = userData => {\n      if (!userData.accessToken) {\n        setUser(null);\n        return;\n      }\n\n      setUser({\n        username: userData.username,\n        role: userData.role,\n        accessToken: userData.accessToken\n      });\n      return;\n    };\n\n    axios.get(\"http://localhost:3000/refreshToken\").then(response => {\n      updateUser(response.data);\n      return;\n    }).catch(error => {\n      console.log(error.data);\n      return;\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(Router, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(UserContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ApolloProvider, {\n    client: apolloClient,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Redirect, {\n    to: \"/home\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 54\n    }\n  })), /*#__PURE__*/React.createElement(Route, {\n    path: \"/app\",\n    component: App,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    path: \"/home\",\n    component: Home,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    path: \"/login\",\n    component: LoginPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 25\n    }\n  })))));\n}\n\n; // return (\n//     <Router> \n//         <UserContext.Provider value={value}>\n//             <ApolloProvider client={apolloClient}>\n//                 <Switch>\n//                     <Route exact={true} path=\"/\"><Redirect to=\"/home\"/></Route>\n//                     { user \n//                         && \n//                         <Route path=\"/app\" component={App}/>\n//                         &&\n//                         <Route path=\"/home\" component={Home}/>\n//                     }\n//                     <Route path=\"/app\"><Redirect to=\"/login\"/></Route>\n//                     <Route path=\"/home\"><Redirect to=\"/login\"/></Route>\n//                     { !user \n//                         &&\n//                         <Route path=\"/login\" component={LoginPage}/>\n//                     }\n//                     <Route path=\"/login\"><Redirect to=\"/home\"/></Route>\n//                 </Switch>\n//             </ApolloProvider>\n//         </UserContext.Provider>\n//     </Router>\n\nexport default Routes;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Routes.js"],"names":["React","useState","useMemo","useEffect","axios","apolloClient","LoginPage","Home","App","ApolloProvider","BrowserRouter","Router","Switch","Route","Redirect","UserContext","Routes","user","setUser","console","log","interceptors","request","use","headers","accessToken","withCredentials","error","Promise","reject","value","updateUser","userData","username","role","get","then","response","data","catch"],"mappings":"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","sourcesContent":["import React, { useState, useMemo, useEffect } from \"react\";\nimport axios from \"axios\";\nimport apolloClient from './ApolloConfig'\nimport LoginPage from './Login Page/LoginPage';\nimport Home from './Home/Home';\nimport App from './App/App'\nimport { ApolloProvider } from '@apollo/client';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\nimport UserContext from './UserContext';\n\nfunction Routes() {\n    const [user, setUser] = useState();\n\n    console.log(user);\n\n    axios.interceptors.request.use(\n        function(request) {\n            request.headers[\"Content-Type\"] = 'application/json; charset=utf-8';\n            request.headers[\"Accept\"] = 'application/json';\n            request.headers[\"authorization\"] = user ? `Bearer ${user.accessToken}` : \"\";\n            request.withCredentials = true;\n            return request;\n        },\n        function(error) {\n            return Promise.reject(error);\n        }\n    );\n\n    const value = useMemo(() => ([user, setUser]), [user, setUser]);\n\n    useEffect(() => {\n        const updateUser = (userData) => {\n            if(!userData.accessToken){\n                setUser(null);\n\n                return;\n            }\n\n            setUser({\n              username: userData.username,\n              role: userData.role,\n              accessToken: userData.accessToken\n            })\n        \n            return;\n        }\n\n        axios.get(\"http://localhost:3000/refreshToken\")\n            .then((response) => {\n                updateUser(response.data);\n\n                return;\n            })\n            .catch((error) => {\n                console.log(error.data);\n                 return;\n            });\n    }, []);\n\n    return (\n        <Router> \n            <UserContext.Provider value={value}>\n                <ApolloProvider client={apolloClient}>\n                    <Switch>\n                        <Route exact={true} path=\"/\"><Redirect to=\"/home\"/></Route>\n                        <Route path=\"/app\" component={App}></Route>\n                        <Route path=\"/home\" component={Home}/>\n                        <Route path=\"/login\" component={LoginPage}/>\n                    </Switch>\n                </ApolloProvider>\n            </UserContext.Provider>\n        </Router>\n    );\n};\n\n\n// return (\n//     <Router> \n//         <UserContext.Provider value={value}>\n//             <ApolloProvider client={apolloClient}>\n//                 <Switch>\n//                     <Route exact={true} path=\"/\"><Redirect to=\"/home\"/></Route>\n//                     { user \n//                         && \n//                         <Route path=\"/app\" component={App}/>\n//                         &&\n//                         <Route path=\"/home\" component={Home}/>\n//                     }\n//                     <Route path=\"/app\"><Redirect to=\"/login\"/></Route>\n//                     <Route path=\"/home\"><Redirect to=\"/login\"/></Route>\n//                     { !user \n//                         &&\n//                         <Route path=\"/login\" component={LoginPage}/>\n//                     }\n//                     <Route path=\"/login\"><Redirect to=\"/home\"/></Route>\n                    \n//                 </Switch>\n//             </ApolloProvider>\n//         </UserContext.Provider>\n//     </Router>\nexport default Routes;"]},"metadata":{},"sourceType":"module"}