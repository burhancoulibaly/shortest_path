{"ast":null,"code":"import React, { useState, useMemo, useEffect } from \"react\";\nimport axios from \"axios\";\nimport apolloClient from './ApolloConfig';\nimport LoginPage from './Login Page/LoginPage';\nimport Home from './Home/Home';\nimport Account from \"./Account/Account\";\nimport App from './App/App';\nimport TenPaths from './TenPaths/TenPaths';\nimport Sandbox from './Sandbox/Sandbox';\nimport Multiplayer from './Multiplayer/Multiplayer';\nimport { ApolloProvider } from '@apollo/client';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\nimport UserContext from './UserContext';\nimport RouteGuard from './RouteGuard';\nimport TopNav from \"./TopNav/TopNav\"; //Update user\n// const updateUser = (userData, setUser) => {\n//     if(userData == \"loading\"){\n//         setUser(\"loading\");\n//         return;\n//     }\n//     if(!userData || !userData.accessToken || !userData.response_type || userData.response_type !== \"Success\"){\n//         setUser(null);\n//         return;\n//     }\n//     setUser({\n//       username: userData.username,\n//       role: userData.role,\n//       accessToken: userData.accessToken\n//     })\n//     return;\n// }\n// //Log user out\n// const logout = (setUser) => {\n//     axios.get(\"http://localhost:3000/deleteRefreshToken\")\n//         .then((response) => {\n//             updateUser(response.data, setUser);\n//             return;\n//         })\n//         .catch((error) => {\n//             console.log(error.data);\n//             updateUser(error.data, setUser);\n//             return;\n//         });\n// }\n// //TODO try to display loading page while refresh token function is propcessing\n// //Using containers so top nav is not rendered on login page\n// //Written differently from others because this is how props are passed with Router components\n// const LoginContainer = ({location, user}) => {\n//     return(\n//         <div>\n//             <Route\n//                 path=\"/login\"\n//                 location={location.state ? location : { ...location, state: { from: location } }}\n//                 render={(props) => (\n//                     user === \"loading\"\n//                         ? <div style={{height: \"100%\", display:\"flex\", justifyContent: \"center\", alignItems: \"center\"}}></div>\n//                         : <LoginPage {...props} \n//                             logout={(setUser) => logout(setUser)}\n//                             updateUser={(userData, setUser) => updateUser(userData, setUser)}  \n//                         />\n//                 )}  \n//             />\n//         </div>\n//     )\n// }\n// const DefaultContainer = ({user}) => {\n//     return(\n//         <div>\n//             <TopNav \n//                 logout={(setUser) => logout(setUser)}\n//             />\n//             <Route exact={true} path=\"/\"><Redirect to=\"/home\"/></Route>\n//             <RouteGuard \n//                 path='/app' \n//                 component={App} \n//                 user={user}\n//             />\n//             <RouteGuard \n//                 path='/home' \n//                 component={Home} \n//                 user={user}\n//             />\n//             <RouteGuard \n//                 path='/account' \n//                 component={Account} \n//                 user={user}\n//             />\n//             <RouteGuard \n//                 path='/tenpaths' \n//                 component={TenPaths} \n//                 user={user}\n//             />\n//             <RouteGuard \n//                 path='/sandbox' \n//                 component={Sandbox} \n//                 user={user}\n//             />\n//             <RouteGuard \n//                 path='/multiplayer' \n//                 component={Multiplayer} \n//                 user={user}\n//             />\n//             {/* Add 404 page here */}\n//         </div>\n//     )\n// }\n\nfunction Routes() {\n  //Stores user data if user is logged in and null if user isn't logged in\n  // const [user, setUser] = useState();\n  // console.log(user);\n  // //Adds headers to every axios request(requests)\n  // axios.interceptors.request.use(\n  //     function(request) {\n  //         request.headers[\"Content-Type\"] = 'application/json; charset=utf-8';\n  //         request.headers[\"Accept\"] = 'application/json';\n  //         request.headers[\"authorization\"] = user ? `Bearer ${user.accessToken}` : \"\";\n  //         request.withCredentials = true;\n  //         return request;\n  //     },\n  //     function(error) {\n  //         return Promise.reject(error);\n  //     }\n  // );\n  // //will only recompute the memoized value when one of the dependencies has changed\n  // const value = useMemo(() => ([user, setUser]), [user, setUser]);\n  // //To make sure tokenRefresh attempt is only made once.\n  // useEffect(() => {\n  //     updateUser(\"loading\", setUser)\n  //     axios.get(\"http://localhost:3000/refreshToken\")\n  //         .then((response) => {\n  //             // console.log(response.data);\n  //             updateUser(response.data, setUser);\n  //             return;\n  //         })\n  //         .catch((error) => {\n  //             console.log(error);\n  //             logout(setUser);\n  //             return;\n  //         });\n  // }, []);\n  // return (\n  //     <Router>\n  //         <UserContext.Provider value={value}>\n  //             <ApolloProvider client={apolloClient}>\n  //                 <Switch>\n  //                     {/* Render is used to pass props to components rendered by React Router */}\n  //                     <Route\n  //                         exact \n  //                         path=\"/login\" \n  //                         render={(props) => (\n  //                             <LoginContainer\n  //                                 user={user}\n  //                                 location={props.location}\n  //                             />\n  //                         )}\n  //                     />\n  //                     <Route\n  //                         render={() => (\n  //                             <DefaultContainer\n  //                                 user={user}\n  //                             />\n  //                         )}\n  //                     />\n  //                 </Switch>\n  //             </ApolloProvider>\n  //         </UserContext.Provider>\n  //     </Router>\n  // );\n  return;\n}\n\n;\nexport default Routes;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Routes.js"],"names":["React","useState","useMemo","useEffect","axios","apolloClient","LoginPage","Home","Account","App","TenPaths","Sandbox","Multiplayer","ApolloProvider","BrowserRouter","Router","Switch","Route","Redirect","UserContext","RouteGuard","TopNav","Routes"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,OAA1B,EAAmCC,SAAnC,QAAoD,OAApD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,GAAP,MAAgB,WAAhB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,SAASC,cAAT,QAA+B,gBAA/B;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,MAAlC,EAA0CC,KAA1C,EAAiDC,QAAjD,QAAiE,kBAAjE;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,MAAP,MAAmB,iBAAnB,C,CAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA,SAASC,MAAT,GAAkB;AACd;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AAAA;AACD,eAAeA,MAAf","sourcesContent":["import React, { useState, useMemo, useEffect } from \"react\";\nimport axios from \"axios\";\nimport apolloClient from './ApolloConfig'\nimport LoginPage from './Login Page/LoginPage';\nimport Home from './Home/Home';\nimport Account from \"./Account/Account\";\nimport App from './App/App';\nimport TenPaths from './TenPaths/TenPaths';\nimport Sandbox from './Sandbox/Sandbox';\nimport Multiplayer from './Multiplayer/Multiplayer';\nimport { ApolloProvider } from '@apollo/client';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\nimport UserContext from './UserContext';\nimport RouteGuard from './RouteGuard';\nimport TopNav from \"./TopNav/TopNav\";\n\n//Update user\n// const updateUser = (userData, setUser) => {\n//     if(userData == \"loading\"){\n//         setUser(\"loading\");\n\n//         return;\n//     }\n\n//     if(!userData || !userData.accessToken || !userData.response_type || userData.response_type !== \"Success\"){\n//         setUser(null);\n\n//         return;\n//     }\n\n//     setUser({\n//       username: userData.username,\n//       role: userData.role,\n//       accessToken: userData.accessToken\n//     })\n\n//     return;\n// }\n\n// //Log user out\n// const logout = (setUser) => {\n//     axios.get(\"http://localhost:3000/deleteRefreshToken\")\n//         .then((response) => {\n//             updateUser(response.data, setUser);\n\n//             return;\n//         })\n//         .catch((error) => {\n//             console.log(error.data);\n//             updateUser(error.data, setUser);\n\n//             return;\n//         });\n// }\n\n// //TODO try to display loading page while refresh token function is propcessing\n// //Using containers so top nav is not rendered on login page\n// //Written differently from others because this is how props are passed with Router components\n// const LoginContainer = ({location, user}) => {\n//     return(\n//         <div>\n//             <Route\n//                 path=\"/login\"\n//                 location={location.state ? location : { ...location, state: { from: location } }}\n//                 render={(props) => (\n//                     user === \"loading\"\n//                         ? <div style={{height: \"100%\", display:\"flex\", justifyContent: \"center\", alignItems: \"center\"}}></div>\n//                         : <LoginPage {...props} \n//                             logout={(setUser) => logout(setUser)}\n//                             updateUser={(userData, setUser) => updateUser(userData, setUser)}  \n//                         />\n//                 )}  \n//             />\n//         </div>\n//     )\n// }\n\n// const DefaultContainer = ({user}) => {\n//     return(\n//         <div>\n//             <TopNav \n//                 logout={(setUser) => logout(setUser)}\n//             />\n//             <Route exact={true} path=\"/\"><Redirect to=\"/home\"/></Route>\n//             <RouteGuard \n//                 path='/app' \n//                 component={App} \n//                 user={user}\n//             />\n//             <RouteGuard \n//                 path='/home' \n//                 component={Home} \n//                 user={user}\n//             />\n//             <RouteGuard \n//                 path='/account' \n//                 component={Account} \n//                 user={user}\n//             />\n//             <RouteGuard \n//                 path='/tenpaths' \n//                 component={TenPaths} \n//                 user={user}\n//             />\n//             <RouteGuard \n//                 path='/sandbox' \n//                 component={Sandbox} \n//                 user={user}\n//             />\n//             <RouteGuard \n//                 path='/multiplayer' \n//                 component={Multiplayer} \n//                 user={user}\n//             />\n\n//             {/* Add 404 page here */}\n//         </div>\n//     )\n// }\n\nfunction Routes() {\n    //Stores user data if user is logged in and null if user isn't logged in\n    // const [user, setUser] = useState();\n\n    // console.log(user);\n\n    // //Adds headers to every axios request(requests)\n    // axios.interceptors.request.use(\n    //     function(request) {\n    //         request.headers[\"Content-Type\"] = 'application/json; charset=utf-8';\n    //         request.headers[\"Accept\"] = 'application/json';\n    //         request.headers[\"authorization\"] = user ? `Bearer ${user.accessToken}` : \"\";\n    //         request.withCredentials = true;\n    //         return request;\n    //     },\n    //     function(error) {\n    //         return Promise.reject(error);\n    //     }\n    // );\n\n    // //will only recompute the memoized value when one of the dependencies has changed\n    // const value = useMemo(() => ([user, setUser]), [user, setUser]);\n\n    // //To make sure tokenRefresh attempt is only made once.\n    // useEffect(() => {\n    //     updateUser(\"loading\", setUser)\n    //     axios.get(\"http://localhost:3000/refreshToken\")\n    //         .then((response) => {\n    //             // console.log(response.data);\n    //             updateUser(response.data, setUser);\n\n    //             return;\n    //         })\n    //         .catch((error) => {\n    //             console.log(error);\n\n    //             logout(setUser);\n\n    //             return;\n    //         });\n    // }, []);\n\n    // return (\n    //     <Router>\n    //         <UserContext.Provider value={value}>\n    //             <ApolloProvider client={apolloClient}>\n    //                 <Switch>\n    //                     {/* Render is used to pass props to components rendered by React Router */}\n    //                     <Route\n    //                         exact \n    //                         path=\"/login\" \n    //                         render={(props) => (\n    //                             <LoginContainer\n    //                                 user={user}\n    //                                 location={props.location}\n    //                             />\n    //                         )}\n    //                     />\n    //                     <Route\n    //                         render={() => (\n    //                             <DefaultContainer\n    //                                 user={user}\n    //                             />\n    //                         )}\n    //                     />\n    //                 </Switch>\n    //             </ApolloProvider>\n    //         </UserContext.Provider>\n    //     </Router>\n    // );\n    return\n};\nexport default Routes;"]},"metadata":{},"sourceType":"module"}