{"ast":null,"code":"import FibonacciHeapNode from '../Algorithms/FibonacciHeapNode';\nimport FibonacciHeap from '../Algorithms/FibonacciHeap';\n\nfunction getIndex(x, y, cols) {\n  return x + y * cols;\n}\n\nfunction dist(startPoint, endPoint) {\n  //TODO make this a switch for the different types of heuristic functions\n  const distance = Math.sqrt(Math.pow(endPoint.getPoint().x - startPoint.getPoint().x, 2) + Math.pow(endPoint.getPoint().y - startPoint.getPoint().y, 2));\n  return distance;\n}\n\nfunction getPoints(gridMap) {\n  let startPoint = null;\n  let endPoints = [];\n  gridMap.map(square => {\n    if (square.val && square.type === \"start\") {\n      // console.log(square);\n      startPoint = square;\n      return null;\n    }\n\n    if (square.val && square.type === \"end\") {\n      // console.log(square);\n      endPoints.push(square);\n      return null;\n    }\n\n    return null;\n  });\n  return [startPoint, endPoints];\n}\n\nfunction getNeighbors(current, rows, cols, node) {\n  //Point                                 Index\n  // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n  // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n  // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n  // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n  // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n  // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n  // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n  // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n  const neighbors = new Array(8);\n\n  if (current.getPoint().x > 0) {\n    const left = getIndex(current.getPoint().x - 1, current.getPoint().y, cols);\n\n    if (node[left].node.getPoint().type !== \"wall\") {\n      neighbors[0] = node[left].node;\n    }\n  }\n\n  if (current.getPoint().x < cols - 1) {\n    const right = getIndex(current.getPoint().x + 1, current.getPoint().y, cols);\n\n    if (node[right].node.getPoint().type !== \"wall\") {\n      neighbors[1] = node[right].node;\n    }\n  }\n\n  if (current.getPoint().y > 0) {\n    const up = getIndex(current.getPoint().x, current.getPoint().y - 1, cols);\n\n    if (node[up].node.getPoint().type !== \"wall\") {\n      neighbors[2] = node[up].node;\n    }\n  }\n\n  if (current.getPoint().y < rows - 1) {\n    const down = getIndex(current.getPoint().x, current.getPoint().y + 1, cols);\n\n    if (node[down].node.getPoint().type !== \"wall\") {\n      neighbors[3] = node[down].node;\n    }\n  }\n\n  if (current.getPoint().x > 0 && current.getPoint().y > 0) {\n    const topLeft = getIndex(current.getPoint().x - 1, current.getPoint().y - 1, cols);\n\n    if (node[topLeft].node.getPoint().type !== \"wall\") {\n      neighbors[4] = node[topLeft].node;\n    }\n  }\n\n  if (current.getPoint().x < cols - 1 && current.getPoint().y > 0) {\n    const topRight = getIndex(current.getPoint().x + 1, current.getPoint().y - 1, cols);\n\n    if (node[topRight].node.getPoint().type !== \"wall\") {\n      neighbors[5] = node[topRight].node;\n    }\n  }\n\n  if (current.getPoint().x > 0 && current.getPoint().y < rows - 1) {\n    const bottomLeft = getIndex(current.getPoint().x - 1, current.getPoint().y + 1, cols);\n\n    if (node[bottomLeft].node.getPoint().type !== \"wall\") {\n      neighbors[6] = node[bottomLeft].node;\n    }\n  }\n\n  if (current.getPoint().x < cols - 1 && current.getPoint().y < rows - 1) {\n    const bottomRight = getIndex(current.getPoint().x + 1, current.getPoint().y + 1, cols);\n\n    if (node[bottomRight].node.getPoint().type !== \"wall\") {\n      neighbors[7] = node[bottomRight].node;\n    }\n  }\n\n  return neighbors;\n}\n\nfunction Dijkstra(rows, cols, gridMap, memState, setState, cutCorners, allowDiags) {\n  const [startPoint, endPoints] = getPoints(gridMap);\n  const heap = new FibonacciHeap();\n  const cameFrom = {};\n  const node = {};\n  const states = []; //TODO: Bug, clears grid but then returns it to its previous state\n\n  const newState = { ...memState,\n    grid: new Array(rows * cols).fill({\n      val: false,\n      type: null\n    }).map((square, i) => {\n      return { ...square,\n        x: i % cols,\n        y: Math.abs((i - i % cols) / cols)\n      };\n    })\n  };\n  states.push(newState);\n  let goal = endPoints[0];\n\n  if (!startPoint || !endPoints) {\n    console.log(\"Map must have a start point, and an end point\");\n    return \"Map must have a start point, and an end point\";\n  }\n\n  gridMap.map((square, index) => {\n    if (getIndex(startPoint.x, startPoint.y, cols) === index) {\n      node[index] = {\n        dist: 0,\n        node: null\n      };\n      cameFrom[index] = null;\n    }\n\n    if (getIndex(startPoint.x, startPoint.y, cols) !== index) {\n      node[index] = {\n        dist: Number.POSITIVE_INFINITY,\n        node: null\n      };\n      cameFrom[index] = null;\n    }\n\n    const currNode = new FibonacciHeapNode(node[index].dist, square);\n    node[index].node = currNode;\n    heap.insert(currNode);\n    return null;\n  });\n\n  while (heap.getRootList().length > 0) {\n    const current = heap.peek(); // console.log(\"new min\",current;\n\n    heap.extractMin(); // console.log(Array.from(heap.getRootList()))\n\n    const newState = { ...memState,\n      grid: memState.grid.map((square, index) => {\n        if (current.getPoint().x === square.x && current.getPoint().y === square.y) {\n          if (current.getPoint().type !== \"start\" && current.getPoint().type !== \"end\") {\n            memState.grid[index] = { ...memState.grid[index],\n              val: true,\n              type: \"neighbors\"\n            };\n          }\n\n          return { ...square\n          };\n        }\n\n        return { ...square\n        };\n      })\n    };\n    states.push(newState);\n\n    if (current.getPoint().x === goal.x && current.getPoint().y === goal.y) {\n      const state = states[states.length - 1];\n      setState({ // return {\n        ...state,\n        //state object is immutable so updates have to be done this way\n        grid: state.grid.map((square, index) => {\n          if (cameFrom[index]) {\n            if (square.type === \"end\") {\n              let prev = cameFrom[index];\n\n              while (prev) {\n                if (prev.type !== \"start\" && prev.type !== \"end\") {\n                  state.grid[getIndex(prev.x, prev.y, state.cols)] = { ...state.grid[getIndex(prev.x, prev.y, state.cols)],\n                    val: true,\n                    type: \"path\"\n                  };\n                }\n\n                prev = cameFrom[getIndex(prev.x, prev.y, state.cols)];\n              }\n\n              return { ...square\n              };\n            }\n\n            return { ...square\n            };\n          }\n\n          return { ...square\n          };\n        })\n      });\n      console.log(\"PATH FOUND!!!!!\");\n      return states;\n    }\n\n    const neighbors = getNeighbors(current, rows, cols, node); // console.log(neighbors)\n\n    neighbors.map(neighbor => {\n      // console.log(neighbor);\n      const currentDist = node[getIndex(current.getPoint().x, current.getPoint().y, cols)].dist + dist(current, neighbor);\n\n      if (currentDist < node[getIndex(neighbor.getPoint().x, neighbor.getPoint().y, cols)].dist) {\n        node[getIndex(neighbor.getPoint().x, neighbor.getPoint().y, cols)].dist = currentDist;\n        cameFrom[getIndex(neighbor.getPoint().x, neighbor.getPoint().y, cols)] = current.getPoint();\n        heap.decreaseKey(neighbor, node[getIndex(neighbor.getPoint().x, neighbor.getPoint().y, cols)].dist);\n        const newState = { ...memState,\n          grid: memState.grid.map((square, index) => {\n            if (neighbor.getPoint().x === square.x && neighbor.getPoint().y === square.y) {\n              if (neighbor.getPoint().type !== \"start\" && neighbor.getPoint().type !== \"end\") {\n                memState.grid[index] = { ...memState.grid[index],\n                  val: true,\n                  type: \"openset\"\n                };\n              }\n\n              return { ...square\n              };\n            }\n\n            return { ...square\n            };\n          })\n        };\n        states.push(newState);\n        return null;\n      }\n\n      return null;\n    });\n  }\n\n  return states;\n}\n\nexport default Dijkstra;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Algorithms/Dijkstra.js"],"names":["FibonacciHeapNode","FibonacciHeap","getIndex","x","y","cols","dist","startPoint","endPoint","distance","Math","sqrt","pow","getPoint","getPoints","gridMap","endPoints","map","square","val","type","push","getNeighbors","current","rows","node","neighbors","Array","left","right","up","down","topLeft","topRight","bottomLeft","bottomRight","Dijkstra","memState","setState","cutCorners","allowDiags","heap","cameFrom","states","newState","grid","fill","i","abs","goal","console","log","index","Number","POSITIVE_INFINITY","currNode","insert","getRootList","length","peek","extractMin","state","prev","neighbor","currentDist","decreaseKey"],"mappings":"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","sourcesContent":["import FibonacciHeapNode from '../Algorithms/FibonacciHeapNode';\nimport FibonacciHeap from '../Algorithms/FibonacciHeap';\n\nfunction getIndex(x, y, cols){\n    return (x + (y * cols));\n}\n\nfunction dist(startPoint, endPoint){\n    //TODO make this a switch for the different types of heuristic functions\n    const distance = Math.sqrt(Math.pow((endPoint.getPoint().x-startPoint.getPoint().x), 2) + Math.pow((endPoint.getPoint().y-startPoint.getPoint().y), 2));     \n    return distance;\n}\n\nfunction getPoints(gridMap){\n    let startPoint = null;\n    let endPoints = [];\n    \n    gridMap.map((square) => {\n        if(square.val && square.type ===  \"start\"){\n            // console.log(square);\n            startPoint = square;\n\n            return null;\n        }\n\n        if(square.val && square.type === \"end\"){\n            // console.log(square);\n            endPoints.push(square);\n\n            return null;\n        }\n\n        return null;\n    })\n\n    return [startPoint, endPoints];\n}\n\nfunction getNeighbors(current, rows, cols, node){\n    //Point                                 Index\n    // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n    // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n    // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n    // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n    // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n    // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n    // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n    // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n\n    const neighbors = new Array(8);\n    \n    if(current.getPoint().x > 0){\n        const left = getIndex((current.getPoint().x-1), (current.getPoint().y), cols);\n\n        if(node[left].node.getPoint().type !== \"wall\"){\n            neighbors[0] = node[left].node;   \n        }\n    }\n    if(current.getPoint().x < cols-1){\n        const right = getIndex((current.getPoint().x+1), (current.getPoint().y), cols);\n\n        if(node[right].node.getPoint().type !== \"wall\"){\n            neighbors[1] = node[right].node;   \n        }\n    }\n    if(current.getPoint().y > 0){\n        const up = getIndex((current.getPoint().x), (current.getPoint().y-1), cols);\n\n        if(node[up].node.getPoint().type !== \"wall\"){\n            neighbors[2] = node[up].node;   \n        }\n    }\n    if(current.getPoint().y < rows-1){\n        const down = getIndex((current.getPoint().x), (current.getPoint().y+1), cols);\n\n        if(node[down].node.getPoint().type !== \"wall\"){\n            neighbors[3] = node[down].node;   \n        }\n    }\n    if(current.getPoint().x > 0 && current.getPoint().y > 0){\n        const topLeft = getIndex((current.getPoint().x-1), (current.getPoint().y-1), cols);\n\n        if(node[topLeft].node.getPoint().type !== \"wall\"){\n            neighbors[4] = node[topLeft].node;   \n        }\n    }\n    if(current.getPoint().x < cols-1 && current.getPoint().y > 0){\n        const topRight = getIndex((current.getPoint().x+1), (current.getPoint().y-1), cols);\n\n        if(node[topRight].node.getPoint().type !== \"wall\"){\n            neighbors[5] = node[topRight].node;            \n        }\n    }\n    if(current.getPoint().x > 0 && current.getPoint().y < rows-1){\n        const bottomLeft  = getIndex((current.getPoint().x-1), (current.getPoint().y+1), cols);\n\n        if(node[bottomLeft].node.getPoint().type !== \"wall\"){\n            neighbors[6] = node[bottomLeft].node;   \n        }\n    }\n    if(current.getPoint().x < cols-1 && current.getPoint().y < rows-1){\n        const bottomRight = getIndex((current.getPoint().x+1), (current.getPoint().y+1), cols);\n\n        if(node[bottomRight].node.getPoint().type !== \"wall\"){\n            neighbors[7] = node[bottomRight].node;   \n        }\n    }\n\n    return neighbors;\n}\n\nfunction Dijkstra(rows, cols, gridMap, memState, setState, cutCorners, allowDiags){\n    const [startPoint, endPoints] = getPoints(gridMap);\n    const heap = new FibonacciHeap();\n    const cameFrom = {};\n    const node = {};\n    const states = [];\n\n    //TODO: Bug, clears grid but then returns it to its previous state\n    const newState = {\n        ...memState,\n        grid: new Array(rows*cols).fill({val: false, type: null}).map((square, i) => {\n            return {\n                ...square,\n                x: i % cols,\n                y: Math.abs((i - (i % cols)) / cols)\n            }\n        })\n    }\n    states.push(newState);\n\n    let goal = endPoints[0];\n\n    if(!startPoint || !endPoints){\n        console.log(\"Map must have a start point, and an end point\");\n        return \"Map must have a start point, and an end point\"; \n    }\n\n    gridMap.map((square, index) => {\n        if(getIndex(startPoint.x, startPoint.y, cols) === index){\n            node[index] = {dist: 0, node: null};\n            cameFrom[index] = null\n        }\n\n        if(getIndex(startPoint.x, startPoint.y, cols) !== index){\n            node[index] = {dist: Number.POSITIVE_INFINITY, node: null};\n            cameFrom[index] = null\n        }\n\n        const currNode = new FibonacciHeapNode(node[index].dist, square);\n        node[index].node = currNode;\n        heap.insert(currNode);\n\n        return null;\n    });\n\n    while(heap.getRootList().length > 0){\n        const current = heap.peek();\n        // console.log(\"new min\",current;\n\n        heap.extractMin();\n        // console.log(Array.from(heap.getRootList()))\n\n        const newState = {\n            ...memState,\n            grid: memState.grid.map((square, index) => {\n                if(current.getPoint().x === square.x && current.getPoint().y === square.y){\n                    if(current.getPoint().type !== \"start\" && current.getPoint().type !== \"end\"){\n                        memState.grid[index] = {\n                            ...memState.grid[index],\n                            val: true,\n                            type: \"neighbors\"\n                        }\n                    }\n                    return {...square}\n                }\n                return {...square}\n            })\n        }\n        states.push(newState);\n\n        if(current.getPoint().x === goal.x && current.getPoint().y === goal.y){\n            const state = states[states.length-1];\n            setState({\n                // return {\n                ...state,\n                //state object is immutable so updates have to be done this way\n                grid: state.grid.map((square, index) => {\n                    if(cameFrom[index]){\n                        if(square.type === \"end\"){\n                            let prev = cameFrom[index];\n                \n                            while(prev){                   \n                                if(prev.type !== \"start\" && prev.type !== \"end\"){\n                                    state.grid[getIndex(prev.x,prev.y,state.cols)] = {\n                                        ...state.grid[getIndex(prev.x,prev.y,state.cols)],\n                                        val: true,\n                                        type: \"path\"\n                                    }\n                                }\n                                prev = cameFrom[getIndex(prev.x,prev.y,state.cols)];\n                            }\n                            return {...square};\n                        }\n                        return {...square};\n                    }\n                    return {...square};\n                })\n            \n            });\n\n            console.log(\"PATH FOUND!!!!!\");\n            return states;\n        }\n\n        const neighbors = getNeighbors(current, rows, cols, node);\n\n        // console.log(neighbors)\n        neighbors.map((neighbor) => {\n            // console.log(neighbor);\n\n            const currentDist = node[getIndex(current.getPoint().x, current.getPoint().y, cols)].dist + dist(current, neighbor);\n\n            if(currentDist < node[getIndex(neighbor.getPoint().x, neighbor.getPoint().y, cols)].dist){\n\n                node[getIndex(neighbor.getPoint().x, neighbor.getPoint().y, cols)].dist = currentDist;\n                \n                cameFrom[getIndex(neighbor.getPoint().x, neighbor.getPoint().y, cols)] = current.getPoint();\n\n                heap.decreaseKey(neighbor, node[getIndex(neighbor.getPoint().x, neighbor.getPoint().y, cols)].dist);\n\n                const newState = {\n                    ...memState,\n                    grid: memState.grid.map((square, index) => {\n                        if(neighbor.getPoint().x === square.x && neighbor.getPoint().y === square.y){\n                            if(neighbor.getPoint().type !== \"start\" && neighbor.getPoint().type !== \"end\"){\n                                memState.grid[index] = {\n                                    ...memState.grid[index],\n                                    val: true,\n                                    type: \"openset\"\n                                }\n                            }\n                            return {...square}\n                        }\n                        return {...square}\n                    })\n                }\n                states.push(newState); \n\n                return null;\n            } \n\n            return null;\n        })\n    }\n    \n    return states;\n}\n\nexport default Dijkstra;"]},"metadata":{},"sourceType":"module"}