{"ast":null,"code":"class MinHeap {\n  constructor(heap) {\n    this.getHeap = () => {\n      return this._heap;\n    };\n\n    this.parentPos = pos => {\n      return parseInt((pos - 1) / 2);\n    };\n\n    this.leftChildPos = pos => {\n      return parseInt(2 * pos + 1);\n    };\n\n    this.rightChildPos = pos => {\n      return parseInt(2 * pos + 2);\n    };\n\n    this.insert = val => {\n      this._heap.push(val);\n\n      let pos = this._heap.length - 1;\n\n      if (this._heap.length <= 1) {\n        return;\n      }\n\n      while (this.parentPos(pos) >= 0 && this._heap[pos].val < this._heap[this.parentPos(pos)].val) {\n        this.swap(pos, this.parentPos(pos));\n        pos = this.parentPos(pos);\n      }\n\n      return;\n    };\n\n    this.peek = () => {\n      if (this.isEmpty()) {\n        return;\n      }\n\n      return this._heap[0];\n    };\n\n    this.extract = () => {\n      if (this._heap.length === 0) {\n        return;\n      }\n\n      if (this.minHeap[0].point.length > 1) {}\n\n      const min = this._heap.shift();\n\n      this._heap.unshift(this._heap[this._heap.length - 1]);\n\n      this._heap.pop();\n\n      if (this._heap.length <= 1) {\n        return;\n      }\n\n      ;\n      this.minHeapify(0);\n      return min;\n    };\n\n    this.find = val => {\n      for (let i = 0; i < this._heap.length; i++) {\n        if (this._heap[i].val === val) {\n          return i;\n        }\n      }\n\n      return;\n    };\n\n    this.delete = val => {\n      for (let i = 0; i < this._heap.length; i++) {\n        if (this._heap[i].val === val) {\n          if (this._heap.length === 1) {\n            this._heap.pop();\n\n            return;\n          }\n\n          const tmp = this._heap[i];\n          this._heap[i] = this._heap[this._heap.length - 1];\n          this._heap[this._heap.length - 1] = tmp;\n\n          this._heap.pop();\n\n          return this.minHeapify(i);\n        }\n      }\n\n      return;\n    };\n\n    this.swap = (pos1, pos2) => {\n      const tmp = this._heap[pos1];\n      this._heap[pos1] = this._heap[pos2];\n      this._heap[pos2] = tmp;\n      return;\n    };\n\n    this.isEmpty = () => {\n      if (this._heap.length === 0) {\n        return true;\n      }\n\n      return false;\n    };\n\n    this.size = () => {\n      return this._heap.length.toString();\n    };\n\n    this.minHeapify = pos => {\n      if (this.leftChildPos(pos) < this._heap.length) {\n        if (this.rightChildPos(pos) < this._heap.length) {\n          if (this._heap[pos].val > this._heap[this.leftChildPos(pos)].val || this._heap[pos].val > this._heap[this.rightChildPos(pos)].val) {\n            if (this._heap[this.leftChildPos(pos)].val < this._heap[this.rightChildPos(pos)].val) {\n              this.swap(pos, this.leftChildPos(pos));\n              return this.minHeapify(this.leftChildPos(pos));\n            }\n\n            this.swap(pos, this.rightChildPos(pos));\n            return this.minHeapify(this.rightChildPos(pos));\n            ;\n          }\n        }\n\n        if (this._heap[pos].val > this._heap[this.leftChildPos(pos)].val) {\n          this.swap(pos, this.leftChildPos(pos));\n          return this.minHeapify(this.leftChildPos(pos));\n        }\n      }\n\n      return;\n    };\n\n    this.minHeap = () => {\n      if (this._heap.length === 0) {\n        return;\n      }\n\n      for (let pos = parseInt(this._heap.length / 2) - 1; pos >= 0; pos--) {\n        this.minHeapify(pos);\n      }\n\n      return;\n    };\n\n    if (!heap) {\n      this._heap = []; //build min-heap\n\n      this.minHeap();\n      return;\n    }\n\n    if (!heap.length) {\n      this._heap = [];\n\n      this._heap.push(heap); //build min-heap\n\n\n      this.minHeap();\n      return;\n    }\n\n    this._heap = heap; //build min-heap\n\n    this.minHeap();\n    console.log(this._heap);\n    return;\n  }\n\n}\n\nexport default MinHeap;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Algorithms/MinHeap.js"],"names":["MinHeap","constructor","heap","getHeap","_heap","parentPos","pos","parseInt","leftChildPos","rightChildPos","insert","val","push","length","swap","peek","isEmpty","extract","minHeap","point","min","shift","unshift","pop","minHeapify","find","i","delete","tmp","pos1","pos2","size","toString","console","log"],"mappings":"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","sourcesContent":["class MinHeap{\n    constructor(heap){\n        if(!heap){\n            this._heap = [];\n\n            //build min-heap\n            this.minHeap();\n\n            return;\n        }\n\n        if(!heap.length){\n            this._heap = [];\n            this._heap.push(heap);\n\n            //build min-heap\n            this.minHeap();\n\n            return;  \n        }\n\n        this._heap = heap;\n\n        //build min-heap\n        this.minHeap();\n        console.log(this._heap);\n        \n        return;\n    }\n\n    getHeap = () => {\n        return this._heap;\n    }\n\n    parentPos = (pos) => {\n        return parseInt((pos - 1) / 2);\n    }\n\n    leftChildPos = (pos) => {\n        return parseInt((2 * pos) + 1);\n    }\n\n    rightChildPos = (pos) => {\n        return parseInt((2 * pos) + 2);\n    }\n\n    insert = (val) => {\n        this._heap.push(val);\n\n        let pos = this._heap.length-1;\n\n        if(this._heap.length <= 1){\n            return;\n        }\n\n        while(this.parentPos(pos) >= 0 && this._heap[pos].val < this._heap[this.parentPos(pos)].val){\n            this.swap(pos, this.parentPos(pos));\n\n            pos = this.parentPos(pos);\n        }\n\n        return;\n    }\n\n    peek = () => {\n        if(this.isEmpty()){\n            return;\n        }\n        \n        return this._heap[0];\n    }\n\n    extract = () => {\n        if(this._heap.length === 0){\n            return;\n        }\n\n        if(this.minHeap[0].point.length > 1){\n            \n        }\n\n        const min = this._heap.shift();\n        this._heap.unshift(this._heap[this._heap.length-1]);\n        this._heap.pop();\n\n        if(this._heap.length <= 1){\n            return;\n        };\n\n        this.minHeapify(0);\n\n        return min;\n    }\n\n    find = (val) => {\n        for(let i = 0; i < this._heap.length; i++){\n            if(this._heap[i].val === val){\n                return i;\n            }\n        }\n\n        return;\n    }\n\n    delete = (val) => {\n        for(let i = 0; i < this._heap.length; i++){\n            if(this._heap[i].val === val){\n                if(this._heap.length === 1){\n                    this._heap.pop();\n\n                    return;\n                }\n\n                const tmp = this._heap[i];\n\n                this._heap[i] = this._heap[this._heap.length-1];\n                this._heap[this._heap.length-1] = tmp;\n                this._heap.pop()\n\n                return this.minHeapify(i);\n            }\n        }\n\n        return;\n    }\n\n    swap = (pos1, pos2) => {\n        const tmp = this._heap[pos1];\n        \n        this._heap[pos1] = this._heap[pos2];\n        this._heap[pos2] = tmp;\n\n        return;\n    }\n\n    isEmpty = () => {\n        if(this._heap.length === 0){\n            return true;\n        }\n\n        return false;\n    }\n\n    size = () => {\n        return this._heap.length.toString();\n    }\n\n    minHeapify = (pos) => {\n        if(this.leftChildPos(pos) < this._heap.length){\n            if(this.rightChildPos(pos) < this._heap.length){\n                if(this._heap[pos].val > this._heap[this.leftChildPos(pos)].val ||  this._heap[pos].val > this._heap[this.rightChildPos(pos)].val){\n                    if(this._heap[this.leftChildPos(pos)].val < this._heap[this.rightChildPos(pos)].val){\n                        this.swap(pos, this.leftChildPos(pos));\n                        return this.minHeapify(this.leftChildPos(pos));\n                    }\n        \n                    this.swap(pos, this.rightChildPos(pos));\n                    return this.minHeapify(this.rightChildPos(pos));;\n                }\n            }\n\n            if(this._heap[pos].val > this._heap[this.leftChildPos(pos)].val){\n                this.swap(pos, this.leftChildPos(pos));\n                return this.minHeapify(this.leftChildPos(pos)); \n            }\n        }\n        \n        return;\n    }\n\n    minHeap = () => {\n        if(this._heap.length === 0){\n            return;\n        }\n\n        for(let pos = parseInt(this._heap.length/2)-1; pos >= 0; pos--){\n            this.minHeapify(pos);\n        }\n\n        return;\n    }\n}\n\nexport default MinHeap;"]},"metadata":{},"sourceType":"module"}