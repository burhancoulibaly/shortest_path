{"ast":null,"code":"function AStar(rows, cols, gridMap) {\n  let startPoint = null;\n  let wallPoints = [];\n  let endPoints = [];\n  gridMap.map(square => {\n    if (square.val && square.type === \"start\") {\n      // console.log(square);\n      startPoint = square;\n      return null;\n    }\n\n    if (square.val && square.type === \"wall\") {\n      // console.log(square);\n      wallPoints.push(square);\n      return null;\n    }\n\n    if (square.val && square.type === \"end\") {\n      // console.log(square);\n      endPoints.push(square);\n      return null;\n    }\n\n    return null;\n  });\n\n  if (!startPoint || !endPoints) {\n    console.log(\"Map must have a start point, and an end point\");\n    return \"Map must have a start point, and an end point\";\n  }\n\n  console.log(startPoint, wallPoints, endPoints);\n}\n\nclass MinHeap {\n  constructor(heap = null) {\n    this.getParent = pos => {\n      return parseInt((pos - 1) / 2);\n    };\n\n    this.getLeftChild = pos => {\n      return parseInt(2 * pos + 1);\n    };\n\n    this.getRightChild = pos => {\n      return parseInt(2 * pos + 2);\n    };\n\n    this.insert = () => {};\n\n    this.extract = () => {};\n\n    this.find = () => {};\n\n    this.delete = () => {};\n\n    this.swap = () => {};\n\n    this.isEmpty = () => {};\n\n    this.size = () => {};\n\n    this.minHeapify = pos => {\n      if (this._heap[pos] > this._heap[this.getLeftChild(pos)] || this._heap[pos] > this._heap[this.getRightChild(pos)]) {\n        if (this._heap[this.getLeftChild(pos)] < this._heap[this.getRightChild(pos)]) {\n          this.swap(pos, leftChild(pos));\n          return this.minHeapify;\n        }\n      }\n    };\n\n    this.minHeap = () => {\n      if (this._heap.length == 0) {\n        return;\n      }\n\n      for (let pos = parseInt(this._heap.length / 2) - 1; pos >= 0; pos--) {\n        minHeapify(pos);\n      }\n    };\n\n    this._heap = heap; //build min-heap\n\n    this.minHeap();\n  }\n\n}\n\nexport default AStar;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Algorithms/AStar.js"],"names":["AStar","rows","cols","gridMap","startPoint","wallPoints","endPoints","map","square","val","type","push","console","log","MinHeap","constructor","heap","getParent","pos","parseInt","getLeftChild","getRightChild","insert","extract","find","delete","swap","isEmpty","size","minHeapify","_heap","leftChild","minHeap","length"],"mappings":"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","sourcesContent":["function AStar(rows, cols, gridMap){\n    let startPoint = null;\n    let wallPoints = [];\n    let endPoints = [];\n\n\n\n    gridMap.map((square) => {\n        if(square.val && square.type ===  \"start\"){\n            // console.log(square);\n            startPoint = square;\n\n            return null;\n        }\n\n        if(square.val && square.type === \"wall\"){\n            // console.log(square);\n            wallPoints.push(square);\n\n            return null;\n        }\n\n        if(square.val && square.type === \"end\"){\n            // console.log(square);\n            endPoints.push(square);\n\n            return null;\n        }\n\n        return null;\n    })\n\n    if(!startPoint || !endPoints){\n        console.log(\"Map must have a start point, and an end point\");\n        return \"Map must have a start point, and an end point\"; \n    }\n\n    console.log(startPoint, wallPoints, endPoints);\n\n\n}\n\nclass MinHeap{\n    constructor(heap=null){\n        this._heap = heap;\n\n        //build min-heap\n        this.minHeap();\n    }\n\n    getParent = (pos) => {\n        return parseInt((pos - 1) / 2);\n    }\n\n    getLeftChild = (pos) => {\n        return parseInt((2 * pos) + 1);\n    }\n\n    getRightChild = (pos) => {\n        return parseInt((2 * pos) + 2);\n    }\n\n    insert = () => {\n\n    }\n\n    extract = () => {\n        \n    }\n\n    find = () => {\n\n    }\n\n    delete = () => {\n\n    }\n\n    swap = () => {\n\n    }\n\n    isEmpty = () => {\n\n    }\n\n    size = () => {\n\n    }\n\n    minHeapify = (pos) => {\n        if(this._heap[pos] > this._heap[this.getLeftChild(pos)] || this._heap[pos] > this._heap[this.getRightChild(pos)]){\n            if(this._heap[this.getLeftChild(pos)] < this._heap[this.getRightChild(pos)]){\n                this.swap(pos, leftChild(pos));\n\n                return this.minHeapify\n            }\n        }\n    }\n\n    minHeap = () => {\n        if(this._heap.length == 0){\n            return;\n        }\n\n        for(let pos = parseInt(this._heap.length/2)-1; pos >= 0; pos--){\n            minHeapify(pos);\n        } \n    }\n}\n\nexport default AStar"]},"metadata":{},"sourceType":"module"}