{"ast":null,"code":"var _jsxFileName = \"/home/menekou/projects/react/shortest-path/react-frontend/src/Routes.js\";\nimport React, { useState, useMemo, useEffect } from \"react\";\nimport axios from \"axios\";\nimport apolloClient from './ApolloConfig';\nimport LoginPage from './Login Page/LoginPage';\nimport Home from './Home/Home';\nimport App from './App/App';\nimport { ApolloProvider } from '@apollo/client';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\nimport UserContext from './UserContext';\nimport RouteGuard from './RouteGuard';\nimport TopNav from \"./TopNav/TopNav\"; //Using containers so top nav is not rendered on login page\n\nconst LoginContainer = ({\n  user\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(RouteGuard, {\n    path: \"/login\",\n    component: LoginPage,\n    user: user,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }\n  }));\n};\n\nconst DefaultContainer = ({\n  user\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TopNav, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Redirect, {\n    to: \"/home\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 42\n    }\n  })), /*#__PURE__*/React.createElement(RouteGuard, {\n    path: \"/app\",\n    component: App,\n    user: user,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(RouteGuard, {\n    path: \"/home\",\n    component: Home,\n    user: user,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }));\n};\n\nconst logout = () => {\n  axios.get(\"http://localhost:3000/deleteRefreshToken\").then(response => {\n    updateUser(response.data);\n    return;\n  }).catch(error => {\n    console.log(error.data);\n    return;\n  });\n};\n\nfunction Routes() {\n  //Stores user data if user is logged in and null if user isn't logged in\n  const [user, setUser] = useState();\n  console.log(user); //Adds headers to every axios request(requests)\n\n  axios.interceptors.request.use(function (request) {\n    request.headers[\"Content-Type\"] = 'application/json; charset=utf-8';\n    request.headers[\"Accept\"] = 'application/json';\n    request.headers[\"authorization\"] = user ? `Bearer ${user.accessToken}` : \"\";\n    request.withCredentials = true;\n    return request;\n  }, function (error) {\n    return Promise.reject(error);\n  });\n  const value = useMemo(() => [user, setUser], [user, setUser]); //To make sure tokenRefresh attempt is only made once.\n\n  useEffect(() => {\n    const updateUser = userData => {\n      if (!userData.accessToken) {\n        setUser(null);\n        return;\n      }\n\n      setUser({\n        username: userData.username,\n        role: userData.role,\n        accessToken: userData.accessToken\n      });\n      return;\n    };\n\n    axios.get(\"http://localhost:3000/refreshToken\").then(response => {\n      updateUser(response.data);\n      return;\n    }).catch(error => {\n      console.log(error.data);\n      return;\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(Router, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(UserContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ApolloProvider, {\n    client: apolloClient,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/login\",\n    render: () => /*#__PURE__*/React.createElement(LoginContainer, {\n      user: user,\n      logout: logout,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 33\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    render: () => /*#__PURE__*/React.createElement(DefaultContainer, {\n      user: user,\n      logout: logout,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 33\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 25\n    }\n  })))));\n}\n\n;\nexport default Routes;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Routes.js"],"names":["React","useState","useMemo","useEffect","axios","apolloClient","LoginPage","Home","App","ApolloProvider","BrowserRouter","Router","Switch","Route","Redirect","UserContext","RouteGuard","TopNav","LoginContainer","user","DefaultContainer","logout","get","then","response","updateUser","data","catch","error","console","log","Routes","setUser","interceptors","request","use","headers","accessToken","withCredentials","Promise","reject","value","userData","username","role"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,OAA1B,EAAmCC,SAAnC,QAAoD,OAApD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,GAAP,MAAgB,WAAhB;AACA,SAASC,cAAT,QAA+B,gBAA/B;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,MAAlC,EAA0CC,KAA1C,EAAiDC,QAAjD,QAAiE,kBAAjE;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,MAAP,MAAmB,iBAAnB,C,CAEA;;AACA,MAAMC,cAAc,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAY;AAC/B,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,UAAD;AACI,IAAA,IAAI,EAAC,QADT;AAEI,IAAA,SAAS,EAAEb,SAFf;AAGI,IAAA,IAAI,EAAEa,IAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AASH,CAVD;;AAYA,MAAMC,gBAAgB,GAAG,CAAC;AAACD,EAAAA;AAAD,CAAD,KAAY;AACjC,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAE,IAAd;AAAoB,IAAA,IAAI,EAAC,GAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA6B,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA7B,CAFJ,eAGI,oBAAC,UAAD;AACI,IAAA,IAAI,EAAC,MADT;AAEI,IAAA,SAAS,EAAEX,GAFf;AAGI,IAAA,IAAI,EAAEW,IAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,eAQI,oBAAC,UAAD;AACI,IAAA,IAAI,EAAC,OADT;AAEI,IAAA,SAAS,EAAEZ,IAFf;AAGI,IAAA,IAAI,EAAEY,IAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARJ,CADJ;AAgBH,CAjBD;;AAmBA,MAAME,MAAM,GAAG,MAAM;AACjBjB,EAAAA,KAAK,CAACkB,GAAN,CAAU,0CAAV,EACWC,IADX,CACiBC,QAAD,IAAc;AAChBC,IAAAA,UAAU,CAACD,QAAQ,CAACE,IAAV,CAAV;AAEA;AACH,GALX,EAMWC,KANX,CAMkBC,KAAD,IAAW;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACF,IAAlB;AACC;AACJ,GATX;AAUH,CAXD;;AAaA,SAASK,MAAT,GAAkB;AACd;AACA,QAAM,CAACZ,IAAD,EAAOa,OAAP,IAAkB/B,QAAQ,EAAhC;AAEA4B,EAAAA,OAAO,CAACC,GAAR,CAAYX,IAAZ,EAJc,CAMd;;AACAf,EAAAA,KAAK,CAAC6B,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACI,UAASD,OAAT,EAAkB;AACdA,IAAAA,OAAO,CAACE,OAAR,CAAgB,cAAhB,IAAkC,iCAAlC;AACAF,IAAAA,OAAO,CAACE,OAAR,CAAgB,QAAhB,IAA4B,kBAA5B;AACAF,IAAAA,OAAO,CAACE,OAAR,CAAgB,eAAhB,IAAmCjB,IAAI,GAAI,UAASA,IAAI,CAACkB,WAAY,EAA9B,GAAkC,EAAzE;AACAH,IAAAA,OAAO,CAACI,eAAR,GAA0B,IAA1B;AACA,WAAOJ,OAAP;AACH,GAPL,EAQI,UAASN,KAAT,EAAgB;AACZ,WAAOW,OAAO,CAACC,MAAR,CAAeZ,KAAf,CAAP;AACH,GAVL;AAaA,QAAMa,KAAK,GAAGvC,OAAO,CAAC,MAAO,CAACiB,IAAD,EAAOa,OAAP,CAAR,EAA0B,CAACb,IAAD,EAAOa,OAAP,CAA1B,CAArB,CApBc,CAsBd;;AACA7B,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMsB,UAAU,GAAIiB,QAAD,IAAc;AAC7B,UAAG,CAACA,QAAQ,CAACL,WAAb,EAAyB;AACrBL,QAAAA,OAAO,CAAC,IAAD,CAAP;AAEA;AACH;;AAEDA,MAAAA,OAAO,CAAC;AACNW,QAAAA,QAAQ,EAAED,QAAQ,CAACC,QADb;AAENC,QAAAA,IAAI,EAAEF,QAAQ,CAACE,IAFT;AAGNP,QAAAA,WAAW,EAAEK,QAAQ,CAACL;AAHhB,OAAD,CAAP;AAMA;AACH,KAdD;;AAgBAjC,IAAAA,KAAK,CAACkB,GAAN,CAAU,oCAAV,EACKC,IADL,CACWC,QAAD,IAAc;AAChBC,MAAAA,UAAU,CAACD,QAAQ,CAACE,IAAV,CAAV;AAEA;AACH,KALL,EAMKC,KANL,CAMYC,KAAD,IAAW;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACF,IAAlB;AACC;AACJ,KATL;AAUH,GA3BQ,EA2BN,EA3BM,CAAT;AA6BA,sBACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEe,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,cAAD;AAAgB,IAAA,MAAM,EAAEpC,YAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEI,oBAAC,KAAD;AACI,IAAA,KAAK,MADT;AAEI,IAAA,IAAI,EAAC,QAFT;AAGI,IAAA,MAAM,EAAE,mBACJ,oBAAC,cAAD;AACI,MAAA,IAAI,EAAEc,IADV;AAEI,MAAA,MAAM,EAAEE,MAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,eAYI,oBAAC,KAAD;AACI,IAAA,MAAM,EAAE,mBACJ,oBAAC,gBAAD;AACI,MAAA,IAAI,EAAEF,IADV;AAEI,MAAA,MAAM,EAAEE,MAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZJ,CADJ,CADJ,CADJ,CADJ;AA6BH;;AAAA;AACD,eAAeU,MAAf","sourcesContent":["import React, { useState, useMemo, useEffect } from \"react\";\nimport axios from \"axios\";\nimport apolloClient from './ApolloConfig'\nimport LoginPage from './Login Page/LoginPage';\nimport Home from './Home/Home';\nimport App from './App/App';\nimport { ApolloProvider } from '@apollo/client';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\nimport UserContext from './UserContext';\nimport RouteGuard from './RouteGuard';\nimport TopNav from \"./TopNav/TopNav\";\n\n//Using containers so top nav is not rendered on login page\nconst LoginContainer = ({user}) => {\n    return(\n        <div>\n            <RouteGuard \n                path=\"/login\" \n                component={LoginPage}\n                user={user}\n            />\n        </div>\n    )\n}\n\nconst DefaultContainer = ({user}) => {\n    return(\n        <div>\n            <TopNav />\n            <Route exact={true} path=\"/\"><Redirect to=\"/home\"/></Route>\n            <RouteGuard \n                path='/app' \n                component={App} \n                user={user} \n            />\n            <RouteGuard \n                path='/home' \n                component={Home} \n                user={user} \n            />\n        </div>\n    )\n}\n\nconst logout = () => {\n    axios.get(\"http://localhost:3000/deleteRefreshToken\")\n              .then((response) => {\n                  updateUser(response.data);\n  \n                  return;\n              })\n              .catch((error) => {\n                  console.log(error.data);\n                   return;\n              });\n}\n\nfunction Routes() {\n    //Stores user data if user is logged in and null if user isn't logged in\n    const [user, setUser] = useState();\n\n    console.log(user);\n\n    //Adds headers to every axios request(requests)\n    axios.interceptors.request.use(\n        function(request) {\n            request.headers[\"Content-Type\"] = 'application/json; charset=utf-8';\n            request.headers[\"Accept\"] = 'application/json';\n            request.headers[\"authorization\"] = user ? `Bearer ${user.accessToken}` : \"\";\n            request.withCredentials = true;\n            return request;\n        },\n        function(error) {\n            return Promise.reject(error);\n        }\n    );\n\n    const value = useMemo(() => ([user, setUser]), [user, setUser]);\n\n    //To make sure tokenRefresh attempt is only made once.\n    useEffect(() => {\n        const updateUser = (userData) => {\n            if(!userData.accessToken){\n                setUser(null);\n\n                return;\n            }\n\n            setUser({\n              username: userData.username,\n              role: userData.role,\n              accessToken: userData.accessToken\n            })\n        \n            return;\n        }\n\n        axios.get(\"http://localhost:3000/refreshToken\")\n            .then((response) => {\n                updateUser(response.data);\n\n                return;\n            })\n            .catch((error) => {\n                console.log(error.data);\n                 return;\n            });\n    }, []);\n\n    return (\n        <Router>\n            <UserContext.Provider value={value}>\n                <ApolloProvider client={apolloClient}>\n                    <Switch>\n                        {/* Render is used to pass props to components rendered by React Router */}\n                        <Route\n                            exact \n                            path=\"/login\" \n                            render={() => (\n                                <LoginContainer\n                                    user={user}\n                                    logout={logout}\n                                />\n                            )}\n                        />\n                        <Route\n                            render={() => (\n                                <DefaultContainer\n                                    user={user}\n                                    logout={logout}\n                                />\n                            )}\n                        />\n                    </Switch>\n                </ApolloProvider>\n            </UserContext.Provider>\n        </Router>\n    );\n};\nexport default Routes;"]},"metadata":{},"sourceType":"module"}