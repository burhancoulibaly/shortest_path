{"ast":null,"code":"import FibonacciHeapNode from '../Algorithms/FibonacciHeapNode';\nimport Queue from '../Algorithms/Queue';\nconst Node = FibonacciHeapNode;\n\nfunction getIndex(x, y, cols) {\n  return x + y * cols;\n}\n\nfunction getPoints(gridMap) {\n  let startPoint = null;\n  let endPoints = [];\n  gridMap.map(square => {\n    if (square.val && square.type === \"start\") {\n      // console.log(square);\n      startPoint = square;\n      return null;\n    }\n\n    if (square.val && square.type === \"end\") {\n      // console.log(square);\n      endPoints.push(square);\n      return null;\n    }\n\n    return null;\n  });\n  return [startPoint, endPoints];\n}\n\nfunction getNeighbors(current, rows, cols, node) {\n  //Point                                 Index\n  // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n  // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n  // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n  // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n  // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n  // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n  // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n  // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n  const neighbors = new Array(8);\n\n  if (current.getPoint().x > 0) {\n    const left = getIndex(current.getPoint().x - 1, current.getPoint().y, cols);\n\n    if (node[left].node.getPoint().type !== \"wall\") {\n      neighbors[0] = node[left].node;\n    }\n  }\n\n  if (current.getPoint().x < cols - 1) {\n    const right = getIndex(current.getPoint().x + 1, current.getPoint().y, cols);\n\n    if (node[right].node.getPoint().type !== \"wall\") {\n      neighbors[1] = node[right].node;\n    }\n  }\n\n  if (current.getPoint().y > 0) {\n    const up = getIndex(current.getPoint().x, current.getPoint().y - 1, cols);\n\n    if (node[up].node.getPoint().type !== \"wall\") {\n      neighbors[2] = node[up].node;\n    }\n  }\n\n  if (current.getPoint().y < rows - 1) {\n    const down = getIndex(current.getPoint().x, current.getPoint().y + 1, cols);\n\n    if (node[down].node.getPoint().type !== \"wall\") {\n      neighbors[3] = node[down].node;\n    }\n  }\n\n  if (current.getPoint().x > 0 && current.getPoint().y > 0) {\n    const topLeft = getIndex(current.getPoint().x - 1, current.getPoint().y - 1, cols);\n\n    if (node[topLeft].node.getPoint().type !== \"wall\") {\n      neighbors[4] = node[topLeft].node;\n    }\n  }\n\n  if (current.getPoint().x < cols - 1 && current.getPoint().y > 0) {\n    const topRight = getIndex(current.getPoint().x + 1, current.getPoint().y - 1, cols);\n\n    if (node[topRight].node.getPoint().type !== \"wall\") {\n      neighbors[5] = node[topRight].node;\n    }\n  }\n\n  if (current.getPoint().x > 0 && current.getPoint().y < rows - 1) {\n    const bottomLeft = getIndex(current.getPoint().x - 1, current.getPoint().y + 1, cols);\n\n    if (node[bottomLeft].node.getPoint().type !== \"wall\") {\n      neighbors[6] = node[bottomLeft].node;\n    }\n  }\n\n  if (current.getPoint().x < cols - 1 && current.getPoint().y < rows - 1) {\n    const bottomRight = getIndex(current.getPoint().x + 1, current.getPoint().y + 1, cols);\n\n    if (node[bottomRight].node.getPoint().type !== \"wall\") {\n      neighbors[7] = node[bottomRight].node;\n    }\n  }\n\n  return neighbors;\n}\n\nfunction BFS(rows, cols, gridMap, memState, setState) {\n  const [startPoint, endPoints] = getPoints(gridMap);\n  const queue = new Queue();\n  const cameFrom = {};\n  const node = {};\n  const states = []; //TODO: Bug, clears grid but then returns it to its previous state\n\n  const newState = { ...memState,\n    grid: new Array(rows * cols).fill({\n      val: false,\n      type: null\n    }).map((square, i) => {\n      return { ...square,\n        x: i % cols,\n        y: Math.abs((i - i % cols) / cols)\n      };\n    })\n  };\n  states.push(newState);\n  let goal = endPoints[0];\n\n  if (!startPoint || !endPoints) {\n    console.log(\"Map must have a start point, and an end point\");\n    return \"Map must have a start point, and an end point\";\n  }\n\n  console.log(queue);\n  return;\n}\n\nexport default BFS;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Algorithms/BFS.js"],"names":["FibonacciHeapNode","Queue","Node","getIndex","x","y","cols","getPoints","gridMap","startPoint","endPoints","map","square","val","type","push","getNeighbors","current","rows","node","neighbors","Array","getPoint","left","right","up","down","topLeft","topRight","bottomLeft","bottomRight","BFS","memState","setState","queue","cameFrom","states","newState","grid","fill","i","Math","abs","goal","console","log"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,iCAA9B;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AAEA,MAAMC,IAAI,GAAGF,iBAAb;;AAEA,SAASG,QAAT,CAAkBC,CAAlB,EAAqBC,CAArB,EAAwBC,IAAxB,EAA6B;AACzB,SAAQF,CAAC,GAAIC,CAAC,GAAGC,IAAjB;AACH;;AAED,SAASC,SAAT,CAAmBC,OAAnB,EAA2B;AACvB,MAAIC,UAAU,GAAG,IAAjB;AACA,MAAIC,SAAS,GAAG,EAAhB;AAEAF,EAAAA,OAAO,CAACG,GAAR,CAAaC,MAAD,IAAY;AACpB,QAAGA,MAAM,CAACC,GAAP,IAAcD,MAAM,CAACE,IAAP,KAAiB,OAAlC,EAA0C;AACtC;AACAL,MAAAA,UAAU,GAAGG,MAAb;AAEA,aAAO,IAAP;AACH;;AAED,QAAGA,MAAM,CAACC,GAAP,IAAcD,MAAM,CAACE,IAAP,KAAgB,KAAjC,EAAuC;AACnC;AACAJ,MAAAA,SAAS,CAACK,IAAV,CAAeH,MAAf;AAEA,aAAO,IAAP;AACH;;AAED,WAAO,IAAP;AACH,GAhBD;AAkBA,SAAO,CAACH,UAAD,EAAaC,SAAb,CAAP;AACH;;AAGD,SAASM,YAAT,CAAsBC,OAAtB,EAA+BC,IAA/B,EAAqCZ,IAArC,EAA2Ca,IAA3C,EAAgD;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,QAAMC,SAAS,GAAG,IAAIC,KAAJ,CAAU,CAAV,CAAlB;;AAEA,MAAGJ,OAAO,CAACK,QAAR,GAAmBlB,CAAnB,GAAuB,CAA1B,EAA4B;AACxB,UAAMmB,IAAI,GAAGpB,QAAQ,CAAEc,OAAO,CAACK,QAAR,GAAmBlB,CAAnB,GAAqB,CAAvB,EAA4Ba,OAAO,CAACK,QAAR,GAAmBjB,CAA/C,EAAmDC,IAAnD,CAArB;;AAEA,QAAGa,IAAI,CAACI,IAAD,CAAJ,CAAWJ,IAAX,CAAgBG,QAAhB,GAA2BR,IAA3B,KAAoC,MAAvC,EAA8C;AAC1CM,MAAAA,SAAS,CAAC,CAAD,CAAT,GAAeD,IAAI,CAACI,IAAD,CAAJ,CAAWJ,IAA1B;AACH;AACJ;;AACD,MAAGF,OAAO,CAACK,QAAR,GAAmBlB,CAAnB,GAAuBE,IAAI,GAAC,CAA/B,EAAiC;AAC7B,UAAMkB,KAAK,GAAGrB,QAAQ,CAAEc,OAAO,CAACK,QAAR,GAAmBlB,CAAnB,GAAqB,CAAvB,EAA4Ba,OAAO,CAACK,QAAR,GAAmBjB,CAA/C,EAAmDC,IAAnD,CAAtB;;AAEA,QAAGa,IAAI,CAACK,KAAD,CAAJ,CAAYL,IAAZ,CAAiBG,QAAjB,GAA4BR,IAA5B,KAAqC,MAAxC,EAA+C;AAC3CM,MAAAA,SAAS,CAAC,CAAD,CAAT,GAAeD,IAAI,CAACK,KAAD,CAAJ,CAAYL,IAA3B;AACH;AACJ;;AACD,MAAGF,OAAO,CAACK,QAAR,GAAmBjB,CAAnB,GAAuB,CAA1B,EAA4B;AACxB,UAAMoB,EAAE,GAAGtB,QAAQ,CAAEc,OAAO,CAACK,QAAR,GAAmBlB,CAArB,EAA0Ba,OAAO,CAACK,QAAR,GAAmBjB,CAAnB,GAAqB,CAA/C,EAAmDC,IAAnD,CAAnB;;AAEA,QAAGa,IAAI,CAACM,EAAD,CAAJ,CAASN,IAAT,CAAcG,QAAd,GAAyBR,IAAzB,KAAkC,MAArC,EAA4C;AACxCM,MAAAA,SAAS,CAAC,CAAD,CAAT,GAAeD,IAAI,CAACM,EAAD,CAAJ,CAASN,IAAxB;AACH;AACJ;;AACD,MAAGF,OAAO,CAACK,QAAR,GAAmBjB,CAAnB,GAAuBa,IAAI,GAAC,CAA/B,EAAiC;AAC7B,UAAMQ,IAAI,GAAGvB,QAAQ,CAAEc,OAAO,CAACK,QAAR,GAAmBlB,CAArB,EAA0Ba,OAAO,CAACK,QAAR,GAAmBjB,CAAnB,GAAqB,CAA/C,EAAmDC,IAAnD,CAArB;;AAEA,QAAGa,IAAI,CAACO,IAAD,CAAJ,CAAWP,IAAX,CAAgBG,QAAhB,GAA2BR,IAA3B,KAAoC,MAAvC,EAA8C;AAC1CM,MAAAA,SAAS,CAAC,CAAD,CAAT,GAAeD,IAAI,CAACO,IAAD,CAAJ,CAAWP,IAA1B;AACH;AACJ;;AACD,MAAGF,OAAO,CAACK,QAAR,GAAmBlB,CAAnB,GAAuB,CAAvB,IAA4Ba,OAAO,CAACK,QAAR,GAAmBjB,CAAnB,GAAuB,CAAtD,EAAwD;AACpD,UAAMsB,OAAO,GAAGxB,QAAQ,CAAEc,OAAO,CAACK,QAAR,GAAmBlB,CAAnB,GAAqB,CAAvB,EAA4Ba,OAAO,CAACK,QAAR,GAAmBjB,CAAnB,GAAqB,CAAjD,EAAqDC,IAArD,CAAxB;;AAEA,QAAGa,IAAI,CAACQ,OAAD,CAAJ,CAAcR,IAAd,CAAmBG,QAAnB,GAA8BR,IAA9B,KAAuC,MAA1C,EAAiD;AAC7CM,MAAAA,SAAS,CAAC,CAAD,CAAT,GAAeD,IAAI,CAACQ,OAAD,CAAJ,CAAcR,IAA7B;AACH;AACJ;;AACD,MAAGF,OAAO,CAACK,QAAR,GAAmBlB,CAAnB,GAAuBE,IAAI,GAAC,CAA5B,IAAiCW,OAAO,CAACK,QAAR,GAAmBjB,CAAnB,GAAuB,CAA3D,EAA6D;AACzD,UAAMuB,QAAQ,GAAGzB,QAAQ,CAAEc,OAAO,CAACK,QAAR,GAAmBlB,CAAnB,GAAqB,CAAvB,EAA4Ba,OAAO,CAACK,QAAR,GAAmBjB,CAAnB,GAAqB,CAAjD,EAAqDC,IAArD,CAAzB;;AAEA,QAAGa,IAAI,CAACS,QAAD,CAAJ,CAAeT,IAAf,CAAoBG,QAApB,GAA+BR,IAA/B,KAAwC,MAA3C,EAAkD;AAC9CM,MAAAA,SAAS,CAAC,CAAD,CAAT,GAAeD,IAAI,CAACS,QAAD,CAAJ,CAAeT,IAA9B;AACH;AACJ;;AACD,MAAGF,OAAO,CAACK,QAAR,GAAmBlB,CAAnB,GAAuB,CAAvB,IAA4Ba,OAAO,CAACK,QAAR,GAAmBjB,CAAnB,GAAuBa,IAAI,GAAC,CAA3D,EAA6D;AACzD,UAAMW,UAAU,GAAI1B,QAAQ,CAAEc,OAAO,CAACK,QAAR,GAAmBlB,CAAnB,GAAqB,CAAvB,EAA4Ba,OAAO,CAACK,QAAR,GAAmBjB,CAAnB,GAAqB,CAAjD,EAAqDC,IAArD,CAA5B;;AAEA,QAAGa,IAAI,CAACU,UAAD,CAAJ,CAAiBV,IAAjB,CAAsBG,QAAtB,GAAiCR,IAAjC,KAA0C,MAA7C,EAAoD;AAChDM,MAAAA,SAAS,CAAC,CAAD,CAAT,GAAeD,IAAI,CAACU,UAAD,CAAJ,CAAiBV,IAAhC;AACH;AACJ;;AACD,MAAGF,OAAO,CAACK,QAAR,GAAmBlB,CAAnB,GAAuBE,IAAI,GAAC,CAA5B,IAAiCW,OAAO,CAACK,QAAR,GAAmBjB,CAAnB,GAAuBa,IAAI,GAAC,CAAhE,EAAkE;AAC9D,UAAMY,WAAW,GAAG3B,QAAQ,CAAEc,OAAO,CAACK,QAAR,GAAmBlB,CAAnB,GAAqB,CAAvB,EAA4Ba,OAAO,CAACK,QAAR,GAAmBjB,CAAnB,GAAqB,CAAjD,EAAqDC,IAArD,CAA5B;;AAEA,QAAGa,IAAI,CAACW,WAAD,CAAJ,CAAkBX,IAAlB,CAAuBG,QAAvB,GAAkCR,IAAlC,KAA2C,MAA9C,EAAqD;AACjDM,MAAAA,SAAS,CAAC,CAAD,CAAT,GAAeD,IAAI,CAACW,WAAD,CAAJ,CAAkBX,IAAjC;AACH;AACJ;;AAED,SAAOC,SAAP;AACH;;AAED,SAASW,GAAT,CAAab,IAAb,EAAmBZ,IAAnB,EAAyBE,OAAzB,EAAkCwB,QAAlC,EAA4CC,QAA5C,EAAqD;AACjD,QAAM,CAACxB,UAAD,EAAaC,SAAb,IAA0BH,SAAS,CAACC,OAAD,CAAzC;AACA,QAAM0B,KAAK,GAAG,IAAIjC,KAAJ,EAAd;AACA,QAAMkC,QAAQ,GAAG,EAAjB;AACA,QAAMhB,IAAI,GAAG,EAAb;AACA,QAAMiB,MAAM,GAAG,EAAf,CALiD,CAOjD;;AACA,QAAMC,QAAQ,GAAG,EACb,GAAGL,QADU;AAEbM,IAAAA,IAAI,EAAE,IAAIjB,KAAJ,CAAUH,IAAI,GAACZ,IAAf,EAAqBiC,IAArB,CAA0B;AAAC1B,MAAAA,GAAG,EAAE,KAAN;AAAaC,MAAAA,IAAI,EAAE;AAAnB,KAA1B,EAAoDH,GAApD,CAAwD,CAACC,MAAD,EAAS4B,CAAT,KAAe;AACzE,aAAO,EACH,GAAG5B,MADA;AAEHR,QAAAA,CAAC,EAAEoC,CAAC,GAAGlC,IAFJ;AAGHD,QAAAA,CAAC,EAAEoC,IAAI,CAACC,GAAL,CAAS,CAACF,CAAC,GAAIA,CAAC,GAAGlC,IAAV,IAAmBA,IAA5B;AAHA,OAAP;AAKH,KANK;AAFO,GAAjB;AAUA8B,EAAAA,MAAM,CAACrB,IAAP,CAAYsB,QAAZ;AAEA,MAAIM,IAAI,GAAGjC,SAAS,CAAC,CAAD,CAApB;;AAEA,MAAG,CAACD,UAAD,IAAe,CAACC,SAAnB,EAA6B;AACzBkC,IAAAA,OAAO,CAACC,GAAR,CAAY,+CAAZ;AACA,WAAO,+CAAP;AACH;;AAGDD,EAAAA,OAAO,CAACC,GAAR,CAAYX,KAAZ;AACA;AACH;;AAED,eAAeH,GAAf","sourcesContent":["import FibonacciHeapNode from '../Algorithms/FibonacciHeapNode';\nimport Queue from '../Algorithms/Queue'\n\nconst Node = FibonacciHeapNode;\n\nfunction getIndex(x, y, cols){\n    return (x + (y * cols));\n}\n\nfunction getPoints(gridMap){\n    let startPoint = null;\n    let endPoints = [];\n    \n    gridMap.map((square) => {\n        if(square.val && square.type ===  \"start\"){\n            // console.log(square);\n            startPoint = square;\n\n            return null;\n        }\n\n        if(square.val && square.type === \"end\"){\n            // console.log(square);\n            endPoints.push(square);\n\n            return null;\n        }\n\n        return null;\n    })\n\n    return [startPoint, endPoints];\n}\n\n\nfunction getNeighbors(current, rows, cols, node){\n    //Point                                 Index\n    // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n    // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n    // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n    // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n    // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n    // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n    // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n    // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n\n    const neighbors = new Array(8);\n    \n    if(current.getPoint().x > 0){\n        const left = getIndex((current.getPoint().x-1), (current.getPoint().y), cols);\n\n        if(node[left].node.getPoint().type !== \"wall\"){\n            neighbors[0] = node[left].node;   \n        }\n    }\n    if(current.getPoint().x < cols-1){\n        const right = getIndex((current.getPoint().x+1), (current.getPoint().y), cols);\n\n        if(node[right].node.getPoint().type !== \"wall\"){\n            neighbors[1] = node[right].node;   \n        }\n    }\n    if(current.getPoint().y > 0){\n        const up = getIndex((current.getPoint().x), (current.getPoint().y-1), cols);\n\n        if(node[up].node.getPoint().type !== \"wall\"){\n            neighbors[2] = node[up].node;   \n        }\n    }\n    if(current.getPoint().y < rows-1){\n        const down = getIndex((current.getPoint().x), (current.getPoint().y+1), cols);\n\n        if(node[down].node.getPoint().type !== \"wall\"){\n            neighbors[3] = node[down].node;   \n        }\n    }\n    if(current.getPoint().x > 0 && current.getPoint().y > 0){\n        const topLeft = getIndex((current.getPoint().x-1), (current.getPoint().y-1), cols);\n\n        if(node[topLeft].node.getPoint().type !== \"wall\"){\n            neighbors[4] = node[topLeft].node;   \n        }\n    }\n    if(current.getPoint().x < cols-1 && current.getPoint().y > 0){\n        const topRight = getIndex((current.getPoint().x+1), (current.getPoint().y-1), cols);\n\n        if(node[topRight].node.getPoint().type !== \"wall\"){\n            neighbors[5] = node[topRight].node;            \n        }\n    }\n    if(current.getPoint().x > 0 && current.getPoint().y < rows-1){\n        const bottomLeft  = getIndex((current.getPoint().x-1), (current.getPoint().y+1), cols);\n\n        if(node[bottomLeft].node.getPoint().type !== \"wall\"){\n            neighbors[6] = node[bottomLeft].node;   \n        }\n    }\n    if(current.getPoint().x < cols-1 && current.getPoint().y < rows-1){\n        const bottomRight = getIndex((current.getPoint().x+1), (current.getPoint().y+1), cols);\n\n        if(node[bottomRight].node.getPoint().type !== \"wall\"){\n            neighbors[7] = node[bottomRight].node;   \n        }\n    }\n\n    return neighbors;\n}\n\nfunction BFS(rows, cols, gridMap, memState, setState){\n    const [startPoint, endPoints] = getPoints(gridMap);\n    const queue = new Queue();\n    const cameFrom = {};\n    const node = {};\n    const states = [];\n\n    //TODO: Bug, clears grid but then returns it to its previous state\n    const newState = {\n        ...memState,\n        grid: new Array(rows*cols).fill({val: false, type: null}).map((square, i) => {\n            return {\n                ...square,\n                x: i % cols,\n                y: Math.abs((i - (i % cols)) / cols)\n            }\n        })\n    }\n    states.push(newState);\n\n    let goal = endPoints[0];\n\n    if(!startPoint || !endPoints){\n        console.log(\"Map must have a start point, and an end point\");\n        return \"Map must have a start point, and an end point\"; \n    }\n\n    \n    console.log(queue);\n    return;\n}\n\nexport default BFS;"]},"metadata":{},"sourceType":"module"}