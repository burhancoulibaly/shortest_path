{"ast":null,"code":"function AStar(rows, cols, gridMap) {\n  let startPoint = null;\n  let wallPoints = [];\n  let endPoints = [];\n  gridMap.map(square => {\n    if (square.val && square.type === \"start\") {\n      // console.log(square);\n      startPoint = square;\n      return null;\n    }\n\n    if (square.val && square.type === \"wall\") {\n      // console.log(square);\n      wallPoints.push(square);\n      return null;\n    }\n\n    if (square.val && square.type === \"end\") {\n      // console.log(square);\n      endPoints.push(square);\n      return null;\n    }\n\n    return null;\n  });\n\n  if (!startPoint || !endPoints) {\n    console.log(\"Map must have a start point, and an end point\");\n    return \"Map must have a start point, and an end point\";\n  }\n\n  console.log(startPoint, wallPoints, endPoints); // const heap = new MinHeap();\n\n  const heap = new MinHeap([12, 11, 5, 9, 7, 2, 3, 1, 4, 8, 6, 10]); // const arr = [12,11,5,9,7,2,3,1,4,8,6,10]\n  // arr.map(val => {\n  //     heap.insert(val);\n  //     return null;\n  // })\n\n  console.log(heap.getHeap().toString());\n  arr.map(val => {\n    heap.extract();\n    return null;\n  });\n  console.log(heap.getHeap().toString());\n}\n\nclass MinHeap {\n  constructor(heap = []) {\n    this.getHeap = () => {\n      return this._heap;\n    };\n\n    this.parentPos = pos => {\n      return parseInt((pos - 1) / 2);\n    };\n\n    this.leftChildPos = pos => {\n      return parseInt(2 * pos + 1);\n    };\n\n    this.rightChildPos = pos => {\n      return parseInt(2 * pos + 2);\n    };\n\n    this.insert = val => {\n      this._heap.push(val);\n\n      let pos = this._heap.length - 1;\n\n      if (this._heap.length <= 1) {\n        return;\n      }\n\n      while (this.parentPos(pos) >= 0 && this._heap[pos] < this._heap[this.parentPos(pos)]) {\n        this.swap(pos, this.parentPos(pos));\n        pos = this.parentPos(pos);\n      }\n\n      return;\n    };\n\n    this.peek = () => {\n      return this._heap[0];\n    };\n\n    this.extract = () => {\n      const min = this._heap.shift();\n\n      console.log(min);\n\n      this._heap.unshift(this._heap[this._heap.length - 1]);\n\n      this._heap.pop();\n\n      console.log(this._heap.toString());\n\n      if (this._heap.length === 0) {\n        return -1;\n      }\n\n      if (this._heap.length === 1) {\n        return;\n      }\n\n      ;\n      console.log(\"minheapify\");\n      this.minHeapify(0);\n      return min;\n    };\n\n    this.find = val => {\n      for (let i = 0; i < this._heap.length; i++) {\n        if (this._heap[i] === val) {\n          return i;\n        }\n      }\n\n      return -1;\n    };\n\n    this.delete = val => {\n      for (let i = 0; i < this._heap.length; i++) {\n        if (this._heap[i] === val) {\n          const tmp = this._heap[i];\n          this._heap[i] = this._heap[this._heap.length - 1];\n          this._heap[this._heap.length - 1] = tmp;\n        }\n      }\n    };\n\n    this.swap = (pos1, pos2) => {\n      const tmp = this._heap[pos1];\n      this._heap[pos1] = this._heap[pos2];\n      this._heap[pos2] = tmp;\n      return;\n    };\n\n    this.isEmpty = () => {\n      if (this._heap.length === 0) {\n        return true;\n      }\n    };\n\n    this.size = () => {\n      return this._heap.length;\n    };\n\n    this.minHeapify = pos => {\n      console.log(this.leftChildPos(pos) < this._heap.length);\n\n      if (this.leftChildPos(pos) < this._heap.length) {\n        console.log(this.rightChildPos(pos) < this._heap.length);\n\n        if (this.rightChildPos(pos) < this._heap.length) {\n          if (this._heap[pos] > this._heap[this.leftChildPos(pos)] || this._heap[pos] > this._heap[this.rightChildPos(pos)]) {\n            if (this._heap[this.leftChildPos(pos)] < this._heap[this.rightChildPos(pos)]) {\n              this.swap(pos, this.leftChildPos(pos));\n              console.log(this._heap.toString());\n              return this.minHeapify(this.leftChildPos(pos));\n            }\n\n            this.swap(pos, this.rightChildPos(pos));\n            console.log(this._heap.toString());\n            return this.minHeapify(this.rightChildPos(pos));\n            ;\n          }\n        }\n\n        console.log(this._heap[pos], this.leftChildPos(pos));\n        console.log(this._heap[pos] > this.leftChildPos(pos));\n\n        if (this._heap[pos] > this._heap[this.leftChildPos(pos)]) {\n          this.swap(pos, this.leftChildPos(pos));\n          console.log(this._heap.toString());\n          return this.minHeapify(this.leftChildPos(pos));\n        }\n      }\n\n      console.log(this._heap.toString());\n      return;\n    };\n\n    this.minHeap = () => {\n      if (this._heap.length === 0) {\n        return;\n      }\n\n      for (let pos = parseInt(this._heap.length / 2) - 1; pos >= 0; pos--) {\n        this.minHeapify(pos);\n      }\n\n      return;\n    };\n\n    this._heap = heap; //build min-heap\n\n    this.minHeap();\n  }\n\n}\n\nexport default AStar;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Algorithms/AStar.js"],"names":["AStar","rows","cols","gridMap","startPoint","wallPoints","endPoints","map","square","val","type","push","console","log","heap","MinHeap","getHeap","toString","arr","extract","constructor","_heap","parentPos","pos","parseInt","leftChildPos","rightChildPos","insert","length","swap","peek","min","shift","unshift","pop","minHeapify","find","i","delete","tmp","pos1","pos2","isEmpty","size","minHeap"],"mappings":"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","sourcesContent":["function AStar(rows, cols, gridMap){\n    let startPoint = null;\n    let wallPoints = [];\n    let endPoints = [];\n\n\n\n    gridMap.map((square) => {\n        if(square.val && square.type ===  \"start\"){\n            // console.log(square);\n            startPoint = square;\n\n            return null;\n        }\n\n        if(square.val && square.type === \"wall\"){\n            // console.log(square);\n            wallPoints.push(square);\n\n            return null;\n        }\n\n        if(square.val && square.type === \"end\"){\n            // console.log(square);\n            endPoints.push(square);\n\n            return null;\n        }\n\n        return null;\n    })\n\n    if(!startPoint || !endPoints){\n        console.log(\"Map must have a start point, and an end point\");\n        return \"Map must have a start point, and an end point\"; \n    }\n\n\n\n    console.log(startPoint, wallPoints, endPoints);\n    \n    // const heap = new MinHeap();\n\n    const heap = new MinHeap([12,11,5,9,7,2,3,1,4,8,6,10]);\n\n    // const arr = [12,11,5,9,7,2,3,1,4,8,6,10]\n\n    // arr.map(val => {\n    //     heap.insert(val);\n\n    //     return null;\n    // })\n\n    console.log(heap.getHeap().toString());\n\n    arr.map(val => {\n        heap.extract();\n\n        return null\n    })\n\n    console.log(heap.getHeap().toString());\n}\n\nclass MinHeap{\n    constructor(heap=[]){\n        this._heap = heap;\n\n        //build min-heap\n        this.minHeap();\n    }\n\n    getHeap = () => {\n        return this._heap;\n    }\n\n    parentPos = (pos) => {\n        return parseInt((pos - 1) / 2);\n    }\n\n    leftChildPos = (pos) => {\n        return parseInt((2 * pos) + 1);\n    }\n\n    rightChildPos = (pos) => {\n        return parseInt((2 * pos) + 2);\n    }\n\n    insert = (val) => {\n        this._heap.push(val);\n\n        let pos = this._heap.length-1;\n\n        if(this._heap.length <= 1){\n            return;\n        }\n\n        while(this.parentPos(pos) >= 0 && this._heap[pos] < this._heap[this.parentPos(pos)]){\n            this.swap(pos, this.parentPos(pos));\n\n            pos = this.parentPos(pos);\n        }\n\n        return;\n    }\n\n    peek = () => {\n        return this._heap[0];\n    }\n\n    extract = () => {\n        const min = this._heap.shift();\n        console.log(min);\n        this._heap.unshift(this._heap[this._heap.length-1]);\n        this._heap.pop();\n\n        console.log(this._heap.toString());\n\n        if(this._heap.length === 0){\n            return -1;\n        }\n\n        if(this._heap.length === 1){\n            return;\n        };\n\n        console.log(\"minheapify\");\n        this.minHeapify(0);\n\n        return min;\n    }\n\n    find = (val) => {\n        for(let i = 0; i < this._heap.length; i++){\n            if(this._heap[i] === val){\n                return i;\n            }\n        }\n\n        return -1;\n    }\n\n    delete = (val) => {\n        for(let i = 0; i < this._heap.length; i++){\n            if(this._heap[i] === val){\n                const tmp = this._heap[i];\n                this._heap[i] = this._heap[this._heap.length-1];\n                this._heap[this._heap.length-1] = tmp;\n            }\n        }\n    }\n\n    swap = (pos1, pos2) => {\n        const tmp = this._heap[pos1];\n        \n        this._heap[pos1] = this._heap[pos2];\n        this._heap[pos2] = tmp;\n\n        return;\n    }\n\n    isEmpty = () => {\n        if(this._heap.length === 0){\n            return true;\n        }\n    }\n\n    size = () => {\n        return this._heap.length\n    }\n\n    minHeapify = (pos) => {\n        console.log(this.leftChildPos(pos) < this._heap.length);\n        if(this.leftChildPos(pos) < this._heap.length){\n            console.log(this.rightChildPos(pos) < this._heap.length);\n            if(this.rightChildPos(pos) < this._heap.length){\n                if(this._heap[pos] > this._heap[this.leftChildPos(pos)] ||  this._heap[pos] > this._heap[this.rightChildPos(pos)]){\n                    if(this._heap[this.leftChildPos(pos)] < this._heap[this.rightChildPos(pos)]){\n                        this.swap(pos, this.leftChildPos(pos));\n                        console.log(this._heap.toString());\n                        return this.minHeapify(this.leftChildPos(pos));\n                    }\n        \n                    this.swap(pos, this.rightChildPos(pos));\n                    console.log(this._heap.toString());\n                    return this.minHeapify(this.rightChildPos(pos));;\n                }\n            }\n            console.log(this._heap[pos] , this.leftChildPos(pos))\n            console.log(this._heap[pos] > this.leftChildPos(pos))\n            if(this._heap[pos] > this._heap[this.leftChildPos(pos)]){\n                this.swap(pos, this.leftChildPos(pos));\n                console.log(this._heap.toString());\n                return this.minHeapify(this.leftChildPos(pos)); \n            }\n        }\n        \n        console.log(this._heap.toString());\n        return;\n    }\n\n    minHeap = () => {\n        if(this._heap.length === 0){\n            return;\n        }\n\n        for(let pos = parseInt(this._heap.length/2)-1; pos >= 0; pos--){\n            this.minHeapify(pos);\n        }\n\n        return;\n    }\n}\n\nexport default AStar"]},"metadata":{},"sourceType":"module"}