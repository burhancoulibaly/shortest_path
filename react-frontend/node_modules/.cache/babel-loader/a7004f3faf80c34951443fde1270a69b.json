{"ast":null,"code":"import MinHeap from './MinHeap';\n\nfunction getIndex(x, y, cols) {\n  return x + y * cols;\n}\n\nfunction heuristic(startPoint, endPoint) {\n  //TODO make this a switch for the different types of heuristic functions\n  const distance = Math.sqrt(Math.pow(endPoint.x - startPoint.x, 2) + Math.pow(endPoint.y - startPoint.y, 2)); // const distance = Math.abs(startPoint.x-endPoint.x) +  Math.abs(startPoint.y-endPoint.y)\n\n  return distance;\n}\n\nfunction dist(startPoint, endPoint) {\n  //TODO make this a switch for the different types of heuristic functions\n  const distance = Math.sqrt(Math.pow(endPoint.x - startPoint.x, 2) + Math.pow(endPoint.y - startPoint.y, 2));\n  return distance;\n}\n\nfunction getPoints(gridMap) {\n  let startPoint = null;\n  let wallPoints = [];\n  let endPoints = [];\n  gridMap.map(square => {\n    if (square.val && square.type === \"start\") {\n      // console.log(square);\n      startPoint = square;\n      return null;\n    }\n\n    if (square.val && square.type === \"wall\") {\n      // console.log(square);\n      wallPoints.push(square);\n      return null;\n    }\n\n    if (square.val && square.type === \"end\") {\n      // console.log(square);\n      endPoints.push(square);\n      return null;\n    }\n\n    return null;\n  });\n  return [startPoint, wallPoints, endPoints];\n}\n\nfunction reconstructPath(path, state, setState) {}\n\nfunction getNeighbors(point, gridMap, rows, cols, state, setState) {\n  //Point                                 Index\n  // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n  // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n  // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n  // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n  // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n  // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n  // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n  // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n  const neighbors = new Array(8);\n\n  if (point.x > 0) {\n    const left = getIndex(point.x - 1, point.y, cols);\n\n    if (!gridMap[left].val && gridMap[left].type !== \"wall\" && gridMap[left].type !== \"start\" || gridMap[left].val && gridMap[left].type === \"end\") {\n      neighbors[0] = gridMap[left];\n    }\n  }\n\n  if (point.x < cols - 1) {\n    const right = getIndex(point.x + 1, point.y, cols);\n\n    if (!gridMap[right].val && gridMap[right].type !== \"wall\" && gridMap[right].type !== \"start\" || gridMap[right].val && gridMap[right].type === \"end\") {\n      neighbors[1] = gridMap[right];\n    }\n  }\n\n  if (point.y > 0) {\n    const up = getIndex(point.x, point.y - 1, cols);\n\n    if (!gridMap[up].val && gridMap[up].type !== \"wall\" && gridMap[up].type !== \"start\" || gridMap[up].val && gridMap[up].type === \"end\") {\n      neighbors[2] = gridMap[up];\n    }\n  }\n\n  if (point.y < rows - 1) {\n    const down = getIndex(point.x, point.y + 1, cols);\n\n    if (!gridMap[down].val && gridMap[down].type !== \"wall\" && gridMap[down].type !== \"start\" || gridMap[down].val && gridMap[down].type === \"end\") {\n      neighbors[3] = gridMap[down];\n    }\n  }\n\n  if (point.x > 0 && point.y > 0) {\n    const topLeft = getIndex(point.x - 1, point.y - 1, cols);\n\n    if (!gridMap[topLeft].val && gridMap[topLeft].type !== \"wall\" && gridMap[topLeft].type !== \"start\" || gridMap[topLeft].val && gridMap[topLeft].type === \"end\") {\n      neighbors[4] = gridMap[topLeft];\n    }\n  }\n\n  if (point.x < cols - 1 && point.y > 0) {\n    const topRight = getIndex(point.x + 1, point.y - 1, cols);\n\n    if (!gridMap[topRight].val && gridMap[topRight].type !== \"wall\" && gridMap[topRight].type !== \"start\" || gridMap[topRight].val && gridMap[topRight].type === \"end\") {\n      neighbors[5] = gridMap[topRight];\n    }\n  }\n\n  if (point.x > 0 && point.y < rows - 1) {\n    const bottomLeft = getIndex(point.x - 1, point.y + 1, cols);\n\n    if (!gridMap[bottomLeft].val && gridMap[bottomLeft].type !== \"wall\" && gridMap[bottomLeft].type !== \"start\" || gridMap[bottomLeft].val && gridMap[bottomLeft].type === \"end\") {\n      neighbors[6] = gridMap[bottomLeft];\n    }\n  }\n\n  if (point.x < cols - 1 && point.y < rows - 1) {\n    const bottomRight = getIndex(point.x + 1, point.y + 1, cols);\n\n    if (!gridMap[bottomRight].val && gridMap[bottomRight].type !== \"wall\" && gridMap[bottomRight].type !== \"start\" || gridMap[bottomRight].val && gridMap[bottomRight].type === \"end\") {\n      neighbors[7] = gridMap[bottomRight];\n    }\n  }\n\n  return neighbors;\n}\n\nfunction AStar(rows, cols, gridMap, state, setState) {\n  const [startPoint, wallPoints, endPoints] = getPoints(gridMap);\n  let points = {};\n  let openSet = new MinHeap();\n  let cameFrom = {};\n  let gScore = {};\n  let fScore = {};\n  let goal = null;\n\n  if (!startPoint || !endPoints) {\n    console.log(\"Map must have a start point, and an end point\");\n    return \"Map must have a start point, and an end point\";\n  }\n\n  cameFrom[getIndex(startPoint.x, startPoint.y, cols)] = null;\n  gScore[getIndex(startPoint.x, startPoint.y, cols)] = 0;\n  const endPointDistances = new Array(endPoints.length);\n  endPoints.map((endPoint, i) => {\n    const hScore = heuristic(startPoint, endPoint);\n    endPointDistances[i] = [endPoint, gScore[getIndex(startPoint.x, startPoint.y, cols)] + hScore];\n    return null;\n  }); // console.log(endPointDistances);\n\n  endPointDistances.sort((a, b) => {\n    if (a[1] > b[1]) {\n      return 1;\n    }\n\n    if (a[1] < b[1]) {\n      return -1;\n    }\n\n    return 0;\n  });\n  goal = endPointDistances[0][0];\n  fScore[getIndex(startPoint.x, startPoint.y, cols)] = endPointDistances[0][1];\n  points[fScore[getIndex(startPoint.x, startPoint.y, cols)]] = [startPoint];\n  openSet.insert(fScore[getIndex(startPoint.x, startPoint.y, cols)]);\n  console.log(points);\n\n  while (openSet.getHeap().length !== 0) {\n    console.log(openSet.getHeap());\n    console.log(openSet.peek());\n    console.log(points[openSet.peek()]);\n    const current = points[openSet.peek()][points[openSet.peek()].length - 1];\n\n    if (cameFrom[getIndex(current.x, current.y, cols)]) {\n      console.log(cameFrom[getIndex(current.x, current.y, cols)]);\n    }\n\n    console.log(current); // console.log(current);\n\n    if (current.x === goal.x && current.y === goal.y) {\n      console.log(\"current\", current);\n      console.log(\"goal\", goal);\n      console.log(\"GOOOAAAAALLLLLLL\");\n      console.log(cameFrom);\n      return cameFrom;\n    }\n\n    const neighbors = getNeighbors(current, gridMap, rows, cols);\n    points[openSet.peek()].pop();\n    openSet.extract();\n    neighbors.map(neighbor => {\n      console.log(neighbor);\n      console.log(gScore[getIndex(current.x, current.y, cols)] + dist(current, neighbor) + heuristic(neighbor, goal)); // console.log(\"neighbor\", neighbor);\n\n      const currentPathGScore = gScore[getIndex(current.x, current.y, cols)] + dist(current, neighbor);\n\n      if (gScore[getIndex(neighbor.x, neighbor.y, cols)]) {\n        if (currentPathGScore < gScore[getIndex(neighbor.x, neighbor.y, cols)]) {\n          cameFrom[getIndex(neighbor.x, neighbor.y, cols)] = current;\n          gScore[getIndex(neighbor.x, neighbor.y, cols)] = currentPathGScore;\n          const hScore = heuristic(neighbor, goal);\n          fScore[getIndex(neighbor.x, neighbor.y, cols)] = gScore[getIndex(neighbor.x, neighbor.y, cols)] + hScore;\n\n          if (!openSet.find(fScore[getIndex(neighbor.x, neighbor.y, cols)])) {\n            if (!points[fScore[getIndex(neighbor.x, neighbor.y, cols)]]) {\n              points[fScore[getIndex(neighbor.x, neighbor.y, cols)]] = [];\n            }\n\n            points[fScore[getIndex(neighbor.x, neighbor.y, cols)]].push(neighbor);\n            openSet.insert(fScore[getIndex(neighbor.x, neighbor.y, cols)]);\n          }\n\n          reconstructPath(cameFrom, state, useState);\n          return null;\n        }\n\n        return null;\n      }\n\n      cameFrom[getIndex(neighbor.x, neighbor.y, cols)] = current;\n      gScore[getIndex(neighbor.x, neighbor.y, cols)] = currentPathGScore;\n      const hScore = heuristic(neighbor, goal);\n      fScore[getIndex(neighbor.x, neighbor.y, cols)] = gScore[getIndex(neighbor.x, neighbor.y, cols)] + hScore;\n\n      if (!points[fScore[getIndex(neighbor.x, neighbor.y, cols)]]) {\n        points[fScore[getIndex(neighbor.x, neighbor.y, cols)]] = [];\n      }\n\n      points[fScore[getIndex(neighbor.x, neighbor.y, cols)]].push(neighbor);\n      openSet.insert(fScore[getIndex(neighbor.x, neighbor.y, cols)]);\n      reconstructPath(cameFrom, state, useState);\n      return null;\n    });\n  }\n\n  console.log(openSet.getHeap());\n  return;\n}\n\nexport default AStar;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Algorithms/AStar.js"],"names":["MinHeap","getIndex","x","y","cols","heuristic","startPoint","endPoint","distance","Math","sqrt","pow","dist","getPoints","gridMap","wallPoints","endPoints","map","square","val","type","push","reconstructPath","path","state","setState","getNeighbors","point","rows","neighbors","Array","left","right","up","down","topLeft","topRight","bottomLeft","bottomRight","AStar","points","openSet","cameFrom","gScore","fScore","goal","console","log","endPointDistances","length","i","hScore","sort","a","b","insert","getHeap","peek","current","pop","extract","neighbor","currentPathGScore","find","useState"],"mappings":"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","sourcesContent":["import MinHeap from './MinHeap';\n\nfunction getIndex(x, y, cols){\n    return (x + (y * cols));\n}\n\nfunction heuristic(startPoint, endPoint){\n    //TODO make this a switch for the different types of heuristic functions\n    const distance = Math.sqrt(Math.pow((endPoint.x-startPoint.x), 2) + Math.pow((endPoint.y-startPoint.y), 2));\n    // const distance = Math.abs(startPoint.x-endPoint.x) +  Math.abs(startPoint.y-endPoint.y)\n\n    return distance;\n} \n\nfunction dist(startPoint, endPoint){\n    //TODO make this a switch for the different types of heuristic functions\n    const distance = Math.sqrt(Math.pow((endPoint.x-startPoint.x), 2) + Math.pow((endPoint.y-startPoint.y), 2));     \n\n    return distance;\n} \n\nfunction getPoints(gridMap){\n    let startPoint = null;\n    let wallPoints = [];\n    let endPoints = [];\n\n    gridMap.map((square) => {\n        if(square.val && square.type ===  \"start\"){\n            // console.log(square);\n            startPoint = square;\n\n            return null;\n        }\n\n        if(square.val && square.type === \"wall\"){\n            // console.log(square);\n            wallPoints.push(square);\n\n            return null;\n        }\n\n        if(square.val && square.type === \"end\"){\n            // console.log(square);\n            endPoints.push(square);\n\n            return null;\n        }\n\n        return null;\n    })\n\n    return [startPoint, wallPoints, endPoints];\n}\n\nfunction reconstructPath(path, state, setState){\n\n}\n\nfunction getNeighbors(point, gridMap, rows, cols, state, setState){\n    //Point                                 Index\n    // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n    // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n    // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n    // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n    // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n    // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n    // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n    // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n\n    const neighbors = new Array(8);\n\n    if(point.x > 0){\n        const left = getIndex((point.x-1), (point.y), cols);\n\n        if((!gridMap[left].val && gridMap[left].type !== \"wall\" && gridMap[left].type !== \"start\") || (gridMap[left].val && gridMap[left].type === \"end\")){\n            neighbors[0] = gridMap[left];\n        }\n    }\n    if(point.x < cols-1){\n        const right = getIndex((point.x+1), (point.y), cols);\n\n        if((!gridMap[right].val && gridMap[right].type !== \"wall\" && gridMap[right].type !== \"start\") || (gridMap[right].val && gridMap[right].type === \"end\")){\n            neighbors[1] = gridMap[right];\n        }\n    }\n    if(point.y > 0){\n        const up = getIndex((point.x), (point.y-1), cols);\n\n        if((!gridMap[up].val && gridMap[up].type !== \"wall\" && gridMap[up].type !== \"start\") || (gridMap[up].val && gridMap[up].type === \"end\")){\n            neighbors[2] = gridMap[up];\n        }\n    }\n    if(point.y < rows-1){\n        const down = getIndex((point.x), (point.y+1), cols);\n\n        if((!gridMap[down].val && gridMap[down].type !== \"wall\" && gridMap[down].type !== \"start\") || (gridMap[down].val && gridMap[down].type === \"end\")){\n            neighbors[3] = gridMap[down];\n        }\n    }\n    if(point.x > 0 && point.y > 0){\n        const topLeft = getIndex((point.x-1), (point.y-1), cols);\n\n        if((!gridMap[topLeft].val && gridMap[topLeft].type !== \"wall\" && gridMap[topLeft].type !== \"start\") || (gridMap[topLeft].val && gridMap[topLeft].type === \"end\")){\n            neighbors[4] = gridMap[topLeft];\n        }\n    }\n    if(point.x < cols-1 && point.y > 0){\n        const topRight = getIndex((point.x+1), (point.y-1), cols);\n\n        if((!gridMap[topRight].val && gridMap[topRight].type !== \"wall\" && gridMap[topRight].type !== \"start\") || (gridMap[topRight].val && gridMap[topRight].type === \"end\")){\n            neighbors[5] = gridMap[topRight];\n        }\n    }\n    if(point.x > 0 && point.y < rows-1){\n        const bottomLeft  = getIndex((point.x-1), (point.y+1), cols);\n\n        if((!gridMap[bottomLeft].val && gridMap[bottomLeft].type !== \"wall\" && gridMap[bottomLeft].type !== \"start\") || (gridMap[bottomLeft].val && gridMap[bottomLeft].type === \"end\")){\n            neighbors[6] = gridMap[bottomLeft];\n        }\n    }\n    if(point.x < cols-1 && point.y < rows-1){\n        const bottomRight = getIndex((point.x+1), (point.y+1), cols);\n\n        if((!gridMap[bottomRight].val && gridMap[bottomRight].type !== \"wall\" && gridMap[bottomRight].type !== \"start\") || (gridMap[bottomRight].val && gridMap[bottomRight].type === \"end\")){\n            neighbors[7] = gridMap[bottomRight];\n        }\n    }\n\n    return neighbors;\n}\n\nfunction AStar(rows, cols, gridMap, state, setState){\n    const [startPoint, wallPoints, endPoints] = getPoints(gridMap);\n\n    let points = {};\n    let openSet = new MinHeap();\n    let cameFrom = {};\n    let gScore = {};\n    let fScore = {};\n    let goal = null;\n\n    if(!startPoint || !endPoints){\n        console.log(\"Map must have a start point, and an end point\");\n        return \"Map must have a start point, and an end point\"; \n    }\n\n    cameFrom[getIndex(startPoint.x, startPoint.y, cols)] = null;\n\n    gScore[getIndex(startPoint.x, startPoint.y, cols)] = 0;\n\n    const endPointDistances = new Array(endPoints.length);\n\n    endPoints.map((endPoint, i) => {\n        const hScore = heuristic(startPoint, endPoint); \n\n        endPointDistances[i] = [endPoint, gScore[getIndex(startPoint.x, startPoint.y, cols)] + hScore];\n\n        return null;\n    })\n\n    // console.log(endPointDistances);\n    \n    endPointDistances.sort((a, b) => {\n        if(a[1] > b[1]){\n            return 1\n        }\n        if(a[1] < b[1]){\n            return -1\n        }\n\n        return 0;\n    });\n\n    goal = endPointDistances[0][0];\n\n    fScore[getIndex(startPoint.x, startPoint.y, cols)] = endPointDistances[0][1];\n\n    points[fScore[getIndex(startPoint.x, startPoint.y, cols)]] = [startPoint];\n\n    openSet.insert(fScore[getIndex(startPoint.x, startPoint.y, cols)]);\n\n    console.log(points);\n    while(openSet.getHeap().length !== 0){\n        console.log(openSet.getHeap());\n        console.log(openSet.peek());\n        console.log(points[openSet.peek()]);\n        const current = points[openSet.peek()][points[openSet.peek()].length-1];\n\n        if(cameFrom[getIndex(current.x, current.y, cols)]){\n            console.log(cameFrom[getIndex(current.x, current.y, cols)]);\n        }\n\n        console.log(current);\n        // console.log(current);\n\n        if(current.x === goal.x && current.y === goal.y){\n            console.log(\"current\",current);\n            console.log(\"goal\", goal);\n            console.log(\"GOOOAAAAALLLLLLL\");\n            console.log(cameFrom);\n            return cameFrom;\n        }\n\n        const neighbors = getNeighbors(current, gridMap, rows, cols);\n\n        points[openSet.peek()].pop();\n        openSet.extract();\n\n\n\n        neighbors.map((neighbor) => {\n            console.log(neighbor);\n            console.log((gScore[getIndex(current.x, current.y, cols)] + dist(current, neighbor)) + heuristic(neighbor, goal));\n            \n            // console.log(\"neighbor\", neighbor);\n            const currentPathGScore = gScore[getIndex(current.x, current.y, cols)] + dist(current, neighbor);\n\n            if(gScore[getIndex(neighbor.x, neighbor.y, cols)]){ \n                if(currentPathGScore < gScore[getIndex(neighbor.x, neighbor.y, cols)]){\n\n                    cameFrom[getIndex(neighbor.x, neighbor.y, cols)] = current;\n\n                    gScore[getIndex(neighbor.x, neighbor.y, cols)] = currentPathGScore;\n\n                    const hScore = heuristic(neighbor, goal);\n                    \n                    fScore[getIndex(neighbor.x, neighbor.y, cols)] = (gScore[getIndex(neighbor.x, neighbor.y, cols)] + hScore);\n\n                    if(!openSet.find(fScore[getIndex(neighbor.x, neighbor.y, cols)])){\n                        if(!points[fScore[getIndex(neighbor.x, neighbor.y, cols)]]){\n                            points[fScore[getIndex(neighbor.x, neighbor.y, cols)]] = [];\n                        }\n\n                        points[fScore[getIndex(neighbor.x, neighbor.y, cols)]].push(neighbor);\n\n                        openSet.insert(fScore[getIndex(neighbor.x, neighbor.y, cols)]);\n                    }\n\n                    reconstructPath(cameFrom, state, useState);\n\n                    return null;\n                }\n                return null;\n            }\n\n            cameFrom[getIndex(neighbor.x, neighbor.y, cols)] = current;\n\n            gScore[getIndex(neighbor.x, neighbor.y, cols)] = currentPathGScore;\n\n            const hScore = heuristic(neighbor, goal);\n\n            fScore[getIndex(neighbor.x, neighbor.y, cols)] = (gScore[getIndex(neighbor.x, neighbor.y, cols)] + hScore);\n\n            if(!points[fScore[getIndex(neighbor.x, neighbor.y, cols)]]){\n                points[fScore[getIndex(neighbor.x, neighbor.y, cols)]] = [];\n            }\n\n            points[fScore[getIndex(neighbor.x, neighbor.y, cols)]].push(neighbor);\n\n            openSet.insert(fScore[getIndex(neighbor.x, neighbor.y, cols)]);\n\n            reconstructPath(cameFrom, state, useState);\n         \n            return null;    \n        });\n    }\n\n    console.log(openSet.getHeap());\n\n    return;\n}\n\nexport default AStar"]},"metadata":{},"sourceType":"module"}