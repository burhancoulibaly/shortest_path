{"ast":null,"code":"var _jsxFileName = \"/home/menekou/projects/react/shortest-path/react-frontend/src/Map/Map.js\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport './Map.css';\nimport Square from '../Square/Square';\nimport MenuContext from '../MenuContext';\n\nfunction Map(props) {\n  const [menuState, dispatch] = useContext(MenuContext);\n  const [state, setState] = useState({\n    rows: 15,\n    cols: 50,\n    grid: new Array(15 * 50).fill({\n      val: false,\n      type: null\n    }),\n    //space-time O(1)\n    itemState: \"start\"\n  }); //If item button is changed\n\n  useEffect(() => {\n    setState({ ...state,\n      itemType: itemType\n    });\n  }, [menuState.itemState]); //If menu clear button is clicked\n\n  useEffect(() => {\n    if (menuState.clear === true) {\n      setState({ ...state,\n        grid: new Array(state.rows * state.cols).fill({\n          val: false,\n          type: null\n        })\n      });\n    }\n\n    return dispatch({\n      type: \"cleared\"\n    });\n  }, [menuState.clear]);\n  useEffect(() => {}, [menuState.run]); // const run = () => {\n  //     setMenu({\n  //         ...menu,\n  //         run: true,\n  //     })\n  // }\n\n  const renderSquare = (x, y, val) => {\n    return /*#__PURE__*/React.createElement(Square //Minus 4 accounts for width and height\n    , {\n      width: state.cols > state.rows ? props.winDimensions.width / state.cols - 4 : props.winDimensions.width / state.cols * (Math.min(props.winDimensions.width / state.cols, props.winDimensions.height / state.rows) / Math.max(props.winDimensions.width / state.cols, props.winDimensions.height / state.rows)) - 4,\n      height: state.rows === state.cols ? props.winDimensions.height / state.rows - 4 //converting aspect ration of the square to 1:1 by multiplying the height by minimum of the width and height divided by the maximum of the width and height\n      : props.winDimensions.height / state.rows * (Math.min(props.winDimensions.width / state.cols, props.winDimensions.height / state.rows) / Math.max(props.winDimensions.width / state.cols, props.winDimensions.height / state.rows)) - 4,\n      x: x,\n      y: y,\n      val: val,\n      squareClick: (x, y) => handleClick(x, y),\n      itemState: state.itemState,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }\n    });\n  };\n\n  const renderMap = () => {\n    //space-time O(1)\n    const rows = Array(state.rows); //each row will contain an array of 50 available indexes\n\n    const cols = Array(state.rows); //time O(n)\n\n    for (let i = 0; i < state.grid.length; i++) {\n      if (i % state.cols === 0) {\n        cols[i / state.cols] = Array(state.cols); //space-time O(1)\n\n        rows[i] = /*#__PURE__*/React.createElement(\"div\", {\n          className: \"grid-row\",\n          key: i / state.cols,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 21\n          }\n        }, cols[i / state.cols]);\n      }\n\n      let square = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"grid-col\",\n        key: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 17\n        }\n      }, renderSquare(i % state.cols, (i - i % state.cols) / state.cols, state.grid[i].val));\n      cols[(i - i % state.cols) / state.cols][i % state.cols] = square;\n    }\n\n    const map = rows;\n    return map;\n  };\n\n  const handleClick = (x, y) => {\n    switch (state.itemState) {\n      case \"start\":\n        setState(state => ({ ...state,\n          //state object is immutable so updates have to be done this way\n          grid: state.grid.map((square, index) => {\n            if (index === x + y * state.cols) {\n              // console.log(x,y,square.type,state.itemState);\n              if (square.type === state.itemState || !square.val) {\n                return square.val ? { ...square,\n                  val: false,\n                  type: null\n                } : { ...square,\n                  val: true,\n                  type: state.itemState\n                };\n              }\n            }\n\n            if (square.type === state.itemState && square.val && !state.grid[x + y * state.cols].val) {\n              return { ...square,\n                val: false\n              };\n            }\n\n            return { ...square\n            };\n          })\n        }));\n        break;\n\n      case \"wall\":\n        setState(state => ({ ...state,\n          //state object is immutable so updates have to be done this way\n          grid: state.grid.map((square, index) => {\n            if (index === x + y * state.cols) {\n              // console.log(x,y,square.type,state.itemState);\n              if (square.type === state.itemState || !square.val) {\n                return square.val ? { ...square,\n                  val: false,\n                  type: null\n                } : { ...square,\n                  val: true,\n                  type: state.itemState\n                };\n              }\n            }\n\n            return { ...square\n            };\n          })\n        }));\n        break;\n\n      case \"end\":\n        setState(state => ({ ...state,\n          //state object is immutable so updates have to be done this way\n          grid: state.grid.map((square, index) => {\n            if (index === x + y * state.cols) {\n              // console.log(x,y,square.type,state.itemState);\n              if (square.type === state.itemState || !square.val) {\n                return square.val ? { ...square,\n                  val: false,\n                  type: null\n                } : { ...square,\n                  val: true,\n                  type: state.itemState\n                };\n              }\n            }\n\n            return { ...square\n            };\n          })\n        }));\n        break;\n\n      default:\n        break;\n    }\n\n    return;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"map\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }\n  }, console.time(), renderMap(), console.timeEnd());\n}\n\nexport default Map;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Map/Map.js"],"names":["React","useState","useContext","useEffect","Square","MenuContext","Map","props","menuState","dispatch","state","setState","rows","cols","grid","Array","fill","val","type","itemState","itemType","clear","run","renderSquare","x","y","winDimensions","width","Math","min","height","max","handleClick","renderMap","i","length","square","map","index","console","time","timeEnd"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\nimport './Map.css';\nimport Square from '../Square/Square';\nimport MenuContext from '../MenuContext';\n\nfunction Map(props) {\n    const [menuState, dispatch] = useContext(MenuContext);\n    const [state, setState] = useState({\n        rows: 15,\n        cols: 50,\n        grid: new Array(15*50).fill({val: false, type: null}),//space-time O(1)\n        itemState: \"start\"\n    })\n\n    //If item button is changed\n    useEffect(() => {\n        setState({\n            ...state,\n            itemType: itemType,\n        })\n    }, [menuState.itemState]);\n\n    //If menu clear button is clicked\n    useEffect(() => {\n        if(menuState.clear === true){\n            setState({\n                ...state,\n                grid: new Array(state.rows*state.cols).fill({val: false, type: null})\n            })\n        }\n\n        return dispatch({type: \"cleared\"});\n    }, [menuState.clear]);\n\n    useEffect(() => {\n\n    }, [menuState.run]);\n    // const run = () => {\n    //     setMenu({\n    //         ...menu,\n    //         run: true,\n    //     })\n    // }\n    \n    const renderSquare = (x,y,val) => {\n        return (\n            <Square\n                //Minus 4 accounts for width and height\n                width={\n                    state.cols > state.rows\n                        ? (props.winDimensions.width / state.cols) - 4\n                        : (props.winDimensions.width / state.cols) * (Math.min((props.winDimensions.width / state.cols),(props.winDimensions.height / state.rows)) / Math.max((props.winDimensions.width / state.cols),(props.winDimensions.height / state.rows))) - 4 \n                }\n                height={\n                    state.rows === state.cols\n                        ? (props.winDimensions.height / state.rows) - 4\n                        //converting aspect ration of the square to 1:1 by multiplying the height by minimum of the width and height divided by the maximum of the width and height\n                        : (props.winDimensions.height / state.rows) * (Math.min((props.winDimensions.width / state.cols),(props.winDimensions.height / state.rows)) / Math.max((props.winDimensions.width / state.cols),(props.winDimensions.height / state.rows))) - 4\n                }\n                x={x}\n                y={y}\n                val={val}\n                squareClick={(x, y) => handleClick(x, y)}\n                itemState={state.itemState}\n            />\n        )\n    }\n\n    const renderMap = () => {\n        //space-time O(1)\n        const rows = Array(state.rows);\n        //each row will contain an array of 50 available indexes\n        const cols = Array(state.rows);\n\n        //time O(n)\n        for(let i = 0; i < state.grid.length; i++){\n            if(i % state.cols === 0){\n                cols[i / state.cols] = Array(state.cols)//space-time O(1)\n\n                rows[i] = (\n                    <div className=\"grid-row\" key={i / state.cols}>\n                        {cols[i / state.cols]}\n                    </div>\n                )\n            }\n\n            let square = (\n                <div className=\"grid-col\" key={i}>\n                    {renderSquare(i % state.cols, (i - (i % state.cols)) / state.cols, state.grid[i].val)}\n                </div>\n            )\n\n            cols[(i - (i % state.cols)) / state.cols][i % state.cols] = square;\n        }\n\n        const map = rows;\n\n        return map;\n    }\n\n    const handleClick = (x,y) => {\n        switch (state.itemState) {\n            case \"start\":\n                setState(state => ({\n                    ...state,\n                    //state object is immutable so updates have to be done this way\n                    grid: state.grid.map((square, index) => {\n                        if(index === x + (y * state.cols)){\n                            // console.log(x,y,square.type,state.itemState);\n                            if(square.type === state.itemState || !square.val){\n                                return square.val\n                                    ? {...square, val: false, type: null}\n                                    : {...square, val: true, type: state.itemState}\n                            }\n                        }\n\n                        if(square.type === state.itemState && square.val && !state.grid[x + (y * state.cols)].val){\n                            return {...square, val: false}\n                        }\n\n                        return {...square}\n                    })\n                }));\n                \n                break;\n\n            case \"wall\":\n                setState(state => ({\n                    ...state,\n                    //state object is immutable so updates have to be done this way\n                    grid: state.grid.map((square, index) => {\n                        if(index === x + (y * state.cols)){\n                            // console.log(x,y,square.type,state.itemState);\n                            if(square.type === state.itemState || !square.val){\n                                return square.val\n                                    ? {...square, val: false, type: null}\n                                    : {...square, val: true, type: state.itemState}\n                            }\n                        }\n\n                        return {...square}\n                    })\n                }));\n\n                break;\n\n            case \"end\":\n                setState(state => ({\n                    ...state,\n                    //state object is immutable so updates have to be done this way\n                    grid: state.grid.map((square, index) => {\n                        if(index === x + (y * state.cols)){\n                            // console.log(x,y,square.type,state.itemState);\n                            if(square.type === state.itemState || !square.val){\n                                return square.val\n                                    ? {...square, val: false, type: null}\n                                    : {...square, val: true, type: state.itemState}\n                            }\n                        }\n\n                        return {...square}\n                    })\n                }));\n\n                break;\n        \n            default:\n                break;\n        }\n\n        return;\n    }\n    \n\n\n    return (\n        <div id=\"map\">\n            {console.time()}\n                {renderMap()}\n            {console.timeEnd()}\n        </div>\n    )\n}\n\nexport default Map;"]},"metadata":{},"sourceType":"module"}