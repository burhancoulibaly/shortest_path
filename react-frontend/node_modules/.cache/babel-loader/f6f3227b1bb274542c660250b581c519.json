{"ast":null,"code":"var _jsxFileName = \"/home/menekou/projects/react/shortest-path/react-frontend/src/Sandbox/Sandbox.js\";\nimport React, { useState, useEffect } from 'react';\nimport './Sandbox.css'; //TODO: Runs a little slow, find a way to optimize (possibly using hooks)\n\nfunction Square(props) {\n  console.log(props.width, props.height);\n  let drag = false;\n  const [state, setState] = useState({\n    x: props.x,\n    y: props.y,\n    val: props.val,\n    type: props.itemType\n  });\n  useEffect(() => {\n    setState({ ...state,\n      val: props.val,\n      type: props.itemType\n    });\n  }, [props.val]);\n\n  const handleMouseDown = () => {\n    if (drag) {\n      drag = false;\n      document.addEventListener('mouseover', handler);\n      document.addEventListener('mouseup', handler);\n    }\n\n    drag = true;\n    props.squareClick(state.x, state.y);\n    document.addEventListener('mouseover', handler);\n    document.addEventListener('mouseup', handler);\n  };\n\n  const handler = (e, x = null, y = null) => {\n    if (e.type === \"mousedown\") {\n      if (drag) {\n        drag = false;\n        document.addEventListener('mouseover', handler);\n        document.addEventListener('mouseup', handler);\n      } // console.log(x,y);\n\n\n      drag = true;\n      props.squareClick(x, y);\n    }\n\n    if (e.type === \"mouseover\") {\n      if (drag) {\n        // console.log(x,y);\n        props.squareClick(x, y);\n      }\n    }\n  };\n\n  switch (state.type) {\n    case \"start\":\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          width: `${props.width}px`,\n          height: `${props.height}px`,\n          backgroundColor: props.val === true ? `green` : `white`\n        },\n        className: \"square\",\n        onMouseDown: e => handler(e, state.x, state.y),\n        onMouseOver: e => handler(e, state.x, state.y),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 17\n        }\n      });\n\n    case \"wall\":\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          width: `${props.width}px`,\n          height: `${props.height}px`,\n          backgroundColor: props.val === true ? `gray` : `white`\n        },\n        className: \"square\",\n        onMouseDown: e => handler(e, state.x, state.y),\n        onMouseOver: e => handler(e, state.x, state.y),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 17\n        }\n      });\n\n    case \"end\":\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          width: `${props.width}px`,\n          height: `${props.height}px`,\n          backgroundColor: props.val === true ? `red` : `white`\n        },\n        className: \"square\",\n        onMouseDown: e => handler(e, state.x, state.y),\n        onMouseUp: e => handler(e),\n        onMouseOver: e => handler(e, state.x, state.y),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 17\n        }\n      });\n\n    default:\n      break;\n  }\n}\n\nfunction Map(props) {\n  const [state, setState] = useState({\n    rows: 25,\n    cols: 75,\n    grid: new Array(25 * 75).fill({\n      val: false,\n      type: null\n    }),\n    itemType: \"start\"\n  }); // useEffect(() => {\n  // }[])\n\n  const renderSquare = (x, y, val) => {\n    return /*#__PURE__*/React.createElement(Square, {\n      width: props.winDimensions.width / state.cols,\n      height: state.rows === state.cols ? props.winDimensions.height / state.rows : //converting aspect ration of the square to 1:1 by multiplying the height by minimum of the width and height divided by the maximum of the width and height\n      props.winDimensions.height / state.rows * (Math.min(props.winDimensions.width / state.cols, props.winDimensions.height / state.rows) / Math.max(props.winDimensions.width / state.cols, props.winDimensions.height / state.rows)),\n      x: x,\n      y: y,\n      val: val,\n      squareClick: (x, y) => handleClick(x, y),\n      itemType: state.itemType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }\n    });\n  };\n\n  const renderMapCols = j => {\n    let cols = Array(state.cols);\n\n    for (let i = 0; i < state.cols; i++) {\n      cols.push( /*#__PURE__*/React.createElement(\"div\", {\n        className: \"grid-col\",\n        key: i + j * state.cols,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 17\n        }\n      }, renderSquare(i, j, state.grid[i + j * state.cols].val)));\n    }\n\n    return cols;\n  };\n\n  const renderMapRows = () => {\n    let rows = Array(state.rows);\n\n    for (let j = 0; j < state.rows; j++) {\n      rows.push( /*#__PURE__*/React.createElement(\"div\", {\n        className: \"grid-row\",\n        key: j,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 17\n        }\n      }, renderMapCols(j)));\n    }\n\n    return rows;\n  };\n\n  const renderMap = () => {\n    return renderMapRows();\n  };\n\n  const switchItemType = itemType => {\n    setState({ ...state,\n      itemType: itemType\n    });\n  };\n\n  const clearMap = () => {\n    setState({ ...state,\n      grid: new Array(30 * 100).fill({\n        val: false,\n        type: null\n      })\n    });\n  };\n\n  const handleClick = (x, y) => {\n    switch (state.itemType) {\n      case \"start\":\n        setState(state => ({ ...state,\n          //state object is immutable so updates have to be done this way\n          grid: state.grid.map((square, index) => {\n            if (index === x + y * state.cols) {\n              // console.log(x,y,square.type,state.itemType);\n              if (square.type === state.itemType || !square.type) {\n                if (state.grid[x + y * state.cols].val) {\n                  return { ...square,\n                    val: !state.grid[x + y * state.cols].val,\n                    type: null\n                  };\n                }\n\n                return { ...square,\n                  val: !state.grid[x + y * state.cols].val,\n                  type: \"start\"\n                };\n              }\n            }\n\n            if (square.type == \"start\") {\n              return { ...square,\n                val: false,\n                type: null\n              };\n            }\n\n            return { ...square\n            };\n          })\n        }));\n        break;\n\n      case \"wall\":\n        setState(state => ({ ...state,\n          //state object is immutable so updates have to be done this way\n          grid: state.grid.map((square, index) => {\n            if (index === x + y * state.cols) {\n              // console.log(x,y,square.type,state.itemType);\n              if (square.type === state.itemType || !square.type) {\n                if (state.grid[x + y * state.cols].val) {\n                  return { ...square,\n                    val: !state.grid[x + y * state.cols].val,\n                    type: null\n                  };\n                }\n\n                return { ...square,\n                  val: !state.grid[x + y * state.cols].val,\n                  type: \"wall\"\n                };\n              }\n            }\n\n            return { ...square\n            };\n          })\n        }));\n        break;\n\n      case \"end\":\n        setState(state => ({ ...state,\n          //state object is immutable so updates have to be done this way\n          grid: state.grid.map((square, index) => {\n            if (index === x + y * state.cols) {\n              // console.log(x,y,square.type,state.itemType);\n              if (square.type === state.itemType || !square.type) {\n                if (state.grid[x + y * state.cols].val) {\n                  return { ...square,\n                    val: !state.grid[x + y * state.cols].val,\n                    type: null\n                  };\n                }\n\n                return { ...square,\n                  val: !state.grid[x + y * state.cols].val,\n                  type: \"end\"\n                };\n              }\n            }\n\n            return { ...square\n            };\n          })\n        }));\n        break;\n\n      default:\n        break;\n    }\n\n    return;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 9\n    }\n  }, renderMap(), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-menu\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => switchItemType(\"start\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 13\n    }\n  }, \"Start Item\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => switchItemType(\"wall\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 13\n    }\n  }, \"Wall Item\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => switchItemType(\"end\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 13\n    }\n  }, \"End Item\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => clearMap(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 13\n    }\n  }, \"Clear\"), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 13\n    }\n  }, \"Run\")));\n}\n\nfunction Sandbox() {\n  const [winDimensions, setWinDimensions] = useState({\n    width: document.documentElement.clientWidth,\n    height: document.documentElement.clientHeight\n  });\n  useEffect(() => {\n    const handleWinResize = () => {\n      setWinDimensions({\n        width: document.documentElement.clientWidth,\n        height: document.documentElement.clientHeight\n      });\n    };\n\n    window.addEventListener('resize', handleWinResize); // console.log(\"Window has been resized: \", winDimensions.width, winDimensions.height);\n\n    return () => {\n      window.removeEventListener('resize', handleWinResize);\n    };\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"sandbox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Map, {\n    winDimensions: winDimensions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default Sandbox;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Sandbox/Sandbox.js"],"names":["React","useState","useEffect","Square","props","console","log","width","height","drag","state","setState","x","y","val","type","itemType","handleMouseDown","document","addEventListener","handler","squareClick","e","backgroundColor","Map","rows","cols","grid","Array","fill","renderSquare","winDimensions","Math","min","max","handleClick","renderMapCols","j","i","push","renderMapRows","renderMap","switchItemType","clearMap","map","square","index","Sandbox","setWinDimensions","documentElement","clientWidth","clientHeight","handleWinResize","window","removeEventListener"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Sandbox.css';\n\n//TODO: Runs a little slow, find a way to optimize (possibly using hooks)\nfunction Square(props) {\n    console.log(props.width, props.height)\n    let drag = false;\n    const [state, setState] = useState({x: props.x, y: props.y, val: props.val, type: props.itemType});\n    useEffect(() => {\n        setState({\n            ...state,\n            val: props.val,\n            type: props.itemType\n        })\n    }, [props.val]);\n\n    const handleMouseDown = () => {\n        if(drag){\n            drag = false;\n            \n            document.addEventListener('mouseover', handler);\n            document.addEventListener('mouseup', handler);      \n        }\n\n        drag = true;\n\n        props.squareClick(state.x,state.y);\n\n        document.addEventListener('mouseover', handler);\n\n        document.addEventListener('mouseup', handler);\n    }\n\n    const handler = (e, x=null, y=null) => {\n        if(e.type === \"mousedown\"){\n            if(drag){\n                drag = false;\n                \n                document.addEventListener('mouseover', handler);\n                document.addEventListener('mouseup', handler);      \n            }\n\n            // console.log(x,y);\n            drag = true;\n            props.squareClick(x,y);\n        }\n        \n        if(e.type === \"mouseover\"){\n            if(drag){\n                // console.log(x,y);\n                props.squareClick(x, y);\n            }\n        }\n    }\n\n    switch (state.type) {\n        case \"start\":\n            return (\n                <div style={{width: `${props.width}px`, height:`${props.height}px`, backgroundColor: props.val === true ? `green` : `white`}} className=\"square\" onMouseDown={(e) => handler(e,state.x,state.y)} onMouseOver={(e) => handler(e,state.x,state.y)}></div>\n            )\n\n        case \"wall\":\n            return (\n                <div style={{width: `${props.width}px`, height:`${props.height}px`, backgroundColor: props.val === true ? `gray` : `white`}} className=\"square\" onMouseDown={(e) => handler(e,state.x,state.y)} onMouseOver={(e) => handler(e,state.x,state.y)}></div>\n            )\n\n        case \"end\":\n            return (\n                <div style={{width: `${props.width}px`, height:`${props.height}px`, backgroundColor: props.val === true ? `red` : `white`}} className=\"square\" onMouseDown={(e) => handler(e,state.x,state.y)} onMouseUp={(e) => handler(e)} onMouseOver={(e) => handler(e,state.x,state.y)}></div>\n            )\n    \n        default:\n            break;\n    }\n}\n\nfunction Map(props) {\n    const [state, setState] = useState({\n        rows: 25,\n        cols: 75,\n        grid: new Array(25*75).fill({val: false, type: null}),\n        itemType: \"start\"\n    })\n\n    // useEffect(() => {\n\n    // }[])\n    \n    const renderSquare = (x,y,val) => {\n        return (\n            <Square \n                width={(props.winDimensions.width / state.cols)}\n                height = {state.rows === state.cols\n                            ? (props.winDimensions.height / state.rows)\n                            //converting aspect ration of the square to 1:1 by multiplying the height by minimum of the width and height divided by the maximum of the width and height\n                            : (props.winDimensions.height / state.rows) * (Math.min((props.winDimensions.width / state.cols),(props.winDimensions.height / state.rows)) / Math.max((props.winDimensions.width / state.cols),(props.winDimensions.height / state.rows)))\n                        }\n                x={x}\n                y={y}\n                val={val}\n                squareClick={(x, y) => handleClick(x, y)}\n                itemType={state.itemType}\n            />\n        )\n    }\n\n    const renderMapCols = (j) => {\n        let cols = Array(state.cols);\n\n        for(let i = 0; i < state.cols; i++){\n            cols\n            .push(\n                <div className=\"grid-col\" key={i + (j * state.cols)}>\n                    {renderSquare(i, j, state.grid[i + (j * state.cols)].val)}\n                </div>\n            )\n        }\n\n        return cols;\n    }\n    \n    const renderMapRows = () => {\n        let rows = Array(state.rows)\n\n        for(let j = 0; j < state.rows; j++){\n            rows\n            .push(\n                <div className=\"grid-row\" key={j}>\n                    {renderMapCols(j)}\n                </div>\n            )\n        }\n\n        return rows;\n    }\n\n    const renderMap = () => {\n        return renderMapRows();\n    }\n    \n\n    const switchItemType = (itemType) => {\n        setState({\n            ...state,\n            itemType: itemType,\n        })\n    }\n\n    const clearMap = () => {\n        setState({\n            ...state,\n            grid: new Array(30*100).fill({val: false, type: null}),\n        })\n    }\n\n    const handleClick = (x,y) => {\n        switch (state.itemType) {\n            case \"start\":\n                setState(state => ({\n                    ...state,\n                    //state object is immutable so updates have to be done this way\n                    grid: state.grid.map((square, index) => {\n                        if(index === x + (y * state.cols)){\n                            // console.log(x,y,square.type,state.itemType);\n                            if(square.type === state.itemType || !square.type){\n                                if(state.grid[x + (y * state.cols)].val){\n                                    return {...square, val: !state.grid[x + (y * state.cols)].val, type: null}\n                                }\n\n                                return {...square, val: !state.grid[x + (y * state.cols)].val, type: \"start\"}\n                            }\n                        }\n\n                        if(square.type == \"start\"){\n                            return {...square, val: false, type: null}\n                        }\n\n                        return {...square}\n                    })\n                }));\n                \n                break;\n\n            case \"wall\":\n                setState(state => ({\n                    ...state,\n                    //state object is immutable so updates have to be done this way\n                    grid: state.grid.map((square, index) => {\n                        if(index === x + (y * state.cols)){\n                            // console.log(x,y,square.type,state.itemType);\n                            if(square.type === state.itemType || !square.type){\n                                if(state.grid[x + (y * state.cols)].val){\n                                    return {...square, val: !state.grid[x + (y * state.cols)].val, type: null}\n                                }\n\n                                return {...square, val: !state.grid[x + (y * state.cols)].val, type: \"wall\"}\n                            }\n                        }\n\n                        return {...square}\n                    })\n                }));\n\n                break;\n\n            case \"end\":\n                setState(state => ({\n                    ...state,\n                    //state object is immutable so updates have to be done this way\n                    grid: state.grid.map((square, index) => {\n                        if(index === x + (y * state.cols)){\n                            // console.log(x,y,square.type,state.itemType);\n                            if(square.type === state.itemType || !square.type){\n                                if(state.grid[x + (y * state.cols)].val){\n                                    return {...square, val: !state.grid[x + (y * state.cols)].val, type: null}\n                                }\n\n                                return {...square, val: !state.grid[x + (y * state.cols)].val, type: \"end\"}\n                            }\n                        }\n\n                        return {...square}\n                    })\n                }));\n\n                break;\n        \n            default:\n                break;\n        }\n\n        return;\n    }\n    \n    return (\n        <div className=\"map\">\n            {renderMap()}\n            <div className=\"map-menu\">\n            <button onClick={() => switchItemType(\"start\")}>Start Item</button>\n            <button onClick={() => switchItemType(\"wall\")}>Wall Item</button>\n            <button onClick={() => switchItemType(\"end\")}>End Item</button>\n            <button onClick={() => clearMap()}>Clear</button>\n            <button>Run</button>\n            </div>\n        </div>\n    )\n}\n\nfunction Sandbox() {\n    const [winDimensions, setWinDimensions] = useState({ width: document.documentElement.clientWidth, height: document.documentElement.clientHeight });\n\n    useEffect(() => {\n        const handleWinResize = () => {\n            setWinDimensions({\n                width: document.documentElement.clientWidth,\n                height: document.documentElement.clientHeight\n            })\n        }\n\n        window.addEventListener('resize', handleWinResize);\n\n        // console.log(\"Window has been resized: \", winDimensions.width, winDimensions.height);\n\n        return () => {\n            window.removeEventListener('resize', handleWinResize);\n        };\n    })\n\n    return (\n        <div id=\"sandbox\">\n            <Map \n                winDimensions={winDimensions}\n            />\n        </div>\n    );\n}\n\nexport default Sandbox;"]},"metadata":{},"sourceType":"module"}