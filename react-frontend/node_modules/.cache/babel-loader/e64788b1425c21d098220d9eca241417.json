{"ast":null,"code":"import MinHeap from './MinHeap';\n\nfunction getIndex(x, y, cols) {\n  return x + y * cols;\n}\n\nfunction heuristic(startPoint, endPoint, heuristic) {\n  //TODO make this a switch for the different types of heuristic functions\n  let distance;\n\n  switch (heuristic) {\n    case \"euclidean\":\n      distance = Math.sqrt(Math.pow(endPoint.x - startPoint.x, 2) + Math.pow(endPoint.y - startPoint.y, 2));\n      break;\n\n    case \"manhattan\":\n      distance = Math.abs(startPoint.x - endPoint.x) + Math.abs(startPoint.y - endPoint.y);\n      break;\n\n    default:\n      distance = Math.sqrt(Math.pow(endPoint.x - startPoint.x, 2) + Math.pow(endPoint.y - startPoint.y, 2));\n      break;\n  }\n\n  return distance;\n}\n\nfunction dist(startPoint, endPoint) {\n  //TODO make this a switch for the different types of heuristic functions\n  const distance = Math.sqrt(Math.pow(endPoint.x - startPoint.x, 2) + Math.pow(endPoint.y - startPoint.y, 2));\n  return distance;\n}\n\nfunction getPoints(gridMap) {\n  let startPoint = null;\n  let endPoints = [];\n  gridMap.map(square => {\n    if (square.val && square.type === \"start\") {\n      // console.log(square);\n      startPoint = square;\n      return null;\n    }\n\n    if (square.val && square.type === \"end\") {\n      // console.log(square);\n      endPoints.push(square);\n      return null;\n    }\n\n    return null;\n  });\n  return [startPoint, endPoints];\n}\n\nfunction getNeighbors(point, gridMap, rows, cols, cutCorners, allowDiags) {\n  //Point                                 Index\n  // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n  // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n  // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n  // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n  // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n  // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n  // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n  // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n  console.log(cutCorners, allowDiags);\n  const neighbors = new Array(8);\n\n  if (point.x > 0) {\n    const left = getIndex(point.x - 1, point.y, cols);\n\n    if (gridMap[left].type !== \"wall\" && gridMap[left].type !== \"start\") {\n      neighbors[0] = gridMap[left];\n    }\n  }\n\n  if (point.x < cols - 1) {\n    const right = getIndex(point.x + 1, point.y, cols);\n\n    if (gridMap[right].type !== \"wall\" && gridMap[right].type !== \"start\") {\n      neighbors[1] = gridMap[right];\n    }\n  }\n\n  if (point.y > 0) {\n    const up = getIndex(point.x, point.y - 1, cols);\n\n    if (gridMap[up].type !== \"wall\" && gridMap[up].type !== \"start\") {\n      neighbors[2] = gridMap[up];\n    }\n  }\n\n  if (point.y < rows - 1) {\n    const down = getIndex(point.x, point.y + 1, cols);\n\n    if (gridMap[down].type !== \"wall\" && gridMap[down].type !== \"start\") {\n      neighbors[3] = gridMap[down];\n    }\n  }\n\n  if (point.x > 0 && point.y > 0) {\n    const topLeft = getIndex(point.x - 1, point.y - 1, cols);\n\n    if (gridMap[topLeft].type !== \"wall\" && gridMap[topLeft].type !== \"start\") {\n      if (allowDiags === true) {\n        if (cutCorners !== true) {\n          if (gridMap[topLeft + 1].type !== \"wall\" && gridMap[topLeft + 50].type !== \"wall\") {\n            neighbors[4] = gridMap[topLeft];\n          }\n        } else {\n          neighbors[4] = gridMap[topLeft];\n        }\n      }\n    }\n  }\n\n  if (point.x < cols - 1 && point.y > 0) {\n    const topRight = getIndex(point.x + 1, point.y - 1, cols);\n\n    if (gridMap[topRight].type !== \"wall\" && gridMap[topRight].type !== \"start\") {\n      if (allowDiags === true) {\n        if (cutCorners !== true) {\n          if (gridMap[topRight - 1].type !== \"wall\" && gridMap[topRight + 50].type !== \"wall\") {\n            neighbors[5] = gridMap[topRight];\n          }\n        } else {\n          neighbors[5] = gridMap[topRight];\n        }\n      }\n    }\n  }\n\n  if (point.x > 0 && point.y < rows - 1) {\n    const bottomLeft = getIndex(point.x - 1, point.y + 1, cols);\n\n    if (gridMap[bottomLeft].type !== \"wall\" && gridMap[bottomLeft].type !== \"start\") {\n      if (allowDiags) {\n        if (cutCorners) {\n          if (gridMap[bottomLeft + 1].type !== \"wall\" && gridMap[bottomLeft - 50].type !== \"wall\") {\n            neighbors[6] = gridMap[bottomLeft];\n          }\n        } else {\n          neighbors[6] = gridMap[bottomLeft];\n        }\n      }\n    }\n  }\n\n  if (point.x < cols - 1 && point.y < rows - 1) {\n    const bottomRight = getIndex(point.x + 1, point.y + 1, cols);\n\n    if (gridMap[bottomRight].type !== \"wall\" && gridMap[bottomRight].type !== \"start\") {\n      if (allowDiags === true) {\n        if (cutCorners !== true) {\n          if (gridMap[bottomRight - 1].type !== \"wall\" && gridMap[bottomRight - 50].type !== \"wall\") {\n            neighbors[7] = gridMap[bottomRight];\n          }\n        } else {\n          neighbors[7] = gridMap[bottomRight];\n        }\n      }\n    }\n  }\n\n  return neighbors;\n}\n\nfunction AStar(rows, cols, gridMap, heuristicType, memState, setState, cutCorners, allowDiags) {\n  const [startPoint, endPoints] = getPoints(gridMap);\n  const openSet = new MinHeap();\n  const cameFrom = {};\n  const gScore = {};\n  const fScore = {};\n  const states = []; //TODO: Bug, clears grid but then returns it to its previous state\n\n  const newState = { ...memState,\n    grid: new Array(rows * cols).fill({\n      val: false,\n      type: null\n    }).map((square, i) => {\n      return { ...square,\n        x: i % cols,\n        y: Math.abs((i - i % cols) / cols)\n      };\n    })\n  };\n  states.push(newState);\n  let goal = null;\n\n  if (!startPoint || !endPoints) {\n    console.log(\"Map must have a start point, and an end point\");\n    return \"Map must have a start point, and an end point\";\n  }\n\n  cameFrom[getIndex(startPoint.x, startPoint.y, cols)] = null;\n  gScore[getIndex(startPoint.x, startPoint.y, cols)] = 0;\n  const endPointDistances = new Array(endPoints.length);\n  endPoints.map((endPoint, i) => {\n    const hScore = heuristic(startPoint, endPoint, heuristicType);\n    endPointDistances[i] = [endPoint, gScore[getIndex(startPoint.x, startPoint.y, cols)] + hScore];\n    return null;\n  }); // console.log(endPointDistances);\n\n  endPointDistances.sort((a, b) => {\n    if (a[1] > b[1]) {\n      return 1;\n    }\n\n    if (a[1] < b[1]) {\n      return -1;\n    }\n\n    return 0;\n  });\n  goal = endPointDistances[0][0];\n  fScore[getIndex(startPoint.x, startPoint.y, cols)] = endPointDistances[0][1];\n  openSet.insert({\n    point: startPoint,\n    val: fScore[getIndex(startPoint.x, startPoint.y, cols)]\n  });\n\n  while (openSet.getHeap().length !== 0) {\n    // console.log(Array.from(openSet.getHeap()));\n    // console.log(Object.assign({},openSet.peek()));\n    const current = openSet.peek().point;\n    openSet.extract();\n    const newState = { ...memState,\n      grid: memState.grid.map((square, index) => {\n        if (current.x === square.x && current.y === square.y) {\n          if (current.type !== \"start\" && current.type !== \"end\") {\n            memState.grid[index] = { ...memState.grid[index],\n              val: true,\n              type: \"neighbors\"\n            };\n          }\n\n          return { ...square\n          };\n        }\n\n        return { ...square\n        };\n      })\n    };\n    states.push(newState);\n\n    if (current.x === goal.x && current.y === goal.y) {\n      const state = states[states.length - 1];\n      setState({ // return {\n        ...state,\n        //state object is immutable so updates have to be done this way\n        grid: state.grid.map((square, index) => {\n          if (cameFrom[index]) {\n            if (square.type === \"end\") {\n              let prev = cameFrom[index];\n\n              while (prev) {\n                if (prev.type !== \"start\" && prev.type !== \"end\") {\n                  state.grid[getIndex(prev.x, prev.y, state.cols)] = { ...state.grid[getIndex(prev.x, prev.y, state.cols)],\n                    val: true,\n                    type: \"path\"\n                  };\n                }\n\n                prev = cameFrom[getIndex(prev.x, prev.y, state.cols)];\n              }\n\n              return { ...square\n              };\n            }\n\n            return { ...square\n            };\n          }\n\n          return { ...square\n          };\n        })\n      });\n      console.log(\"PATH FOUND!!!!!\");\n      return states;\n    } // console.log(current); \n\n\n    const neighbors = getNeighbors(current, gridMap, rows, cols, cutCorners, allowDiags);\n    neighbors.map(neighbor => {\n      // console.log(neighbor);\n      // console.log((gScore[getIndex(current.x, current.y, cols)] + dist(current, neighbor)) + heuristic(neighbor, goal));\n      // console.log(\"neighbor\", neighbor);\n      const currentPathGScore = gScore[getIndex(current.x, current.y, cols)] + dist(current, neighbor);\n\n      if (currentPathGScore < gScore[getIndex(neighbor.x, neighbor.y, cols)] || !gScore[getIndex(neighbor.x, neighbor.y, cols)]) {\n        cameFrom[getIndex(neighbor.x, neighbor.y, cols)] = current;\n        gScore[getIndex(neighbor.x, neighbor.y, cols)] = currentPathGScore;\n        const hScore = heuristic(neighbor, goal, heuristicType);\n        fScore[getIndex(neighbor.x, neighbor.y, cols)] = gScore[getIndex(neighbor.x, neighbor.y, cols)] + hScore;\n\n        if (!openSet.find(fScore[getIndex(neighbor.x, neighbor.y, cols)], neighbor)) {\n          openSet.insert({\n            point: neighbor,\n            val: fScore[getIndex(neighbor.x, neighbor.y, cols)]\n          });\n          const newState = { ...memState,\n            grid: memState.grid.map((square, index) => {\n              if (neighbor.x === square.x && neighbor.y === square.y) {\n                if (neighbor.type !== \"start\" && neighbor.type !== \"end\") {\n                  memState.grid[index] = { ...memState.grid[index],\n                    val: true,\n                    type: \"openset\"\n                  };\n                }\n\n                return { ...square\n                };\n              }\n\n              return { ...square\n              };\n            })\n          };\n          states.push(newState);\n          return null;\n        }\n\n        return null;\n      }\n\n      return null;\n    });\n  }\n\n  return states;\n}\n\nexport default AStar;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Algorithms/AStar.js"],"names":["MinHeap","getIndex","x","y","cols","heuristic","startPoint","endPoint","distance","Math","sqrt","pow","abs","dist","getPoints","gridMap","endPoints","map","square","val","type","push","getNeighbors","point","rows","cutCorners","allowDiags","console","log","neighbors","Array","left","right","up","down","topLeft","topRight","bottomLeft","bottomRight","AStar","heuristicType","memState","setState","openSet","cameFrom","gScore","fScore","states","newState","grid","fill","i","goal","endPointDistances","length","hScore","sort","a","b","insert","getHeap","current","peek","extract","index","state","prev","neighbor","currentPathGScore","find"],"mappings":"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","sourcesContent":["import MinHeap from './MinHeap';\n\nfunction getIndex(x, y, cols){\n    return (x + (y * cols));\n}\n\nfunction heuristic(startPoint, endPoint, heuristic){\n    //TODO make this a switch for the different types of heuristic functions\n    let distance;\n    switch (heuristic) {\n        case \"euclidean\":\n            distance = Math.sqrt(Math.pow((endPoint.x-startPoint.x), 2) + Math.pow((endPoint.y-startPoint.y), 2));\n\n            break;\n        \n        case \"manhattan\":\n            distance = Math.abs(startPoint.x-endPoint.x) +  Math.abs(startPoint.y-endPoint.y);\n\n            break;\n\n        default:\n            distance = Math.sqrt(Math.pow((endPoint.x-startPoint.x), 2) + Math.pow((endPoint.y-startPoint.y), 2));\n\n            break;\n    }\n    \n    \n\n    return distance;\n} \n\nfunction dist(startPoint, endPoint){\n    //TODO make this a switch for the different types of heuristic functions\n    const distance = Math.sqrt(Math.pow((endPoint.x-startPoint.x), 2) + Math.pow((endPoint.y-startPoint.y), 2)); \n\n    return distance;\n} \n\nfunction getPoints(gridMap){\n    let startPoint = null;\n    let endPoints = [];\n    \n    gridMap.map((square) => {\n        if(square.val && square.type ===  \"start\"){\n            // console.log(square);\n            startPoint = square;\n\n            return null;\n        }\n\n        if(square.val && square.type === \"end\"){\n            // console.log(square);\n            endPoints.push(square);\n\n            return null;\n        }\n\n        return null;\n    })\n\n    return [startPoint, endPoints];\n}\n\nfunction getNeighbors(point, gridMap, rows, cols, cutCorners, allowDiags){\n    //Point                                 Index\n    // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n    // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n    // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n    // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n    // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n    // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n    // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n    // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n    console.log(cutCorners, allowDiags)\n    const neighbors = new Array(8);\n\n    if(point.x > 0){\n        const left = getIndex((point.x-1), (point.y), cols);\n\n        if(gridMap[left].type !== \"wall\" && gridMap[left].type !== \"start\"){\n            neighbors[0] = gridMap[left];\n        }\n    }\n    if(point.x < cols-1){\n        const right = getIndex((point.x+1), (point.y), cols);\n\n        if(gridMap[right].type !== \"wall\" && gridMap[right].type !== \"start\"){\n            neighbors[1] = gridMap[right];\n        }\n    }\n    if(point.y > 0){\n        const up = getIndex((point.x), (point.y-1), cols);\n\n        if(gridMap[up].type !== \"wall\" && gridMap[up].type !== \"start\"){\n            neighbors[2] = gridMap[up];\n        }\n    }\n    if(point.y < rows-1){\n        const down = getIndex((point.x), (point.y+1), cols);\n\n        if(gridMap[down].type !== \"wall\" && gridMap[down].type !== \"start\"){\n            neighbors[3] = gridMap[down];\n        }\n    }\n    if(point.x > 0 && point.y > 0){\n        const topLeft = getIndex((point.x-1), (point.y-1), cols);\n\n        if(gridMap[topLeft].type !== \"wall\" && gridMap[topLeft].type !== \"start\"){\n            if(allowDiags === true){\n                if(cutCorners !== true){\n                    if(gridMap[topLeft+1].type !== \"wall\" && gridMap[topLeft+50].type !== \"wall\"){\n                        neighbors[4] = gridMap[topLeft];\n                    }\n                }else{\n                    neighbors[4] = gridMap[topLeft];\n                }\n            }\n        }\n    }\n    if(point.x < cols-1 && point.y > 0){\n        const topRight = getIndex((point.x+1), (point.y-1), cols);\n\n        if(gridMap[topRight].type !== \"wall\" && gridMap[topRight].type !== \"start\"){\n            if(allowDiags === true){\n                if(cutCorners !== true){\n                    if(gridMap[topRight-1].type !== \"wall\" && gridMap[topRight+50].type !== \"wall\"){\n                        neighbors[5] = gridMap[topRight];\n                    }\n                }else{\n                    neighbors[5] = gridMap[topRight];\n                }\n            }\n        }\n    }\n    if(point.x > 0 && point.y < rows-1){\n        const bottomLeft  = getIndex((point.x-1), (point.y+1), cols);\n\n        if(gridMap[bottomLeft].type !== \"wall\" && gridMap[bottomLeft].type !== \"start\"){\n            if(allowDiags){\n                if(cutCorners){\n                    if(gridMap[bottomLeft+1].type !== \"wall\" && gridMap[bottomLeft-50].type !== \"wall\"){\n                        neighbors[6] = gridMap[bottomLeft];\n                    }\n                }else{\n                    neighbors[6] = gridMap[bottomLeft];\n                }\n            }\n        }\n    }\n    if(point.x < cols-1 && point.y < rows-1){\n        const bottomRight = getIndex((point.x+1), (point.y+1), cols);\n\n        if(gridMap[bottomRight].type !== \"wall\" && gridMap[bottomRight].type !== \"start\"){\n            if(allowDiags === true){\n                if(cutCorners !== true){\n                    if(gridMap[bottomRight-1].type !== \"wall\" && gridMap[bottomRight-50].type !== \"wall\"){\n                        neighbors[7] = gridMap[bottomRight];\n                    }\n                }else{\n                    neighbors[7] = gridMap[bottomRight]\n                }\n            }\n        }\n    }\n\n    return neighbors;\n}\n\nfunction AStar(rows, cols, gridMap, heuristicType, memState, setState, cutCorners, allowDiags){\n    const [startPoint, endPoints] = getPoints(gridMap);\n    const openSet = new MinHeap();\n    const cameFrom = {};\n    const gScore = {};\n    const fScore = {};\n    const states = [];\n\n    //TODO: Bug, clears grid but then returns it to its previous state\n    const newState = {\n        ...memState,\n        grid: new Array(rows*cols).fill({val: false, type: null}).map((square, i) => {\n            return {\n                ...square,\n                x: i % cols,\n                y: Math.abs((i - (i % cols)) / cols)\n            }\n        })\n    }\n    states.push(newState);\n\n    let goal = null;\n\n    if(!startPoint || !endPoints){\n        console.log(\"Map must have a start point, and an end point\");\n        return \"Map must have a start point, and an end point\"; \n    }\n\n    cameFrom[getIndex(startPoint.x, startPoint.y, cols)] = null;\n\n    gScore[getIndex(startPoint.x, startPoint.y, cols)] = 0;\n\n    const endPointDistances = new Array(endPoints.length);\n\n    endPoints.map((endPoint, i) => {\n        const hScore = heuristic(startPoint, endPoint, heuristicType); \n\n        endPointDistances[i] = [endPoint, gScore[getIndex(startPoint.x, startPoint.y, cols)] + hScore];\n\n        return null;\n    })\n\n    // console.log(endPointDistances);\n    \n    endPointDistances.sort((a, b) => {\n        if(a[1] > b[1]){\n            return 1\n        }\n        if(a[1] < b[1]){\n            return -1\n        }\n\n        return 0;\n    });\n\n    goal = endPointDistances[0][0];\n\n    fScore[getIndex(startPoint.x, startPoint.y, cols)] = endPointDistances[0][1];\n\n    openSet.insert({point: startPoint, val: fScore[getIndex(startPoint.x, startPoint.y, cols)]});\n\n    while(openSet.getHeap().length !== 0){\n        // console.log(Array.from(openSet.getHeap()));\n        // console.log(Object.assign({},openSet.peek()));\n        const current = openSet.peek().point;\n\n        openSet.extract();\n\n        \n        const newState = {\n            ...memState,\n            grid: memState.grid.map((square, index) => {\n                if(current.x === square.x && current.y === square.y){\n                    if(current.type !== \"start\" && current.type !== \"end\"){\n                        memState.grid[index] = {\n                            ...memState.grid[index],\n                            val: true,\n                            type: \"neighbors\"\n                        }\n                    }\n                    return {...square}\n                }\n                return {...square}\n            })\n        }\n        states.push(newState);\n\n        if(current.x === goal.x && current.y === goal.y){\n            const state = states[states.length-1];\n            setState({\n                // return {\n                ...state,\n                //state object is immutable so updates have to be done this way\n                grid: state.grid.map((square, index) => {\n                    if(cameFrom[index]){\n                        if(square.type === \"end\"){\n                            let prev = cameFrom[index];\n                \n                            while(prev){                   \n                                if(prev.type !== \"start\" && prev.type !== \"end\"){\n                                    state.grid[getIndex(prev.x,prev.y,state.cols)] = {\n                                        ...state.grid[getIndex(prev.x,prev.y,state.cols)],\n                                        val: true,\n                                        type: \"path\"\n                                    }\n                                }\n                                prev = cameFrom[getIndex(prev.x,prev.y,state.cols)];\n                            }\n                            return {...square};\n                        }\n                        return {...square};\n                    }\n                    return {...square};\n                })\n             \n            });\n\n            console.log(\"PATH FOUND!!!!!\");\n            return states;\n        }\n\n        // console.log(current); \n\n        const neighbors = getNeighbors(current, gridMap, rows, cols, cutCorners, allowDiags);\n\n        neighbors.map((neighbor) => {\n            // console.log(neighbor);\n            // console.log((gScore[getIndex(current.x, current.y, cols)] + dist(current, neighbor)) + heuristic(neighbor, goal));\n            // console.log(\"neighbor\", neighbor);\n\n            const currentPathGScore = gScore[getIndex(current.x, current.y, cols)] + dist(current, neighbor);\n            \n            if(currentPathGScore < gScore[getIndex(neighbor.x, neighbor.y, cols)] || !gScore[getIndex(neighbor.x, neighbor.y, cols)]){\n                cameFrom[getIndex(neighbor.x, neighbor.y, cols)] = current;\n\n                gScore[getIndex(neighbor.x, neighbor.y, cols)] = currentPathGScore;\n\n                const hScore = heuristic(neighbor, goal, heuristicType);\n                \n                fScore[getIndex(neighbor.x, neighbor.y, cols)] = (gScore[getIndex(neighbor.x, neighbor.y, cols)] + hScore);\n                \n                if(!openSet.find(fScore[getIndex(neighbor.x, neighbor.y, cols)], neighbor)){\n                    openSet.insert({point: neighbor, val: fScore[getIndex(neighbor.x, neighbor.y, cols)]});\n                    \n                    const newState = {\n                        ...memState,\n                        grid: memState.grid.map((square, index) => {\n                            if(neighbor.x === square.x && neighbor.y === square.y){\n                                if(neighbor.type !== \"start\" && neighbor.type !== \"end\"){\n                                    memState.grid[index] = {\n                                        ...memState.grid[index],\n                                        val: true,\n                                        type: \"openset\"\n                                    }\n                                }\n                                return {...square}\n                            }\n                            return {...square}\n                        })\n                    }\n                    states.push(newState); \n                    \n                    return null;\n                }\n                return null;\n            }\n            return null;\n        });\n    }\n\n    return states;\n}\n\nexport default AStar"]},"metadata":{},"sourceType":"module"}