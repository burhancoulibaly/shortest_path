{"ast":null,"code":"class FibonacciHeap {\n  constructor() {\n    this.getRootList = () => {\n      return this._rootList;\n    };\n\n    this.insert = node => {\n      this._rootList.push(node);\n\n      if (this._rootList.length > 1) {\n        const node1 = this._rootList[this._rootList.length - 2];\n        const node2 = this._rootList[this._rootList.length - 1];\n        node2.setRight(node1.getRight());\n        node1.getRight().setLeft(node2);\n        node1.setRight(node2);\n        node2.setLeft(node1);\n      } else {\n        const node1 = this._rootList[0];\n        node1.setRight(node1);\n        node1.setLeft(node1);\n      }\n\n      if (this._min === null || node.getVal() < this._min.getVal()) {\n        this._min = node;\n      }\n    };\n\n    this.peek = () => {\n      return this._min;\n    };\n\n    this.extractMin = () => {\n      const min = this._min;\n\n      if (min) {\n        if (min.getChild()) {\n          min.getChild().forEach(node => {\n            node.setParent(null);\n            this.insert(node);\n          });\n        }\n\n        if (min === min.getRight()) {\n          this._min = null;\n        } else {\n          this._min = min.getRight();\n        }\n\n        this._rootList.forEach((node, index) => {\n          if (node.getVal() === min.getVal()) {\n            this._rootList.splice(index, 1);\n          }\n\n          return;\n        });\n      }\n\n      this.consolidate();\n      return min;\n    };\n\n    this.link = (node1, node2) => {\n      this._rootList.forEach((node, index) => {\n        if (node2.getVal() === node.getVal()) {\n          node1.setLeft(null);\n          node1.setRight(null);\n\n          this._rootList.splice(index, 1);\n\n          if (node1.getChild() === null) {\n            node1.setChild([]);\n          }\n\n          if (node1.getChild()) {\n            node1.getChild().push(node2);\n\n            if (node1.getChild().length === 1) {\n              const child1 = node1.getChild()[node1.getChild().length - 1];\n              child1.setRight(child1);\n              child1.setLeft(child1);\n              child1.setParent(node1);\n              child1.setIsMarked(false);\n            } else {\n              const child1 = node1.getChild()[node1.getChild().length - 2];\n              const child2 = node1.getChild()[node1.getChild().length - 1];\n              child2.setRight(child1.getRight());\n              child1.getRight().setLeft(child2);\n              child1.setRight(child2);\n              child2.setLeft(child1);\n              child2.setParent(child1.getParent());\n              child2.setIsMarked(false);\n            }\n          }\n\n          node1.incrementDegree();\n        }\n\n        return;\n      });\n\n      return node1;\n    };\n\n    this.consolidate = () => {\n      console.log(this._rootList.length, Math.log(2));\n      const arr = parseInt(this._rootList.length / Math.log(2));\n\n      this._rootList.forEach(node => {\n        let node1 = node;\n        let degree = node1.getDegree(); //degree is being used as an index\n\n        while (arr[degree]) {\n          let node2 = arr[degree];\n\n          if (node1.getVal() > node2.getVal()) {\n            const tmpNode = node1;\n            node1 = node2;\n            node2 = tmpNode;\n          }\n\n          console.log(\"linking\");\n          console.log(node1, node2);\n          node1 = this.link(node1, node2);\n          degree += 1;\n        }\n\n        console.log(arr);\n        arr[degree] = node1;\n      });\n\n      this._rootList = [];\n      arr.forEach((node, index) => {\n        if (node) {\n          this._rootList.push(node);\n\n          if (this._rootList.length > 1) {\n            const node1 = this._rootList[this._rootList.length - 2];\n            const node2 = this._rootList[this._rootList.length - 1];\n            node2.setRight(node1.getRight());\n            node1.getRight().setLeft(node2);\n            node1.setRight(node2);\n            node2.setLeft(node1);\n          } else {\n            const node1 = this._rootList[0];\n            node1.setRight(node1);\n            node1.setLeft(node1);\n          }\n\n          if (this._min === null || arr[index].getVal() < this._min.getVal()) {\n            this._min = arr[index];\n          }\n        }\n      });\n    };\n\n    this.union = h => {\n      this._min = h.peek();\n      const hStartIndex = this._rootList.length;\n      const hEndIndex = h.length - 1;\n      this._rootList = this._rootList.concat(h);\n\n      if (hStartIndex !== 0) {\n        const node1 = this._rootList[hStartIndex - 1];\n        const node2 = this._rootList[hStartIndex];\n        const node3 = this._rootList[hEndIndex];\n        node3.setRight(node1.getRight());\n        node1.getRight().setLeft(node3);\n        node1.setRight(node2);\n        node2.setLeft(node1);\n      }\n\n      if ((this._min === null || h.peek()) && h.peek() < this._min) {\n        this._min = h.peek();\n      } //clear h object\n\n    };\n\n    this.decreaseKey = (node, val) => {\n      if (val > node.getVal()) {\n        throw new Error(\"Replacement key is greater than the original key\");\n      }\n\n      node.setVal(val);\n      const parent = node.getParent();\n\n      if (parent !== null && node.getVal() < parent.getVal()) {\n        this.cut(node, parent);\n        this.cascadingCut(parent);\n      }\n    };\n\n    this.cut = (child, parent) => {\n      parent.getChild().forEach((node, index) => {\n        if (node.getValue() === child.getValue()) {\n          parent.getChild().splice(index, 1);\n          child.setParent(null);\n          child.setIsMarked(false);\n\n          this._rootList.push(child); //Understand better why the degree is being decremented here\n\n\n          parent.decrementDegree();\n        }\n\n        return;\n      });\n    };\n\n    this.cascadingCut = parent => {\n      const grandParent = parent.getParent();\n\n      if (grandParent !== null) {\n        if (parent.isMarked() === false) {\n          parent.setIsMarked(true);\n        } else {\n          this.cut(parent, grandParent);\n          this.cascadingCut(grandParent);\n        }\n      }\n    };\n\n    this._rootList = [];\n    this._min = null;\n  }\n\n}\n\nexport default FibonacciHeap;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Algorithms/FibonacciHeap.js"],"names":["FibonacciHeap","constructor","getRootList","_rootList","insert","node","push","length","node1","node2","setRight","getRight","setLeft","_min","getVal","peek","extractMin","min","getChild","forEach","setParent","index","splice","consolidate","link","setChild","child1","setIsMarked","child2","getParent","incrementDegree","console","log","Math","arr","parseInt","degree","getDegree","tmpNode","union","h","hStartIndex","hEndIndex","concat","node3","decreaseKey","val","Error","setVal","parent","cut","cascadingCut","child","getValue","decrementDegree","grandParent","isMarked"],"mappings":"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","sourcesContent":["class FibonacciHeap{\n    constructor(){\n        this._rootList = [];\n        this._min = null;\n    }\n\n    getRootList = () => {\n        return this._rootList;\n    }\n\n    //Good\n    insert = (node) => {\n        this._rootList.push(node);\n\n        if(this._rootList.length > 1){\n            const node1 = this._rootList[this._rootList.length-2];\n            const node2 = this._rootList[this._rootList.length-1];\n            \n            node2.setRight(node1.getRight());\n            node1.getRight().setLeft(node2);\n            node1.setRight(node2);\n            node2.setLeft(node1);\n        }else{\n            const node1 = this._rootList[0];\n            node1.setRight(node1);\n            node1.setLeft(node1);\n        }\n        \n        if(this._min === null || node.getVal() < this._min.getVal()){\n            this._min = node;\n        }\n    }\n\n    peek = () => {\n        return this._min;\n    }\n\n    //Good\n    extractMin = () => {\n        const min = this._min;\n\n        if(min){\n            if(min.getChild()){\n                min.getChild().forEach((node) => {\n                    node.setParent(null);\n    \n                    this.insert(node);\n                })\n            }\n\n            if(min === min.getRight()){\n                this._min = null;\n            }else{\n                this._min = min.getRight()\n            }\n\n            this._rootList.forEach((node, index) => {\n                if(node.getVal() === min.getVal()){\n                    this._rootList.splice(index, 1);\n                }\n                return;\n            })\n\n        }\n\n        this.consolidate();\n\n        return min;\n    }\n\n    link = (node1, node2) => {\n        this._rootList.forEach((node, index) => {\n            if(node2.getVal() === node.getVal()){\n                node1.setLeft(null);\n                node1.setRight(null);\n\n                this._rootList.splice(index, 1);\n\n                if(node1.getChild() === null){\n                    node1.setChild([]);\n                }\n\n                if(node1.getChild()){\n                    node1.getChild().push(node2);\n                    \n                    if(node1.getChild().length === 1){\n                        const child1 = node1.getChild()[node1.getChild().length-1];\n\n                        child1.setRight(child1);\n                        child1.setLeft(child1);\n                        child1.setParent(node1);\n\n                        child1.setIsMarked(false);\n                    }else{\n                        const child1 = node1.getChild()[node1.getChild().length-2];\n                        const child2 = node1.getChild()[node1.getChild().length-1];\n\n                        child2.setRight(child1.getRight());\n                        child1.getRight().setLeft(child2);\n                        child1.setRight(child2);\n                        child2.setLeft(child1);\n                        child2.setParent(child1.getParent());\n\n                        child2.setIsMarked(false);\n                    }\n                }\n\n                node1.incrementDegree();\n            }\n\n            return;\n        });\n\n        return node1;\n    }\n\n    consolidate = () => {\n        console.log(this._rootList.length, Math.log(2), )\n        const arr = parseInt(this._rootList.length / Math.log(2));\n\n        this._rootList.forEach((node) => {\n            let node1 = node;\n            let degree = node1.getDegree();\n\n            //degree is being used as an index\n            while(arr[degree]){\n                let node2 = arr[degree];\n\n                if(node1.getVal() > node2.getVal()){\n                    const tmpNode = node1;\n\n                    node1 = node2;\n                    node2 = tmpNode;\n                }\n                console.log(\"linking\");\n                console.log(node1, node2);\n\n                node1 = this.link(node1, node2);\n\n                degree += 1;\n            }\n            console.log(arr);\n            arr[degree] = node1;\n        })\n\n        this._rootList = [];\n\n        arr.forEach((node, index) => {\n            if(node){\n                this._rootList.push(node);\n                \n                if(this._rootList.length > 1){\n                    const node1 = this._rootList[this._rootList.length-2];\n                    const node2 = this._rootList[this._rootList.length-1];\n                    \n                    node2.setRight(node1.getRight());\n                    node1.getRight().setLeft(node2);\n                    node1.setRight(node2);\n                    node2.setLeft(node1);\n                }else{\n                    const node1 = this._rootList[0];\n                    node1.setRight(node1);\n                    node1.setLeft(node1);\n                }\n\n                if(this._min === null || arr[index].getVal() < this._min.getVal()){\n                    this._min = arr[index];\n                }\n            }\n        })\n    }\n\n    union = (h) => {   \n        this._min = h.peek();\n\n        const hStartIndex = this._rootList.length;\n        const hEndIndex = h.length-1;\n\n        this._rootList = this._rootList.concat(h);\n\n        if(hStartIndex !== 0){\n            const node1 = this._rootList[hStartIndex-1];\n            const node2 = this._rootList[hStartIndex];\n            const node3 = this._rootList[hEndIndex];\n\n            node3.setRight(node1.getRight())\n            node1.getRight().setLeft(node3)\n            node1.setRight(node2);\n            node2.setLeft(node1);\n        }\n\n        if((this._min === null || h.peek()) && h.peek() < this._min){\n            this._min = h.peek();\n        }\n\n        //clear h object\n    }\n\n    decreaseKey = (node, val) => {\n        if(val > node.getVal()){\n            throw new Error(\"Replacement key is greater than the original key\");\n        }\n\n        node.setVal(val);\n\n        const parent = node.getParent();\n\n        if(parent !== null && node.getVal() < parent.getVal()){\n            this.cut(node, parent);\n            this.cascadingCut(parent);\n        }\n    }\n    \n    cut = (child, parent) => {\n        parent.getChild().forEach((node, index) => {\n            if(node.getValue() === child.getValue()){\n                parent.getChild().splice(index, 1);\n\n                child.setParent(null);\n                child.setIsMarked(false);\n                this._rootList.push(child);\n\n                //Understand better why the degree is being decremented here\n                parent.decrementDegree();\n            }\n            return;\n        })\n    }\n\n    cascadingCut = (parent) => {\n        const grandParent = parent.getParent();\n\n        if(grandParent !== null){\n            if(parent.isMarked() === false){\n                parent.setIsMarked(true);\n            }else{\n                this.cut(parent, grandParent);\n                this.cascadingCut(grandParent);\n            }\n        }\n    }\n}\n\nexport default FibonacciHeap;\n\n"]},"metadata":{},"sourceType":"module"}