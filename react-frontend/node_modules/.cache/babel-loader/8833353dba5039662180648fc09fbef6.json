{"ast":null,"code":"import MinHeap from './MinHeap';\n\nfunction getIndex(x, y, cols) {\n  return x + y * cols;\n}\n\nfunction heuristic(startPoint, endPoint, heuristic) {\n  console.log(heuristic); //TODO make this a switch for the different types of heuristic functions\n\n  let distance;\n\n  switch (heuristic) {\n    case \"euclidean\":\n      distance = Math.sqrt(Math.pow(endPoint.x - startPoint.x, 2) + Math.pow(endPoint.y - startPoint.y, 2));\n      break;\n\n    case \"manhattan\":\n      distance = Math.abs(startPoint.x - endPoint.x) + Math.abs(startPoint.y - endPoint.y);\n      break;\n\n    default:\n      distance = Math.sqrt(Math.pow(endPoint.x - startPoint.x, 2) + Math.pow(endPoint.y - startPoint.y, 2));\n      break;\n  }\n\n  return distance;\n}\n\nfunction dist(startPoint, endPoint) {\n  //TODO make this a switch for the different types of heuristic functions\n  const distance = Math.sqrt(Math.pow(endPoint.x - startPoint.x, 2) + Math.pow(endPoint.y - startPoint.y, 2));\n  return distance;\n}\n\nfunction getPoints(gridMap) {\n  let startPoint = null;\n  let endPoints = [];\n  gridMap.map(square => {\n    if (square.val && square.type === \"start\") {\n      // console.log(square);\n      startPoint = square;\n      return null;\n    }\n\n    if (square.val && square.type === \"end\") {\n      // console.log(square);\n      endPoints.push(square);\n      return null;\n    }\n\n    return null;\n  });\n  return [startPoint, endPoints];\n}\n\nfunction getNeighbors(point, gridMap, rows, cols, discovered) {\n  //Point                                 Index\n  // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n  // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n  // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n  // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n  // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n  // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n  // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n  // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n  const neighbors = new Array(8); //Reordered neighbors for better visualization\n\n  if (point.x > 0) {\n    const left = getIndex(point.x - 1, point.y, cols);\n\n    if (gridMap[left].type !== \"wall\" && gridMap[left].type !== \"start\" && !discovered[getIndex(gridMap[left].x, gridMap[left].y, cols)]) {\n      neighbors[0] = gridMap[left];\n    }\n  }\n\n  if (point.x < cols - 1) {\n    const right = getIndex(point.x + 1, point.y, cols);\n\n    if (gridMap[right].type !== \"wall\" && gridMap[right].type !== \"start\" && !discovered[getIndex(gridMap[right].x, gridMap[right].y, cols)]) {\n      neighbors[1] = gridMap[right];\n    }\n  }\n\n  if (point.y > 0) {\n    const up = getIndex(point.x, point.y - 1, cols);\n\n    if (gridMap[up].type !== \"wall\" && gridMap[up].type !== \"start\" && !discovered[getIndex(gridMap[up].x, gridMap[up].y, cols)]) {\n      neighbors[2] = gridMap[up];\n    }\n  }\n\n  if (point.y < rows - 1) {\n    const down = getIndex(point.x, point.y + 1, cols);\n\n    if (gridMap[down].type !== \"wall\" && gridMap[down].type !== \"start\" && !discovered[getIndex(gridMap[down].x, gridMap[down].y, cols)]) {\n      neighbors[3] = gridMap[down];\n    }\n  }\n\n  if (point.x > 0 && point.y > 0) {\n    const topLeft = getIndex(point.x - 1, point.y - 1, cols);\n\n    if (gridMap[topLeft].type !== \"wall\" && gridMap[topLeft].type !== \"start\" && !discovered[getIndex(gridMap[topLeft].x, gridMap[topLeft].y, cols)]) {\n      neighbors[4] = gridMap[topLeft];\n    }\n  }\n\n  if (point.x < cols - 1 && point.y > 0) {\n    const topRight = getIndex(point.x + 1, point.y - 1, cols);\n\n    if (gridMap[topRight].type !== \"wall\" && gridMap[topRight].type !== \"start\" && !discovered[getIndex(gridMap[topRight].x, gridMap[topRight].y, cols)]) {\n      neighbors[5] = gridMap[topRight];\n    }\n  }\n\n  if (point.x > 0 && point.y < rows - 1) {\n    const bottomLeft = getIndex(point.x - 1, point.y + 1, cols);\n\n    if (gridMap[bottomLeft].type !== \"wall\" && gridMap[bottomLeft].type !== \"start\" && !discovered[getIndex(gridMap[bottomLeft].x, gridMap[bottomLeft].y, cols)]) {\n      neighbors[6] = gridMap[bottomLeft];\n    }\n  }\n\n  if (point.x < cols - 1 && point.y < rows - 1) {\n    const bottomRight = getIndex(point.x + 1, point.y + 1, cols);\n\n    if (gridMap[bottomRight].type !== \"wall\" && gridMap[bottomRight].type !== \"start\" && !discovered[getIndex(gridMap[bottomRight].x, gridMap[bottomRight].y, cols)]) {\n      neighbors[7] = gridMap[bottomRight];\n    }\n  }\n\n  return neighbors;\n}\n\nfunction GreedyBFS(rows, cols, gridMap, heuristicType, memState, setState) {\n  const [startPoint, endPoints] = getPoints(gridMap);\n  const openSet = new MinHeap();\n  const discovered = {};\n  const gScore = {};\n  const cameFrom = {};\n  const hScore = {};\n  const states = []; //TODO: Bug, clears grid but then returns it to its previous state\n\n  const newState = { ...memState,\n    grid: new Array(rows * cols).fill({\n      val: false,\n      type: null\n    }).map((square, i) => {\n      return { ...square,\n        x: i % cols,\n        y: Math.abs((i - i % cols) / cols)\n      };\n    })\n  };\n  states.push(newState);\n  let goal = null;\n\n  if (!startPoint || !endPoints) {\n    console.log(\"Map must have a start point, and an end point\");\n    return \"Map must have a start point, and an end point\";\n  }\n\n  cameFrom[getIndex(startPoint.x, startPoint.y, cols)] = null;\n  const endPointDistances = new Array(endPoints.length);\n  endPoints.map((endPoint, i) => {\n    endPointDistances[i] = [endPoint, heuristic(startPoint, endPoint, heuristicType)];\n    return null;\n  });\n  endPointDistances.sort((a, b) => {\n    if (a[1] > b[1]) {\n      return 1;\n    }\n\n    if (a[1] < b[1]) {\n      return -1;\n    }\n\n    return 0;\n  });\n  goal = endPointDistances[0][0];\n  gScore[getIndex(startPoint.x, startPoint.y, cols)] = 0;\n  hScore[getIndex(startPoint.x, startPoint.y, cols)] = endPointDistances[0][1];\n  openSet.insert({\n    point: startPoint,\n    val: hScore[getIndex(startPoint.x, startPoint.y, cols)]\n  });\n\n  while (openSet.getHeap().length !== 0) {\n    // console.log(Array.from(openSet.getHeap()));\n    const current = openSet.peek().point; // console.log(Object.assign({},current);\n\n    openSet.extract();\n    const newState = { ...memState,\n      grid: memState.grid.map((square, index) => {\n        if (current.x === square.x && current.y === square.y) {\n          if (current.type !== \"start\" && current.type !== \"end\") {\n            memState.grid[index] = { ...memState.grid[index],\n              val: true,\n              type: \"neighbors\"\n            };\n          }\n\n          return { ...square\n          };\n        }\n\n        return { ...square\n        };\n      })\n    };\n    states.push(newState);\n\n    if (!discovered[getIndex(current.x, current.y, cols)]) {\n      if (current.x === goal.x && current.y === goal.y) {\n        console.log(cameFrom);\n        const state = states[states.length - 1];\n        setState({ ...state,\n          //state object is immutable so updates have to be done this way\n          grid: state.grid.map((square, index) => {\n            if (cameFrom[index]) {\n              if (square.type === \"end\") {\n                let prev = cameFrom[index];\n\n                while (prev) {\n                  console.log(\"hello\");\n\n                  if (prev.type !== \"start\" && prev.type !== \"end\") {\n                    state.grid[getIndex(prev.x, prev.y, state.cols)] = { ...state.grid[getIndex(prev.x, prev.y, state.cols)],\n                      val: true,\n                      type: \"path\"\n                    };\n                  }\n\n                  prev = cameFrom[getIndex(prev.x, prev.y, state.cols)];\n                }\n\n                return { ...square\n                };\n              }\n\n              return { ...square\n              };\n            }\n\n            return { ...square\n            };\n          })\n        });\n        console.log(\"PATH FOUND!!!!!\");\n        return states;\n      }\n\n      const neighbors = getNeighbors(current, gridMap, rows, cols, discovered);\n      neighbors.map(neighbor => {\n        // console.log(\"neighbor\", neighbor);\n        const currentPathGScore = gScore[getIndex(current.x, current.y, cols)] + dist(current, neighbor);\n        console.log(current.x, current.y, gScore[getIndex(current.x, current.y, cols)]);\n        console.log(neighbor.x, neighbor.y, gScore[getIndex(neighbor.x, neighbor.y, cols)]);\n\n        if (currentPathGScore < gScore[getIndex(neighbor.x, neighbor.y, cols)] || !gScore[getIndex(neighbor.x, neighbor.y, cols)]) {\n          cameFrom[getIndex(neighbor.x, neighbor.y, cols)] = current;\n        }\n\n        hScore[getIndex(neighbor.x, neighbor.y, cols)] = heuristic(neighbor, goal, heuristicType);\n        openSet.insert({\n          point: neighbor,\n          val: hScore[getIndex(neighbor.x, neighbor.y, cols)]\n        });\n        const newState = { ...memState,\n          grid: memState.grid.map((square, index) => {\n            if (neighbor.x === square.x && neighbor.y === square.y) {\n              if (neighbor.type !== \"start\" && neighbor.type !== \"end\") {\n                memState.grid[index] = { ...memState.grid[index],\n                  val: true,\n                  type: \"openset\"\n                };\n              }\n\n              return { ...square\n              };\n            }\n\n            return { ...square\n            };\n          })\n        };\n        states.push(newState);\n        return null;\n      });\n      discovered[getIndex(current.x, current.y, cols)] = \"discovered\";\n    }\n  }\n\n  return states;\n}\n\nexport default GreedyBFS;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Algorithms/GreedyBFS.js"],"names":["MinHeap","getIndex","x","y","cols","heuristic","startPoint","endPoint","console","log","distance","Math","sqrt","pow","abs","dist","getPoints","gridMap","endPoints","map","square","val","type","push","getNeighbors","point","rows","discovered","neighbors","Array","left","right","up","down","topLeft","topRight","bottomLeft","bottomRight","GreedyBFS","heuristicType","memState","setState","openSet","gScore","cameFrom","hScore","states","newState","grid","fill","i","goal","endPointDistances","length","sort","a","b","insert","getHeap","current","peek","extract","index","state","prev","neighbor","currentPathGScore"],"mappings":"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","sourcesContent":["import MinHeap from './MinHeap';\n\nfunction getIndex(x, y, cols){\n    return (x + (y * cols));\n}\n\nfunction heuristic(startPoint, endPoint, heuristic){\n    console.log(heuristic);\n    //TODO make this a switch for the different types of heuristic functions\n    let distance;\n    switch (heuristic) {\n        case \"euclidean\":\n            distance = Math.sqrt(Math.pow((endPoint.x-startPoint.x), 2) + Math.pow((endPoint.y-startPoint.y), 2));\n\n            break;\n        \n        case \"manhattan\":\n            distance = Math.abs(startPoint.x-endPoint.x) +  Math.abs(startPoint.y-endPoint.y);\n\n            break;\n\n        default:\n            distance = Math.sqrt(Math.pow((endPoint.x-startPoint.x), 2) + Math.pow((endPoint.y-startPoint.y), 2));\n\n            break;\n    }\n    \n    return distance;\n}\n\nfunction dist(startPoint, endPoint){\n    //TODO make this a switch for the different types of heuristic functions\n    const distance = Math.sqrt(Math.pow((endPoint.x-startPoint.x), 2) + Math.pow((endPoint.y-startPoint.y), 2)); \n\n    return distance;\n}\n\nfunction getPoints(gridMap){\n    let startPoint = null;\n    let endPoints = [];\n    \n    gridMap.map((square) => {\n        if(square.val && square.type ===  \"start\"){\n            // console.log(square);\n            startPoint = square;\n\n            return null;\n        }\n\n        if(square.val && square.type === \"end\"){\n            // console.log(square);\n            endPoints.push(square);\n\n            return null;\n        }\n\n        return null;\n    })\n\n    return [startPoint, endPoints];\n}\n\nfunction getNeighbors(point, gridMap, rows, cols, discovered){\n    //Point                                 Index\n    // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n    // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n    // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n    // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n    // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n    // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n    // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n    // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n\n    const neighbors = new Array(8);\n    //Reordered neighbors for better visualization\n    if(point.x > 0){\n        const left = getIndex((point.x-1), (point.y), cols);\n\n        if(gridMap[left].type !== \"wall\" && gridMap[left].type !== \"start\" && !discovered[getIndex(gridMap[left].x, gridMap[left].y, cols)]){\n            neighbors[0] = gridMap[left];\n        }\n    }\n    if(point.x < cols-1){\n        const right = getIndex((point.x+1), (point.y), cols);\n\n        if(gridMap[right].type !== \"wall\" && gridMap[right].type !== \"start\" && !discovered[getIndex(gridMap[right].x, gridMap[right].y, cols)]){\n            neighbors[1] = gridMap[right];\n        }\n    }\n    if(point.y > 0){\n        const up = getIndex((point.x), (point.y-1), cols);\n\n        if(gridMap[up].type !== \"wall\" && gridMap[up].type !== \"start\" && !discovered[getIndex(gridMap[up].x, gridMap[up].y, cols)]){\n            neighbors[2] = gridMap[up];\n        }\n    }\n    if(point.y < rows-1){\n        const down = getIndex((point.x), (point.y+1), cols);\n\n        if(gridMap[down].type !== \"wall\" && gridMap[down].type !== \"start\" && !discovered[getIndex(gridMap[down].x, gridMap[down].y, cols)]){\n            neighbors[3] = gridMap[down];\n        }\n    }\n    if(point.x > 0 && point.y > 0){\n        const topLeft = getIndex((point.x-1), (point.y-1), cols);\n\n        if(gridMap[topLeft].type !== \"wall\" && gridMap[topLeft].type !== \"start\" && !discovered[getIndex(gridMap[topLeft].x, gridMap[topLeft].y, cols)]){\n            neighbors[4] = gridMap[topLeft];\n        }\n    }\n    if(point.x < cols-1 && point.y > 0){\n        const topRight = getIndex((point.x+1), (point.y-1), cols);\n\n        if(gridMap[topRight].type !== \"wall\" && gridMap[topRight].type !== \"start\" && !discovered[getIndex(gridMap[topRight].x, gridMap[topRight].y, cols)]){\n            neighbors[5] = gridMap[topRight];\n        }\n    }\n    if(point.x > 0 && point.y < rows-1){\n        const bottomLeft  = getIndex((point.x-1), (point.y+1), cols);\n\n        if(gridMap[bottomLeft].type !== \"wall\" && gridMap[bottomLeft].type !== \"start\" && !discovered[getIndex(gridMap[bottomLeft].x, gridMap[bottomLeft].y, cols)]){\n            neighbors[6] = gridMap[bottomLeft];\n        }\n    }\n    if(point.x < cols-1 && point.y < rows-1){\n        const bottomRight = getIndex((point.x+1), (point.y+1), cols);\n\n        if(gridMap[bottomRight].type !== \"wall\" && gridMap[bottomRight].type !== \"start\" && !discovered[getIndex(gridMap[bottomRight].x, gridMap[bottomRight].y, cols)]){\n            neighbors[7] = gridMap[bottomRight];\n        }\n    }\n\n    return neighbors;\n}\n\nfunction GreedyBFS(rows, cols, gridMap, heuristicType, memState, setState){\n    const [startPoint, endPoints] = getPoints(gridMap);\n    const openSet = new MinHeap();\n    const discovered = {};\n    const gScore = {};\n    const cameFrom = {};\n    const hScore = {};\n    const states = [];\n\n    //TODO: Bug, clears grid but then returns it to its previous state\n    const newState = {\n        ...memState,\n        grid: new Array(rows*cols).fill({val: false, type: null}).map((square, i) => {\n            return {\n                ...square,\n                x: i % cols,\n                y: Math.abs((i - (i % cols)) / cols)\n            }\n        })\n    }\n    states.push(newState);\n\n    let goal = null;\n\n    if(!startPoint || !endPoints){\n        console.log(\"Map must have a start point, and an end point\");\n        return \"Map must have a start point, and an end point\"; \n    }\n\n    cameFrom[getIndex(startPoint.x, startPoint.y, cols)] = null;\n\n    const endPointDistances = new Array(endPoints.length);\n\n    endPoints.map((endPoint, i) => {\n        endPointDistances[i] = [endPoint, heuristic(startPoint, endPoint, heuristicType)];\n\n        return null;\n    })\n    \n    endPointDistances.sort((a, b) => {\n        if(a[1] > b[1]){\n            return 1\n        }\n        if(a[1] < b[1]){\n            return -1\n        }\n\n        return 0;\n    });\n\n    goal = endPointDistances[0][0];\n\n    gScore[getIndex(startPoint.x, startPoint.y, cols)] = 0;\n\n    hScore[getIndex(startPoint.x, startPoint.y, cols)] = endPointDistances[0][1];\n\n    openSet.insert({point: startPoint, val: hScore[getIndex(startPoint.x, startPoint.y, cols)]});\n\n    while(openSet.getHeap().length !== 0){\n        // console.log(Array.from(openSet.getHeap()));\n        const current = openSet.peek().point;\n        // console.log(Object.assign({},current);\n\n        openSet.extract();\n        \n        const newState = {\n            ...memState,\n            grid: memState.grid.map((square, index) => {\n                if(current.x === square.x && current.y === square.y){\n                    if(current.type !== \"start\" && current.type !== \"end\"){\n                        memState.grid[index] = {\n                            ...memState.grid[index],\n                            val: true,\n                            type: \"neighbors\"\n                        }\n                    }\n                    return {...square}\n                }\n                return {...square}\n            })\n        }\n        states.push(newState);\n\n        if(!discovered[getIndex(current.x, current.y, cols)]){\n            if(current.x === goal.x && current.y === goal.y){\n                console.log(cameFrom)\n                const state = states[states.length-1];\n                setState({\n                    ...state,\n                    //state object is immutable so updates have to be done this way\n                    grid: state.grid.map((square, index) => {\n                        if(cameFrom[index]){\n                            if(square.type === \"end\"){\n                                let prev = cameFrom[index];\n                    \n                                while(prev){\n                                    console.log(\"hello\");            \n                                    if(prev.type !== \"start\" && prev.type !== \"end\"){\n                                        state.grid[getIndex(prev.x,prev.y,state.cols)] = {\n                                            ...state.grid[getIndex(prev.x,prev.y,state.cols)],\n                                            val: true,\n                                            type: \"path\"\n                                        }\n                                    }\n                                    prev = cameFrom[getIndex(prev.x,prev.y,state.cols)];\n                                }\n                                return {...square};\n                            }\n                            return {...square};\n                        }\n                        return {...square};\n                    })\n                \n                });\n\n                console.log(\"PATH FOUND!!!!!\");\n                return states;\n            }\n\n            const neighbors = getNeighbors(current, gridMap, rows, cols, discovered);\n\n            neighbors.map((neighbor) => {\n                // console.log(\"neighbor\", neighbor);\n                const currentPathGScore = gScore[getIndex(current.x, current.y, cols)] + dist(current, neighbor);\n\n                console.log(current.x, current.y, gScore[getIndex(current.x, current.y, cols)]);\n                console.log(neighbor.x, neighbor.y, gScore[getIndex(neighbor.x, neighbor.y, cols)]);\n                if(currentPathGScore < gScore[getIndex(neighbor.x, neighbor.y, cols)] || !gScore[getIndex(neighbor.x, neighbor.y, cols)]){\n                    cameFrom[getIndex(neighbor.x, neighbor.y, cols)] = current;\n                }\n                \n                hScore[getIndex(neighbor.x, neighbor.y, cols)] = heuristic(neighbor, goal, heuristicType);\n            \n                openSet.insert({point: neighbor, val: hScore[getIndex(neighbor.x, neighbor.y, cols)]});\n                \n                const newState = {\n                    ...memState,\n                    grid: memState.grid.map((square, index) => {\n                        if(neighbor.x === square.x && neighbor.y === square.y){\n                            if(neighbor.type !== \"start\" && neighbor.type !== \"end\"){\n                                memState.grid[index] = {\n                                    ...memState.grid[index],\n                                    val: true,\n                                    type: \"openset\"\n                                }\n                            }\n                            return {...square}\n                        }\n                        return {...square}\n                    })\n                }\n                states.push(newState); \n                    \n                return null;\n            });\n\n            discovered[getIndex(current.x, current.y, cols)] = \"discovered\";\n        }\n    }\n\n    return states;\n}\n\nexport default GreedyBFS;"]},"metadata":{},"sourceType":"module"}