{"ast":null,"code":"var _jsxFileName = \"/home/menekou/projects/react/shortest-path/react-frontend/src/Routes.js\";\nimport React, { useState, useMemo, useEffect } from \"react\";\nimport axios from \"axios\";\nimport apolloClient from './ApolloConfig';\nimport LoginPage from './Login Page/LoginPage';\nimport Home from './Home/Home';\nimport App from './App/App';\nimport { ApolloProvider } from '@apollo/client';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\nimport UserContext from './UserContext';\nimport RouteGuard from './RouteGuard';\nimport { createBrowserHistory } from 'history';\nimport TopNav from \"./TopNav/TopNav\";\nconst history = createBrowserHistory();\n\nfunction Routes() {\n  const [prevPathname, setPrevPathname] = useState();\n  const [user, setUser] = useState();\n  console.log(user);\n  axios.interceptors.request.use(function (request) {\n    request.headers[\"Content-Type\"] = 'application/json; charset=utf-8';\n    request.headers[\"Accept\"] = 'application/json';\n    request.headers[\"authorization\"] = user ? `Bearer ${user.accessToken}` : \"\";\n    request.withCredentials = true;\n    return request;\n  }, function (error) {\n    return Promise.reject(error);\n  });\n  const value = useMemo(() => [user, setUser], [user, setUser]);\n  useEffect(() => {\n    const updateUser = userData => {\n      if (!userData.accessToken) {\n        setUser(null);\n        return;\n      }\n\n      setUser({\n        username: userData.username,\n        role: userData.role,\n        accessToken: userData.accessToken\n      });\n      return;\n    };\n\n    axios.get(\"http://localhost:3000/refreshToken\").then(response => {\n      updateUser(response.data);\n      return;\n    }).catch(error => {\n      console.log(error.data);\n      return;\n    });\n\n    if (prevPathname != window.location.pathname) {\n      set;\n    }\n  }, []);\n  return /*#__PURE__*/React.createElement(Router, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, console.log(history.location.pathname), history.location.pathname !== \"/login\" && /*#__PURE__*/React.createElement(TopNav, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(UserContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ApolloProvider, {\n    client: apolloClient,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Redirect, {\n    to: \"/home\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 54\n    }\n  })), /*#__PURE__*/React.createElement(RouteGuard, {\n    path: \"/app\",\n    component: App,\n    user: user,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(RouteGuard, {\n    path: \"/home\",\n    component: Home,\n    user: user,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(RouteGuard, {\n    path: \"/login\",\n    component: LoginPage,\n    user: user,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 25\n    }\n  })))));\n}\n\n;\nexport default Routes;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Routes.js"],"names":["React","useState","useMemo","useEffect","axios","apolloClient","LoginPage","Home","App","ApolloProvider","BrowserRouter","Router","Switch","Route","Redirect","UserContext","RouteGuard","createBrowserHistory","TopNav","history","Routes","prevPathname","setPrevPathname","user","setUser","console","log","interceptors","request","use","headers","accessToken","withCredentials","error","Promise","reject","value","updateUser","userData","username","role","get","then","response","data","catch","window","location","pathname","set"],"mappings":"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","sourcesContent":["import React, { useState, useMemo, useEffect } from \"react\";\nimport axios from \"axios\";\nimport apolloClient from './ApolloConfig'\nimport LoginPage from './Login Page/LoginPage';\nimport Home from './Home/Home';\nimport App from './App/App';\nimport { ApolloProvider } from '@apollo/client';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\nimport UserContext from './UserContext';\nimport RouteGuard from './RouteGuard';\nimport { createBrowserHistory } from 'history'\nimport TopNav from \"./TopNav/TopNav\";\n\nconst history = createBrowserHistory();\n\nfunction Routes() {\n    const [prevPathname, setPrevPathname] = useState();\n    const [user, setUser] = useState();\n\n    console.log(user);\n\n    axios.interceptors.request.use(\n        function(request) {\n            request.headers[\"Content-Type\"] = 'application/json; charset=utf-8';\n            request.headers[\"Accept\"] = 'application/json';\n            request.headers[\"authorization\"] = user ? `Bearer ${user.accessToken}` : \"\";\n            request.withCredentials = true;\n            return request;\n        },\n        function(error) {\n            return Promise.reject(error);\n        }\n    );\n\n    const value = useMemo(() => ([user, setUser]), [user, setUser]);\n\n    useEffect(() => {\n        const updateUser = (userData) => {\n            if(!userData.accessToken){\n                setUser(null);\n\n                return;\n            }\n\n            setUser({\n              username: userData.username,\n              role: userData.role,\n              accessToken: userData.accessToken\n            })\n        \n            return;\n        }\n\n        axios.get(\"http://localhost:3000/refreshToken\")\n            .then((response) => {\n                updateUser(response.data);\n\n                return;\n            })\n            .catch((error) => {\n                console.log(error.data);\n                 return;\n            });\n        \n        if(prevPathname != window.location.pathname){\n            set\n        }\n    }, []);\n\n    return (\n        <Router>\n            {console.log(history.location.pathname)}\n            {history.location.pathname !== \"/login\" &&\n                <TopNav/>\n            }\n            <UserContext.Provider value={value}>\n                <ApolloProvider client={apolloClient}>\n                    <Switch>\n                        <Route exact={true} path=\"/\"><Redirect to=\"/home\"/></Route>\n                        <RouteGuard \n                            path='/app' \n                            component={App} \n                            user={user} \n                        />\n                        <RouteGuard \n                            path='/home' \n                            component={Home} \n                            user={user} \n                        />\n                        <RouteGuard \n                            path=\"/login\" \n                            component={LoginPage}\n                            user={user}\n                        />\n                    </Switch>\n                </ApolloProvider>\n            </UserContext.Provider>\n        </Router>\n    );\n};\nexport default Routes;"]},"metadata":{},"sourceType":"module"}