{"ast":null,"code":"import MinHeap from '../MinHeap';\n\nfunction getIndex(x, y, cols) {\n  return x + y * cols;\n}\n\nfunction heuristic(startPoint, endPoint, heuristic) {\n  //TODO make this a switch for the different types of heuristic functions\n  let distance;\n\n  switch (heuristic) {\n    case \"euclidean\":\n      distance = Math.sqrt(Math.pow(endPoint.x - startPoint.x, 2) + Math.pow(endPoint.y - startPoint.y, 2));\n      break;\n\n    case \"manhattan\":\n      distance = Math.abs(startPoint.x - endPoint.x) + Math.abs(startPoint.y - endPoint.y);\n      break;\n\n    default:\n      distance = Math.sqrt(Math.pow(endPoint.x - startPoint.x, 2) + Math.pow(endPoint.y - startPoint.y, 2));\n      break;\n  }\n\n  return distance;\n}\n\nfunction getPoints(gridMap) {\n  let startPoint = null;\n  let endPoints = [];\n  gridMap.map(square => {\n    if (square.val && square.type === \"start\") {\n      // console.log(square);\n      startPoint = square;\n      return null;\n    }\n\n    if (square.val && square.type === \"end\") {\n      // console.log(square);\n      endPoints.push(square);\n      return null;\n    }\n\n    return null;\n  });\n  return [startPoint, endPoints];\n}\n\nfunction getNeighbors(point, gridMap, rows, cols, cutCorners, allowDiags) {\n  //Point                                 Index\n  // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n  // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n  // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n  // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n  // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n  // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n  // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n  // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n  const neighbors = new Array(8);\n\n  if (point.x > 0) {\n    const left = getIndex(point.x - 1, point.y, cols);\n\n    if (gridMap[left].type !== \"wall\" && gridMap[left].type !== \"start\") {\n      neighbors[0] = gridMap[left];\n    }\n  }\n\n  if (point.x < cols - 1) {\n    const right = getIndex(point.x + 1, point.y, cols);\n\n    if (gridMap[right].type !== \"wall\" && gridMap[right].type !== \"start\") {\n      neighbors[1] = gridMap[right];\n    }\n  }\n\n  if (point.y > 0) {\n    const up = getIndex(point.x, point.y - 1, cols);\n\n    if (gridMap[up].type !== \"wall\" && gridMap[up].type !== \"start\") {\n      neighbors[2] = gridMap[up];\n    }\n  }\n\n  if (point.y < rows - 1) {\n    const down = getIndex(point.x, point.y + 1, cols);\n\n    if (gridMap[down].type !== \"wall\" && gridMap[down].type !== \"start\") {\n      neighbors[3] = gridMap[down];\n    }\n  }\n\n  if (point.x > 0 && point.y > 0) {\n    const topLeft = getIndex(point.x - 1, point.y - 1, cols);\n\n    if (gridMap[topLeft].type !== \"wall\" && gridMap[topLeft].type !== \"start\") {\n      if (allowDiags) {\n        if (!cutCorners) {\n          if (gridMap[topLeft + 1].type !== \"wall\" && gridMap[topLeft + 50].type !== \"wall\") {\n            neighbors[4] = gridMap[topLeft];\n          }\n        } else {\n          neighbors[4] = gridMap[topLeft];\n        }\n      }\n    }\n  }\n\n  if (point.x < cols - 1 && point.y > 0) {\n    const topRight = getIndex(point.x + 1, point.y - 1, cols);\n\n    if (gridMap[topRight].type !== \"wall\" && gridMap[topRight].type !== \"start\") {\n      if (allowDiags) {\n        if (!cutCorners) {\n          if (gridMap[topRight - 1].type !== \"wall\" && gridMap[topRight + 50].type !== \"wall\") {\n            neighbors[5] = gridMap[topRight];\n          }\n        } else {\n          neighbors[5] = gridMap[topRight];\n        }\n      }\n    }\n  }\n\n  if (point.x > 0 && point.y < rows - 1) {\n    const bottomLeft = getIndex(point.x - 1, point.y + 1, cols);\n\n    if (gridMap[bottomLeft].type !== \"wall\" && gridMap[bottomLeft].type !== \"start\") {\n      if (allowDiags) {\n        if (!cutCorners) {\n          if (gridMap[bottomLeft + 1].type !== \"wall\" && gridMap[bottomLeft - 50].type !== \"wall\") {\n            neighbors[6] = gridMap[bottomLeft];\n          }\n        } else {\n          neighbors[6] = gridMap[bottomLeft];\n        }\n      }\n    }\n  }\n\n  if (point.x < cols - 1 && point.y < rows - 1) {\n    const bottomRight = getIndex(point.x + 1, point.y + 1, cols);\n\n    if (gridMap[bottomRight].type !== \"wall\" && gridMap[bottomRight].type !== \"start\") {\n      if (allowDiags) {\n        if (!cutCorners) {\n          if (gridMap[bottomRight - 1].type !== \"wall\" && gridMap[bottomRight - 50].type !== \"wall\") {\n            neighbors[7] = gridMap[bottomRight];\n          }\n        } else {\n          neighbors[7] = gridMap[bottomRight];\n        }\n      }\n    }\n  }\n\n  return neighbors;\n}\n\nfunction GreedyBFS(rows, cols, gridMap, heuristicType, memState, setState, cutCorners, allowDiags) {\n  const [startPoint, endPoints] = getPoints(gridMap);\n  const openSetFromLeft = new MinHeap();\n  const openSetFromRight = new MinHeap();\n  const closedSetFromLeft = {};\n  const closedSetFromRight = {};\n  const cameFromLeft = {};\n  const cameFromRight = {};\n  const hScoreFromRight = {};\n  const hScoreFromLeft = {};\n  const states = []; //TODO: Bug, clears grid but then returns it to its previous state\n\n  const newState = { ...memState,\n    grid: new Array(rows * cols).fill({\n      val: false,\n      type: null\n    }).map((square, i) => {\n      return { ...square,\n        x: i % cols,\n        y: Math.abs((i - i % cols) / cols)\n      };\n    })\n  };\n  states.push(newState);\n  let goal = null;\n\n  if (!startPoint || !endPoints) {\n    console.log(\"Map must have a start point, and an end point\");\n    return \"Map must have a start point, and an end point\";\n  }\n\n  cameFromLeft[getIndex(startPoint.x, startPoint.y, cols)] = null;\n  const endPointDistances = new Array(endPoints.length);\n  endPoints.map((endPoint, i) => {\n    endPointDistances[i] = [endPoint, heuristic(startPoint, endPoint, heuristicType)];\n    return null;\n  });\n  endPointDistances.sort((a, b) => {\n    if (a[1] > b[1]) {\n      return 1;\n    }\n\n    if (a[1] < b[1]) {\n      return -1;\n    }\n\n    return 0;\n  });\n  goal = endPointDistances[0][0];\n  hScoreFromLeft[getIndex(startPoint.x, startPoint.y, cols)] = endPointDistances[0][1];\n  openSetFromLeft.insert({\n    point: startPoint,\n    val: hScoreFromLeft[getIndex(startPoint.x, startPoint.y, cols)]\n  }); // discovered[getIndex(startPoint.x, startPoint.y, cols)] = \"discovered\";\n\n  hScoreFromRight[getIndex(goal.x, goal.y, cols)] = heuristic(goal, startPoint, heuristicType);\n  openSetFromRight.insert({\n    point: startPoint,\n    val: hScoreFromRight[getIndex(goal.x, goal.y, cols)]\n  });\n\n  while (openSetFromLeft.getHeap().length !== 0 && openSetFromRight.getHeap().length !== 0) {\n    // console.log(Array.from(openSet.getHeap()));\n    const current1 = openSetFromLeft.peek().point;\n    const current2 = openSetFromRight.peek().point; // console.log(Object.assign({},current));\n\n    openSetFromLeft.extract();\n    openSetFromRight.extract();\n    closedSetFromLeft[getIndex(current1.x, current1.y, cols)] = current1;\n    closedSetFromRight[getIndex(current2.x, current2.y, cols)] = current2;\n    const newState = { ...memState,\n      grid: memState.grid.map((square, index) => {\n        if (current1.x === square.x && current1.y === square.y) {\n          if (current1.type !== \"start\" && current1.type !== \"end\") {\n            memState.grid[index] = { ...memState.grid[index],\n              val: true,\n              type: \"neighbors\"\n            };\n          }\n\n          return { ...square\n          };\n        }\n\n        if (current2.x === square.x && current2.y === square.y) {\n          if (current2.type !== \"start\" && current2.type !== \"end\") {\n            memState.grid[index] = { ...memState.grid[index],\n              val: true,\n              type: \"neighbors\"\n            };\n          }\n\n          return { ...square\n          };\n        }\n\n        return { ...square\n        };\n      })\n    };\n    states.push(newState);\n\n    if (closedSetFromLeft[getIndex(current2.x, current2.y, cols)] || closedSetFromRight[getIndex(current1.x, current1.y, cols)]) {\n      console.log(cameFromLeft);\n      console.log(cameFromRight);\n      let cameFromLeftPoint;\n      let cameFromRightPoint;\n\n      if (closedSetFromLeft[getIndex(current2.x, current2.y, cols)]) {\n        cameFromRightPoint = current2;\n        cameFromLeftPoint = current2;\n      } else if (closedSetFromRight[getIndex(current1.x, current1.y, cols)]) {\n        cameFromRightPoint = current1;\n        cameFromLeftPoint = current1;\n      }\n\n      const state = states[states.length - 1];\n      setState({ // return {\n        ...state,\n        //state object is immutable so updates have to be done this way\n        grid: state.grid.map((square, index) => {\n          if (cameFromLeft[index] || cameFromRight[index]) {\n            if (square.x === cameFromLeftPoint.x && square.y === cameFromLeftPoint.y) {\n              let prev = cameFromLeftPoint;\n\n              while (prev) {\n                if (prev.type !== \"start\") {\n                  state.grid[getIndex(prev.x, prev.y, state.cols)] = { ...state.grid[getIndex(prev.x, prev.y, state.cols)],\n                    val: true,\n                    type: \"path\"\n                  };\n                }\n\n                prev = cameFromLeft[getIndex(prev.x, prev.y, state.cols)];\n              }\n\n              return { ...square\n              };\n            }\n\n            if (square.x === cameFromRightPoint.x && square.y === cameFromRightPoint.y) {\n              let prev = cameFromRightPoint;\n\n              while (prev) {\n                if (prev.type !== \"end\") {\n                  state.grid[getIndex(prev.x, prev.y, state.cols)] = { ...state.grid[getIndex(prev.x, prev.y, state.cols)],\n                    val: true,\n                    type: \"path\"\n                  };\n                }\n\n                prev = cameFromRight[getIndex(prev.x, prev.y, state.cols)];\n              }\n\n              return { ...square\n              };\n            }\n\n            return { ...square\n            };\n          }\n\n          return { ...square\n          };\n        })\n      });\n      console.log(\"PATH FOUND!!!!!\");\n      return states;\n    }\n\n    ;\n    const neighbors1 = getNeighbors(current1, gridMap, rows, cols, cutCorners, allowDiags);\n    const neighbors2 = getNeighbors(current2, gridMap, rows, cols, cutCorners, allowDiags);\n    neighbors1.map(neighbor => {\n      // console.log(\"neighbor\", neighbor);\n      if (!closedSetFromLeft[getIndex(neighbor.x, neighbor.y, cols)]) {\n        const current1HScore = heuristic(neighbor, goal, heuristicType);\n\n        if (current1HScore < hScoreFromLeft[getIndex(neighbor.x, neighbor.y, cols)] || !hScoreFromLeft[getIndex(neighbor.x, neighbor.y, cols)]) {\n          cameFromLeft[getIndex(neighbor.x, neighbor.y, cols)] = current1; //<---\n\n          hScoreFromLeft[getIndex(neighbor.x, neighbor.y, cols)] = current1HScore;\n\n          if (!openSetFromLeft.find(hScoreFromLeft[getIndex(neighbor.x, neighbor.y, cols)], neighbor)) {\n            //See <---\n            openSetFromLeft.insert({\n              point: neighbor,\n              val: hScoreFromLeft[getIndex(neighbor.x, neighbor.y, cols)]\n            });\n            const newState = { ...memState,\n              grid: memState.grid.map((square, index) => {\n                if (neighbor.x === square.x && neighbor.y === square.y) {\n                  if (neighbor.type !== \"start\" && neighbor.type !== \"end\") {\n                    memState.grid[index] = { ...memState.grid[index],\n                      val: true,\n                      type: \"openset\"\n                    };\n                  }\n\n                  return { ...square\n                  };\n                }\n\n                return { ...square\n                };\n              })\n            };\n            states.push(newState);\n          }\n\n          return null;\n        }\n\n        return null;\n      }\n\n      return null;\n    });\n    neighbors2.map(neighbor => {\n      // console.log(\"neighbor\", neighbor);\n      if (!closedSetFromRight[getIndex(neighbor.x, neighbor.y, cols)]) {\n        const current2HScore = heuristic(neighbor, goal, heuristicType);\n\n        if (current2HScore < hScoreFromRight[getIndex(neighbor.x, neighbor.y, cols)] || !hScoreFromRight[getIndex(neighbor.x, neighbor.y, cols)]) {\n          cameFromRight[getIndex(neighbor.x, neighbor.y, cols)] = current2; //<---\n\n          hScoreFromRight[getIndex(neighbor.x, neighbor.y, cols)] = current2HScore;\n\n          if (!openSetFromRight.find(hScoreFromRight[getIndex(neighbor.x, neighbor.y, cols)], neighbor)) {\n            //See <---\n            openSetFromRight.insert({\n              point: neighbor,\n              val: hScoreFromRight[getIndex(neighbor.x, neighbor.y, cols)]\n            });\n            const newState = { ...memState,\n              grid: memState.grid.map((square, index) => {\n                if (neighbor.x === square.x && neighbor.y === square.y) {\n                  if (neighbor.type !== \"start\" && neighbor.type !== \"end\") {\n                    memState.grid[index] = { ...memState.grid[index],\n                      val: true,\n                      type: \"openset\"\n                    };\n                  }\n\n                  return { ...square\n                  };\n                }\n\n                return { ...square\n                };\n              })\n            };\n            states.push(newState);\n          }\n\n          return null;\n        }\n\n        return null;\n      }\n\n      return null;\n    });\n  }\n\n  return states;\n}\n\nexport default GreedyBFS;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Algorithms/Bi-Directional/GreedyBFS.js"],"names":["MinHeap","getIndex","x","y","cols","heuristic","startPoint","endPoint","distance","Math","sqrt","pow","abs","getPoints","gridMap","endPoints","map","square","val","type","push","getNeighbors","point","rows","cutCorners","allowDiags","neighbors","Array","left","right","up","down","topLeft","topRight","bottomLeft","bottomRight","GreedyBFS","heuristicType","memState","setState","openSetFromLeft","openSetFromRight","closedSetFromLeft","closedSetFromRight","cameFromLeft","cameFromRight","hScoreFromRight","hScoreFromLeft","states","newState","grid","fill","i","goal","console","log","endPointDistances","length","sort","a","b","insert","getHeap","current1","peek","current2","extract","index","cameFromLeftPoint","cameFromRightPoint","state","prev","neighbors1","neighbors2","neighbor","current1HScore","find","current2HScore"],"mappings":"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","sourcesContent":["import MinHeap from '../MinHeap';\n\nfunction getIndex(x, y, cols){\n    return (x + (y * cols));\n}\n\nfunction heuristic(startPoint, endPoint, heuristic){\n    //TODO make this a switch for the different types of heuristic functions\n    let distance;\n    switch (heuristic) {\n        case \"euclidean\":\n            distance = Math.sqrt(Math.pow((endPoint.x-startPoint.x), 2) + Math.pow((endPoint.y-startPoint.y), 2));\n\n            break;\n        \n        case \"manhattan\":\n            distance = Math.abs(startPoint.x-endPoint.x) +  Math.abs(startPoint.y-endPoint.y);\n\n            break;\n\n        default:\n            distance = Math.sqrt(Math.pow((endPoint.x-startPoint.x), 2) + Math.pow((endPoint.y-startPoint.y), 2));\n\n            break;\n    }\n    \n    return distance;\n}\n\nfunction getPoints(gridMap){\n    let startPoint = null;\n    let endPoints = [];\n    \n    gridMap.map((square) => {\n        if(square.val && square.type ===  \"start\"){\n            // console.log(square);\n            startPoint = square;\n\n            return null;\n        }\n\n        if(square.val && square.type === \"end\"){\n            // console.log(square);\n            endPoints.push(square);\n\n            return null;\n        }\n\n        return null;\n    })\n\n    return [startPoint, endPoints];\n}\n\nfunction getNeighbors(point, gridMap, rows, cols, cutCorners, allowDiags){\n    //Point                                 Index\n    // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n    // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n    // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n    // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n    // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n    // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n    // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n    // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n\n    const neighbors = new Array(8);\n\n    if(point.x > 0){\n        const left = getIndex((point.x-1), (point.y), cols);\n\n        if(gridMap[left].type !== \"wall\" && gridMap[left].type !== \"start\"){\n            neighbors[0] = gridMap[left];\n        }\n    }\n    if(point.x < cols-1){\n        const right = getIndex((point.x+1), (point.y), cols);\n\n        if(gridMap[right].type !== \"wall\" && gridMap[right].type !== \"start\"){\n            neighbors[1] = gridMap[right];\n        }\n    }\n    if(point.y > 0){\n        const up = getIndex((point.x), (point.y-1), cols);\n\n        if(gridMap[up].type !== \"wall\" && gridMap[up].type !== \"start\"){\n            neighbors[2] = gridMap[up];\n        }\n    }\n    if(point.y < rows-1){\n        const down = getIndex((point.x), (point.y+1), cols);\n\n        if(gridMap[down].type !== \"wall\" && gridMap[down].type !== \"start\"){\n            neighbors[3] = gridMap[down];\n        }\n    }\n    if(point.x > 0 && point.y > 0){\n        const topLeft = getIndex((point.x-1), (point.y-1), cols);\n\n        if(gridMap[topLeft].type !== \"wall\" && gridMap[topLeft].type !== \"start\"){\n            if(allowDiags){\n                if(!cutCorners){\n                    if(gridMap[topLeft+1].type !== \"wall\" && gridMap[topLeft+50].type !== \"wall\"){\n                        neighbors[4] = gridMap[topLeft];\n                    }\n                }else{\n                    neighbors[4] = gridMap[topLeft];\n                }\n            }\n        }\n    }\n    if(point.x < cols-1 && point.y > 0){\n        const topRight = getIndex((point.x+1), (point.y-1), cols);\n\n        if(gridMap[topRight].type !== \"wall\" && gridMap[topRight].type !== \"start\"){\n            if(allowDiags){\n                if(!cutCorners){\n                    if(gridMap[topRight-1].type !== \"wall\" && gridMap[topRight+50].type !== \"wall\"){\n                        neighbors[5] = gridMap[topRight];\n                    }\n                }else{\n                    neighbors[5] = gridMap[topRight];\n                }\n            }\n        }\n    }\n    if(point.x > 0 && point.y < rows-1){\n        const bottomLeft  = getIndex((point.x-1), (point.y+1), cols);\n\n        if(gridMap[bottomLeft].type !== \"wall\" && gridMap[bottomLeft].type !== \"start\"){\n            if(allowDiags){\n                if(!cutCorners){\n                    if(gridMap[bottomLeft+1].type !== \"wall\" && gridMap[bottomLeft-50].type !== \"wall\"){\n                        neighbors[6] = gridMap[bottomLeft];\n                    }\n                }else{\n                    neighbors[6] = gridMap[bottomLeft];\n                }\n            }\n        }\n    }\n    if(point.x < cols-1 && point.y < rows-1){\n        const bottomRight = getIndex((point.x+1), (point.y+1), cols);\n\n        if(gridMap[bottomRight].type !== \"wall\" && gridMap[bottomRight].type !== \"start\"){\n            if(allowDiags){\n                if(!cutCorners){\n                    if(gridMap[bottomRight-1].type !== \"wall\" && gridMap[bottomRight-50].type !== \"wall\"){\n                        neighbors[7] = gridMap[bottomRight];\n                    }\n                }else{\n                    neighbors[7] = gridMap[bottomRight]\n                }\n            }\n        }\n    }\n\n    return neighbors;\n}\n\nfunction GreedyBFS(rows, cols, gridMap, heuristicType, memState, setState, cutCorners, allowDiags){\n    const [startPoint, endPoints] = getPoints(gridMap);\n    const openSetFromLeft = new MinHeap();\n    const openSetFromRight = new MinHeap();\n    const closedSetFromLeft = {};\n    const closedSetFromRight = {};\n    const cameFromLeft = {};\n    const cameFromRight = {}\n    const hScoreFromRight = {};\n    const hScoreFromLeft = {};\n    const states = [];\n\n    //TODO: Bug, clears grid but then returns it to its previous state\n    const newState = {\n        ...memState,\n        grid: new Array(rows*cols).fill({val: false, type: null}).map((square, i) => {\n            return {\n                ...square,\n                x: i % cols,\n                y: Math.abs((i - (i % cols)) / cols)\n            }\n        })\n    }\n    states.push(newState);\n\n    let goal = null;\n\n    if(!startPoint || !endPoints){\n        console.log(\"Map must have a start point, and an end point\");\n        return \"Map must have a start point, and an end point\"; \n    }\n\n    cameFromLeft[getIndex(startPoint.x, startPoint.y, cols)] = null;\n\n    const endPointDistances = new Array(endPoints.length);\n\n    endPoints.map((endPoint, i) => {\n        endPointDistances[i] = [endPoint, heuristic(startPoint, endPoint, heuristicType)];\n\n        return null;\n    })\n    \n    endPointDistances.sort((a, b) => {\n        if(a[1] > b[1]){\n            return 1\n        }\n        if(a[1] < b[1]){\n            return -1\n        }\n\n        return 0;\n    });\n\n    goal = endPointDistances[0][0];\n\n    hScoreFromLeft[getIndex(startPoint.x, startPoint.y, cols)] = endPointDistances[0][1];\n\n    openSetFromLeft.insert({point: startPoint, val: hScoreFromLeft[getIndex(startPoint.x, startPoint.y, cols)]});\n    // discovered[getIndex(startPoint.x, startPoint.y, cols)] = \"discovered\";\n\n\n    hScoreFromRight[getIndex(goal.x, goal.y, cols)] = heuristic(goal, startPoint, heuristicType);\n\n    openSetFromRight.insert({point: startPoint, val: hScoreFromRight[getIndex(goal.x, goal.y, cols)]});\n\n    while(openSetFromLeft.getHeap().length !== 0 && openSetFromRight.getHeap().length !== 0){\n        // console.log(Array.from(openSet.getHeap()));\n        const current1 = openSetFromLeft.peek().point;\n        const current2 = openSetFromRight.peek().point;\n        // console.log(Object.assign({},current));\n\n        openSetFromLeft.extract();\n        openSetFromRight.extract();\n\n        closedSetFromLeft[getIndex(current1.x, current1.y, cols)] = current1;\n        closedSetFromRight[getIndex(current2.x, current2.y, cols)] = current2;\n        \n        const newState = {\n            ...memState,\n            grid: memState.grid.map((square, index) => {\n                if(current1.x === square.x && current1.y === square.y){\n                    if(current1.type !== \"start\" && current1.type !== \"end\"){\n                        memState.grid[index] = {\n                            ...memState.grid[index],\n                            val: true,\n                            type: \"neighbors\"\n                        }\n                    }\n                    return {...square}\n                }\n                if(current2.x === square.x && current2.y === square.y){\n                    if(current2.type !== \"start\" && current2.type !== \"end\"){\n                        memState.grid[index] = {\n                            ...memState.grid[index],\n                            val: true,\n                            type: \"neighbors\"\n                        }\n                    }\n                    return {...square}\n                }\n                return {...square}\n            })\n        }\n        states.push(newState);\n\n        if(closedSetFromLeft[getIndex(current2.x, current2.y, cols)] || closedSetFromRight[getIndex(current1.x, current1.y, cols)]){\n            console.log(cameFromLeft)\n            console.log(cameFromRight)\n            let cameFromLeftPoint;\n            let cameFromRightPoint;\n\n            if(closedSetFromLeft[getIndex(current2.x, current2.y, cols)]){\n                cameFromRightPoint = current2;\n                cameFromLeftPoint = current2;\n            }else if(closedSetFromRight[getIndex(current1.x, current1.y, cols)]){\n                cameFromRightPoint = current1;\n                cameFromLeftPoint = current1;\n            }\n            \n\n            const state = states[states.length-1];\n            setState({\n                // return {\n                ...state,\n                //state object is immutable so updates have to be done this way\n                grid: state.grid.map((square, index) => {\n                    if(cameFromLeft[index] || cameFromRight[index]){\n                        if(square.x === cameFromLeftPoint.x && square.y === cameFromLeftPoint.y){\n                            let prev = cameFromLeftPoint;\n                \n                            while(prev){                   \n                                if(prev.type !== \"start\"){\n                                    state.grid[getIndex(prev.x,prev.y,state.cols)] = {\n                                        ...state.grid[getIndex(prev.x,prev.y,state.cols)],\n                                        val: true,\n                                        type: \"path\"\n                                    }\n                                }\n                                prev = cameFromLeft[getIndex(prev.x,prev.y,state.cols)];\n                            }\n                            return {...square};\n                        }\n                        if(square.x === cameFromRightPoint.x && square.y === cameFromRightPoint.y){\n                            let prev = cameFromRightPoint;\n                \n                            while(prev){                   \n                                if(prev.type !== \"end\"){\n                                    state.grid[getIndex(prev.x,prev.y,state.cols)] = {\n                                        ...state.grid[getIndex(prev.x,prev.y,state.cols)],\n                                        val: true,\n                                        type: \"path\"\n                                    }\n                                }\n                                prev = cameFromRight[getIndex(prev.x,prev.y,state.cols)];\n                            }\n                            return {...square};\n                        }\n                        return {...square};\n                    }\n                    return {...square};\n                })\n                \n            });\n\n            console.log(\"PATH FOUND!!!!!\");\n            return states;\n        };\n\n        const neighbors1 = getNeighbors(current1, gridMap, rows, cols, cutCorners, allowDiags);\n        const neighbors2 = getNeighbors(current2, gridMap, rows, cols, cutCorners, allowDiags);\n\n        neighbors1.map((neighbor) => {\n            // console.log(\"neighbor\", neighbor);\n            if(!closedSetFromLeft[getIndex(neighbor.x, neighbor.y, cols)]){\n                const current1HScore = heuristic(neighbor, goal, heuristicType);\n\n                if(current1HScore < hScoreFromLeft[getIndex(neighbor.x, neighbor.y, cols)] || !hScoreFromLeft[getIndex(neighbor.x, neighbor.y, cols)]){\n                    cameFromLeft[getIndex(neighbor.x, neighbor.y, cols)] = current1;//<---\n\n                    hScoreFromLeft[getIndex(neighbor.x, neighbor.y, cols)] = current1HScore;\n\n                    if(!openSetFromLeft.find(hScoreFromLeft[getIndex(neighbor.x, neighbor.y, cols)], neighbor)){//See <---\n                        openSetFromLeft.insert({point: neighbor, val: hScoreFromLeft[getIndex(neighbor.x, neighbor.y, cols)]});\n                    \n                        const newState = {\n                            ...memState,\n                            grid: memState.grid.map((square, index) => {\n                                if(neighbor.x === square.x && neighbor.y === square.y){\n                                    if(neighbor.type !== \"start\" && neighbor.type !== \"end\"){\n                                        memState.grid[index] = {\n                                            ...memState.grid[index],\n                                            val: true,\n                                            type: \"openset\"\n                                        }\n                                    }\n                                    return {...square}\n                                }\n                                return {...square}\n                            })\n                        }\n                        states.push(newState); \n                    }\n                    return null;\n                }\n                return null;\n            }\n            return null;\n        });\n\n        neighbors2.map((neighbor) => {\n            // console.log(\"neighbor\", neighbor);\n            if(!closedSetFromRight[getIndex(neighbor.x, neighbor.y, cols)]){\n                const current2HScore = heuristic(neighbor, goal, heuristicType);\n\n                if(current2HScore < hScoreFromRight[getIndex(neighbor.x, neighbor.y, cols)] || !hScoreFromRight[getIndex(neighbor.x, neighbor.y, cols)]){\n                    cameFromRight[getIndex(neighbor.x, neighbor.y, cols)] = current2;//<---\n\n                    hScoreFromRight[getIndex(neighbor.x, neighbor.y, cols)] = current2HScore;\n\n                    if(!openSetFromRight.find(hScoreFromRight[getIndex(neighbor.x, neighbor.y, cols)], neighbor)){//See <---\n                        openSetFromRight.insert({point: neighbor, val: hScoreFromRight[getIndex(neighbor.x, neighbor.y, cols)]});\n                    \n                        const newState = {\n                            ...memState,\n                            grid: memState.grid.map((square, index) => {\n                                if(neighbor.x === square.x && neighbor.y === square.y){\n                                    if(neighbor.type !== \"start\" && neighbor.type !== \"end\"){\n                                        memState.grid[index] = {\n                                            ...memState.grid[index],\n                                            val: true,\n                                            type: \"openset\"\n                                        }\n                                    }\n                                    return {...square}\n                                }\n                                return {...square}\n                            })\n                        }\n                        states.push(newState); \n                    }\n                    return null;\n                }\n                return null;\n            }\n            return null;\n        });\n    }\n\n    return states;\n}\n\nexport default GreedyBFS;"]},"metadata":{},"sourceType":"module"}