{"ast":null,"code":"import React, { useState, useEffect, useContext } from 'react';\nimport { ApolloClient, InMemoryCache, ApolloLink, HttpLink } from '@apollo/client';\nimport UserContext from './UserContext';\nconst httpLink = new HttpLink({\n  uri: 'http://localhost:3000/graphql'\n});\nconst authLink = new ApolloLink((operation, forward) => {\n  const {\n    user,\n    setUser\n  } = useContext(UserContext); // Retrieve the authorization token from local storage.\n\n  const token = localStorage.getItem('auth_token'); // Use the setContext method to set the HTTP headers.\n\n  operation.setContext({\n    headers: {\n      authorization: user ? `Bearer ${user.accessToken}` : \"\"\n    }\n  }); // Call the next link in the middleware chain.\n\n  return forward(operation);\n});\nexport default new ApolloClient({\n  uri: 'http://localhost:3000/graphql',\n  cache: new InMemoryCache({\n    addTypename: false\n  }),\n  credentials: 'include'\n});","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/ApolloConfig.js"],"names":["React","useState","useEffect","useContext","ApolloClient","InMemoryCache","ApolloLink","HttpLink","UserContext","httpLink","uri","authLink","operation","forward","user","setUser","token","localStorage","getItem","setContext","headers","authorization","accessToken","cache","addTypename","credentials"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,SAASC,YAAT,EAAuBC,aAAvB,EAAsCC,UAAtC,EAAkDC,QAAlD,QAAkE,gBAAlE;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,MAAMC,QAAQ,GAAG,IAAIF,QAAJ,CAAa;AAAEG,EAAAA,GAAG,EAAE;AAAP,CAAb,CAAjB;AAEA,MAAMC,QAAQ,GAAG,IAAIL,UAAJ,CAAe,CAACM,SAAD,EAAYC,OAAZ,KAAwB;AACpD,QAAM;AAACC,IAAAA,IAAD;AAAOC,IAAAA;AAAP,MAAkBZ,UAAU,CAACK,WAAD,CAAlC,CADoD,CAGpD;;AACA,QAAMQ,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAd,CAJoD,CAMpD;;AACAN,EAAAA,SAAS,CAACO,UAAV,CAAqB;AACnBC,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAEP,IAAI,GAAI,UAASA,IAAI,CAACQ,WAAY,EAA9B,GAAkC;AAD9C;AADU,GAArB,EAPoD,CAapD;;AACA,SAAOT,OAAO,CAACD,SAAD,CAAd;AACH,CAfgB,CAAjB;AAiBA,eAAe,IAAIR,YAAJ,CAAiB;AAC5BM,EAAAA,GAAG,EAAE,+BADuB;AAE5Ba,EAAAA,KAAK,EAAE,IAAIlB,aAAJ,CAAkB;AACrBmB,IAAAA,WAAW,EAAE;AADQ,GAAlB,CAFqB;AAK5BC,EAAAA,WAAW,EAAE;AALe,CAAjB,CAAf","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport { ApolloClient, InMemoryCache, ApolloLink, HttpLink } from '@apollo/client';\nimport UserContext from './UserContext';\n\nconst httpLink = new HttpLink({ uri: 'http://localhost:3000/graphql' });\n\nconst authLink = new ApolloLink((operation, forward) => {\n    const {user, setUser} = useContext(UserContext);\n\n    // Retrieve the authorization token from local storage.\n    const token = localStorage.getItem('auth_token');\n  \n    // Use the setContext method to set the HTTP headers.\n    operation.setContext({\n      headers: {\n        authorization: user ? `Bearer ${user.accessToken}` : \"\"\n      }\n    });\n  \n    // Call the next link in the middleware chain.\n    return forward(operation);\n});\n\nexport default new ApolloClient({\n    uri: 'http://localhost:3000/graphql',\n    cache: new InMemoryCache({\n        addTypename: false\n    }),\n    credentials: 'include'\n});"]},"metadata":{},"sourceType":"module"}