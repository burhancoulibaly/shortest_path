{"ast":null,"code":"import FibonacciHeapNode from '../FibonacciHeapNode';\nimport FibonacciHeap from '../FibonacciHeap';\n\nfunction getIndex(x, y, cols) {\n  return x + y * cols;\n}\n\nfunction dist(startPoint, endPoint) {\n  //TODO make this a switch for the different types of heuristic functions\n  const distance = Math.sqrt(Math.pow(endPoint.getPoint().x - startPoint.getPoint().x, 2) + Math.pow(endPoint.getPoint().y - startPoint.getPoint().y, 2));\n  return distance;\n}\n\nfunction getPoints(gridMap) {\n  let startPoint = null;\n  let endPoints = [];\n  gridMap.map(square => {\n    if (square.val && square.type === \"start\") {\n      // console.log(square);\n      startPoint = square;\n      return null;\n    }\n\n    if (square.val && square.type === \"end\") {\n      // console.log(square);\n      endPoints.push(square);\n      return null;\n    }\n\n    return null;\n  });\n  return [startPoint, endPoints];\n}\n\nfunction getNeighbors(current, rows, cols, node, cutCorners, allowDiags) {\n  //Point                                 Index\n  // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n  // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n  // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n  // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n  // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n  // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n  // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n  // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n  const neighbors = new Array(8);\n\n  if (current.getPoint().x > 0) {\n    const left = getIndex(current.getPoint().x - 1, current.getPoint().y, cols);\n\n    if (node[left].node.getPoint().type !== \"wall\") {\n      neighbors[0] = node[left].node;\n    }\n  }\n\n  if (current.getPoint().x < cols - 1) {\n    const right = getIndex(current.getPoint().x + 1, current.getPoint().y, cols);\n\n    if (node[right].node.getPoint().type !== \"wall\") {\n      neighbors[1] = node[right].node;\n    }\n  }\n\n  if (current.getPoint().y > 0) {\n    const up = getIndex(current.getPoint().x, current.getPoint().y - 1, cols);\n\n    if (node[up].node.getPoint().type !== \"wall\") {\n      neighbors[2] = node[up].node;\n    }\n  }\n\n  if (current.getPoint().y < rows - 1) {\n    const down = getIndex(current.getPoint().x, current.getPoint().y + 1, cols);\n\n    if (node[down].node.getPoint().type !== \"wall\") {\n      neighbors[3] = node[down].node;\n    }\n  }\n\n  if (current.getPoint().x > 0 && current.getPoint().y > 0) {\n    const topLeft = getIndex(current.getPoint().x - 1, current.getPoint().y - 1, cols);\n\n    if (node[topLeft].node.getPoint().type !== \"wall\" && node[topLeft].node.getPoint().type !== \"start\") {\n      if (allowDiags) {\n        if (!cutCorners) {\n          if (node[topLeft + 1].node.getPoint().type !== \"wall\" && node[topLeft + 50].node.getPoint().type !== \"wall\") {\n            neighbors[4] = node[topLeft].node;\n          }\n        } else {\n          neighbors[4] = node[topLeft].node;\n        }\n      }\n    }\n  }\n\n  if (current.getPoint().x < cols - 1 && current.getPoint().y > 0) {\n    const topRight = getIndex(current.getPoint().x + 1, current.getPoint().y - 1, cols);\n\n    if (node[topRight].node.getPoint().type !== \"wall\" && node[topRight].node.getPoint().type !== \"start\") {\n      if (allowDiags) {\n        if (!cutCorners) {\n          if (node[topRight - 1].node.getPoint().type !== \"wall\" && node[topRight + 50].node.getPoint().type !== \"wall\") {\n            neighbors[5] = node[topRight].node;\n          }\n        } else {\n          neighbors[5] = node[topRight].node;\n        }\n      }\n    }\n  }\n\n  if (current.getPoint().x > 0 && current.getPoint().y < rows - 1) {\n    const bottomLeft = getIndex(current.getPoint().x - 1, current.getPoint().y + 1, cols);\n\n    if (node[bottomLeft].node.getPoint().type !== \"wall\" && node[bottomLeft].node.getPoint().type !== \"start\") {\n      if (allowDiags) {\n        if (!cutCorners) {\n          if (node[bottomLeft + 1].node.getPoint().type !== \"wall\" && node[bottomLeft - 50].node.getPoint().type !== \"wall\") {\n            neighbors[6] = node[bottomLeft].node;\n          }\n        } else {\n          neighbors[6] = node[bottomLeft].node;\n        }\n      }\n    }\n  }\n\n  if (current.getPoint().x < cols - 1 && current.getPoint().y < rows - 1) {\n    const bottomRight = getIndex(current.getPoint().x + 1, current.getPoint().y + 1, cols);\n\n    if (node[bottomRight].node.getPoint().type !== \"wall\" && node[bottomRight].node.getPoint().type !== \"start\") {\n      if (allowDiags) {\n        if (!cutCorners) {\n          if (node[bottomRight - 1].node.getPoint().type !== \"wall\" && node[bottomRight - 50].node.getPoint().type !== \"wall\") {\n            neighbors[7] = node[bottomRight].node;\n          }\n        } else {\n          neighbors[7] = node[bottomRight].node;\n        }\n      }\n    }\n  }\n\n  return neighbors;\n}\n\nfunction Dijkstra(rows, cols, gridMap, memState, setState, cutCorners, allowDiags) {\n  const [startPoint, endPoints] = getPoints(gridMap);\n  const heapFromLeft = new FibonacciHeap();\n  const heapFromRight = new FibonacciHeap();\n  const cameFromLeft = {};\n  const cameFromRight = {};\n  const nodeFromLeft = {};\n  const nodeFromRight = {};\n  const states = []; //TODO: Bug, clears grid but then returns it to its previous state\n\n  const newState = { ...memState,\n    grid: new Array(rows * cols).fill({\n      val: false,\n      type: null\n    }).map((square, i) => {\n      return { ...square,\n        x: i % cols,\n        y: Math.abs((i - i % cols) / cols)\n      };\n    })\n  };\n  states.push(newState);\n  let goal = endPoints[0];\n\n  if (!startPoint || !endPoints) {\n    console.log(\"Map must have a start point, and an end point\");\n    return \"Map must have a start point, and an end point\";\n  }\n\n  gridMap.map((square, index) => {\n    if (getIndex(startPoint.x, startPoint.y, cols) === index) {\n      nodeFromLeft[index] = {\n        dist: 0,\n        node: null\n      };\n      cameFromLeft[index] = null;\n    }\n\n    if (getIndex(goal.x, goal.y, cols) === index) {\n      nodeFromRight[index] = {\n        dist: 0,\n        node: null\n      };\n      cameFromRight[index] = null;\n    }\n\n    if (getIndex(startPoint.x, startPoint.y, cols) !== index) {\n      nodeFromLeft[index] = {\n        dist: Number.POSITIVE_INFINITY,\n        node: null\n      };\n      cameFromLeft[index] = null;\n    }\n\n    if (getIndex(goal.x, goal.y, cols) !== index) {\n      nodeFromRight[index] = {\n        dist: Number.POSITIVE_INFINITY,\n        node: null\n      };\n      cameFromRight[index] = null;\n    }\n\n    const currNode1 = new FibonacciHeapNode(nodeFromLeft[index].dist, square);\n    const currNode2 = new FibonacciHeapNode(nodeFromRight[index].dist, square);\n    nodeFromLeft[index].node = currNode1;\n    nodeFromRight[index].node = currNode2;\n    heapFromLeft.insert(nodeFromLeft[index].node);\n    heapFromRight.insert(nodeFromRight[index].node);\n    return null;\n  });\n\n  while (heapFromLeft.getRootList().length > 0 && heapFromRight.getRootList().length > 0) {\n    const current1 = heapFromLeft.peek();\n    const current2 = heapFromRight.peek(); // console.log(\"new min\",current;\n\n    heapFromLeft.extractMin();\n    heapFromRight.extractMin(); // console.log(Array.from(heap.getRootList()))\n\n    const newState = { ...memState,\n      grid: memState.grid.map((square, index) => {\n        if (current1.getPoint().x === square.x && current1.getPoint().y === square.y) {\n          if (current1.getPoint().type !== \"start\" && current1.getPoint().type !== \"end\") {\n            memState.grid[index] = { ...memState.grid[index],\n              val: true,\n              type: \"neighbors\"\n            };\n          }\n\n          return { ...square\n          };\n        }\n\n        if (current2.getPoint().x === square.x && current2.getPoint().y === square.y) {\n          if (current2.getPoint().type !== \"start\" && current2.getPoint().type !== \"end\") {\n            memState.grid[index] = { ...memState.grid[index],\n              val: true,\n              type: \"neighbors\"\n            };\n          }\n\n          return { ...square\n          };\n        }\n\n        return { ...square\n        };\n      })\n    };\n    states.push(newState);\n\n    if (cameFromLeft[getIndex(current2.getPoint().x, current2.getPoint().y, cols)] || cameFromRight[getIndex(current1.getPoint().x, current1.getPoint().y, cols)]) {\n      let cameFromLeftPoint;\n      let cameFromRightPoint;\n\n      if (cameFromLeft[getIndex(current2.getPoint().x, current2.getPoint().y, cols)]) {\n        cameFromRightPoint = current2.getPoint();\n        cameFromLeftPoint = current2.getPoint();\n      } else if (cameFromRight[getIndex(current1.getPoint().x, current1.getPoint().y, cols)]) {\n        cameFromRightPoint = current1;\n        cameFromLeftPoint = current1;\n      }\n\n      const state = states[states.length - 1];\n      setState({ // return {\n        ...state,\n        //state object is immutable so updates have to be done this way\n        grid: state.grid.map((square, index) => {\n          if (cameFromLeft[index] || cameFromRight[index]) {\n            if (square.x === cameFromLeftPoint.x && square.y === cameFromLeftPoint.y) {\n              let prev = cameFromLeftPoint;\n\n              while (prev) {\n                if (prev.type !== \"start\") {\n                  state.grid[getIndex(prev.x, prev.y, state.cols)] = { ...state.grid[getIndex(prev.x, prev.y, state.cols)],\n                    val: true,\n                    type: \"path\"\n                  };\n                }\n\n                prev = cameFromLeft[getIndex(prev.x, prev.y, state.cols)];\n              }\n            }\n\n            if (square.x === cameFromRightPoint.x && square.y === cameFromRightPoint.y) {\n              let prev = cameFromRightPoint;\n\n              while (prev) {\n                if (prev.type !== \"end\") {\n                  state.grid[getIndex(prev.x, prev.y, state.cols)] = { ...state.grid[getIndex(prev.x, prev.y, state.cols)],\n                    val: true,\n                    type: \"path\"\n                  };\n                }\n\n                prev = cameFromRight[getIndex(prev.x, prev.y, state.cols)];\n              }\n\n              return { ...square\n              };\n            }\n\n            return { ...square\n            };\n          }\n\n          return { ...square\n          };\n        })\n      });\n      console.log(\"PATH FOUND!!!!!\");\n      return states;\n    } // if(discoveredFromLeft[getIndex(current2.x, current2.y, cols)] || discoveredFromRight[getIndex(current1.x, current1.y, cols)]){\n    //     let cameFromLeftPoint;\n    //     let cameFromRightPoint;\n    //     if(discoveredFromLeft[getIndex(current2.x, current2.y, cols)]){\n    //         cameFromRightPoint = current2;\n    //         cameFromLeftPoint = current2;\n    //     }else if(discoveredFromRight[getIndex(current1.x, current1.y, cols)]){\n    //         cameFromRightPoint = current1;\n    //         cameFromLeftPoint = current1;\n    //     }\n    //     const state = states[states.length-1];\n    //     setState({\n    //         // return {\n    //         ...state,\n    //         //state object is immutable so updates have to be done this way\n    //         grid: state.grid.map((square, index) => {\n    //             if(cameFromLeft[index] || cameFromRight[index]){\n    //                 if(square.x === cameFromLeftPoint.x && square.y === cameFromLeftPoint.y){\n    //                     let prev = cameFromLeftPoint;\n    //                     while(prev){                   \n    //                         if(prev.type !== \"start\"){\n    //                             state.grid[getIndex(prev.x,prev.y,state.cols)] = {\n    //                                 ...state.grid[getIndex(prev.x,prev.y,state.cols)],\n    //                                 val: true,\n    //                                 type: \"path\"\n    //                             }\n    //                         }\n    //                         prev = cameFromLeft[getIndex(prev.x,prev.y,state.cols)];\n    //                     }\n    //                 }\n    //                 if(square.x === cameFromRightPoint.x && square.y === cameFromRightPoint.y){\n    //                     let prev = cameFromRightPoint;\n    //                     while(prev){                   \n    //                         if(prev.type !== \"end\"){\n    //                             state.grid[getIndex(prev.x,prev.y,state.cols)] = {\n    //                                 ...state.grid[getIndex(prev.x,prev.y,state.cols)],\n    //                                 val: true,\n    //                                 type: \"path\"\n    //                             }\n    //                         }\n    //                         prev = cameFromRight[getIndex(prev.x,prev.y,state.cols)];\n    //                     }\n    //                     return {...square};\n    //                 }\n    //                 return {...square};\n    //             }\n    //             return {...square};\n    //         })\n    //     });\n    //     console.log(\"PATH FOUND!!!!!\");\n    //     return states;\n    // };\n\n\n    const neighbors1 = getNeighbors(current1, rows, cols, nodeFromLeft, cutCorners, allowDiags);\n    const neighbors2 = getNeighbors(current2, rows, cols, nodeFromRight, cutCorners, allowDiags);\n    console.log(neighbors2); // console.log(neighbors)\n\n    neighbors1.map(neighbor => {\n      // console.log(neighbor);\n      const current1Dist = nodeFromLeft[getIndex(current1.getPoint().x, current1.getPoint().y, cols)].dist + dist(current1, neighbor);\n\n      if (current1Dist < nodeFromLeft[getIndex(neighbor.getPoint().x, neighbor.getPoint().y, cols)].dist) {\n        nodeFromLeft[getIndex(neighbor.getPoint().x, neighbor.getPoint().y, cols)].dist = current1Dist;\n        cameFromLeft[getIndex(neighbor.getPoint().x, neighbor.getPoint().y, cols)] = current1.getPoint();\n        heapFromLeft.decreaseKey(neighbor, nodeFromLeft[getIndex(neighbor.getPoint().x, neighbor.getPoint().y, cols)].dist);\n        const newState = { ...memState,\n          grid: memState.grid.map((square, index) => {\n            if (neighbor.getPoint().x === square.x && neighbor.getPoint().y === square.y) {\n              if (neighbor.getPoint().type !== \"start\" && neighbor.getPoint().type !== \"end\") {\n                memState.grid[index] = { ...memState.grid[index],\n                  val: true,\n                  type: \"openset\"\n                };\n              }\n\n              return { ...square\n              };\n            }\n\n            return { ...square\n            };\n          })\n        };\n        states.push(newState);\n        return null;\n      }\n\n      return null;\n    });\n    neighbors2.map(neighbor => {\n      // console.log(neighbor);\n      const current2Dist = nodeFromRight[getIndex(current2.getPoint().x, current2.getPoint().y, cols)].dist + dist(current2, neighbor);\n\n      if (current2Dist < nodeFromRight[getIndex(neighbor.getPoint().x, neighbor.getPoint().y, cols)].dist) {\n        nodeFromRight[getIndex(neighbor.getPoint().x, neighbor.getPoint().y, cols)].dist = current2Dist;\n        cameFromRight[getIndex(neighbor.getPoint().x, neighbor.getPoint().y, cols)] = current2.getPoint();\n        console.log(neighbor);\n        console.log(nodeFromRight[getIndex(neighbor.getPoint().x, neighbor.getPoint().y, cols)].dist);\n        heapFromRight.decreaseKey(neighbor, nodeFromRight[getIndex(neighbor.getPoint().x, neighbor.getPoint().y, cols)].dist);\n        const newState = { ...memState,\n          grid: memState.grid.map((square, index) => {\n            if (neighbor.getPoint().x === square.x && neighbor.getPoint().y === square.y) {\n              if (neighbor.getPoint().type !== \"start\" && neighbor.getPoint().type !== \"end\") {\n                memState.grid[index] = { ...memState.grid[index],\n                  val: true,\n                  type: \"openset\"\n                };\n              }\n\n              return { ...square\n              };\n            }\n\n            return { ...square\n            };\n          })\n        };\n        states.push(newState);\n        return null;\n      }\n\n      return null;\n    });\n  }\n\n  return states;\n}\n\nexport default Dijkstra;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Algorithms/Bi-Directional/Dijkstra.js"],"names":["FibonacciHeapNode","FibonacciHeap","getIndex","x","y","cols","dist","startPoint","endPoint","distance","Math","sqrt","pow","getPoint","getPoints","gridMap","endPoints","map","square","val","type","push","getNeighbors","current","rows","node","cutCorners","allowDiags","neighbors","Array","left","right","up","down","topLeft","topRight","bottomLeft","bottomRight","Dijkstra","memState","setState","heapFromLeft","heapFromRight","cameFromLeft","cameFromRight","nodeFromLeft","nodeFromRight","states","newState","grid","fill","i","abs","goal","console","log","index","Number","POSITIVE_INFINITY","currNode1","currNode2","insert","getRootList","length","current1","peek","current2","extractMin","cameFromLeftPoint","cameFromRightPoint","state","prev","neighbors1","neighbors2","neighbor","current1Dist","decreaseKey","current2Dist"],"mappings":"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","sourcesContent":["import FibonacciHeapNode from '../FibonacciHeapNode';\nimport FibonacciHeap from '../FibonacciHeap';\n\nfunction getIndex(x, y, cols){\n    return (x + (y * cols));\n}\n\nfunction dist(startPoint, endPoint){\n    //TODO make this a switch for the different types of heuristic functions\n    const distance = Math.sqrt(Math.pow((endPoint.getPoint().x-startPoint.getPoint().x), 2) + Math.pow((endPoint.getPoint().y-startPoint.getPoint().y), 2));     \n    return distance;\n}\n\nfunction getPoints(gridMap){\n    let startPoint = null;\n    let endPoints = [];\n    \n    gridMap.map((square) => {\n        if(square.val && square.type ===  \"start\"){\n            // console.log(square);\n            startPoint = square;\n\n            return null;\n        }\n\n        if(square.val && square.type === \"end\"){\n            // console.log(square);\n            endPoints.push(square);\n\n            return null;\n        }\n\n        return null;\n    })\n\n    return [startPoint, endPoints];\n}\n\nfunction getNeighbors(current, rows, cols, node, cutCorners, allowDiags){\n    //Point                                 Index\n    // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n    // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n    // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n    // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n    // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n    // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n    // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n    // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n\n    const neighbors = new Array(8);\n    \n    if(current.getPoint().x > 0){\n        const left = getIndex((current.getPoint().x-1), (current.getPoint().y), cols);\n\n        if(node[left].node.getPoint().type !== \"wall\"){\n            neighbors[0] = node[left].node;   \n        }\n    }\n    if(current.getPoint().x < cols-1){\n        const right = getIndex((current.getPoint().x+1), (current.getPoint().y), cols);\n\n        if(node[right].node.getPoint().type !== \"wall\"){\n            neighbors[1] = node[right].node;   \n        }\n    }\n    if(current.getPoint().y > 0){\n        const up = getIndex((current.getPoint().x), (current.getPoint().y-1), cols);\n\n        if(node[up].node.getPoint().type !== \"wall\"){\n            neighbors[2] = node[up].node;   \n        }\n    }\n    if(current.getPoint().y < rows-1){\n        const down = getIndex((current.getPoint().x), (current.getPoint().y+1), cols);\n\n        if(node[down].node.getPoint().type !== \"wall\"){\n            neighbors[3] = node[down].node;   \n        }\n    }\n    if(current.getPoint().x > 0 && current.getPoint().y > 0){\n        const topLeft = getIndex((current.getPoint().x-1), (current.getPoint().y-1), cols);\n\n        if(node[topLeft].node.getPoint().type !== \"wall\" && node[topLeft].node.getPoint().type !== \"start\"){\n            if(allowDiags){\n                if(!cutCorners){\n                    if(node[topLeft+1].node.getPoint().type !== \"wall\" && node[topLeft+50].node.getPoint().type !== \"wall\"){\n                        neighbors[4] = node[topLeft].node;\n                    }\n                }else{\n                    neighbors[4] = node[topLeft].node;\n                }\n            }\n        }\n    }\n    if(current.getPoint().x < cols-1 && current.getPoint().y > 0){\n        const topRight = getIndex((current.getPoint().x+1), (current.getPoint().y-1), cols);\n\n        if(node[topRight].node.getPoint().type !== \"wall\" && node[topRight].node.getPoint().type !== \"start\"){\n            if(allowDiags){\n                if(!cutCorners){\n                    if(node[topRight-1].node.getPoint().type !== \"wall\" && node[topRight+50].node.getPoint().type !== \"wall\"){\n                        neighbors[5] = node[topRight].node; \n                    }\n                }else{\n                    neighbors[5] = node[topRight].node; \n                }\n            }\n        }\n    }\n    if(current.getPoint().x > 0 && current.getPoint().y < rows-1){\n        const bottomLeft  = getIndex((current.getPoint().x-1), (current.getPoint().y+1), cols);\n\n        if(node[bottomLeft].node.getPoint().type !== \"wall\" && node[bottomLeft].node.getPoint().type !== \"start\"){\n            if(allowDiags){\n                if(!cutCorners){\n                    if(node[bottomLeft+1].node.getPoint().type !== \"wall\" && node[bottomLeft-50].node.getPoint().type !== \"wall\"){\n                        neighbors[6] = node[bottomLeft].node;\n                    }\n                }else{\n                    neighbors[6] = node[bottomLeft].node;\n                }\n            }\n        }\n    }\n    if(current.getPoint().x < cols-1 && current.getPoint().y < rows-1){\n        const bottomRight = getIndex((current.getPoint().x+1), (current.getPoint().y+1), cols);\n\n        if(node[bottomRight].node.getPoint().type !== \"wall\" && node[bottomRight].node.getPoint().type !== \"start\"){\n            if(allowDiags){\n                if(!cutCorners){\n                    if(node[bottomRight-1].node.getPoint().type !== \"wall\" && node[bottomRight-50].node.getPoint().type !== \"wall\"){\n                        neighbors[7] = node[bottomRight].node; \n                    }\n                }else{\n                    neighbors[7] = node[bottomRight].node; \n                }\n            }\n        }\n    }\n\n    return neighbors;\n}\n\nfunction Dijkstra(rows, cols, gridMap, memState, setState, cutCorners, allowDiags){\n    const [startPoint, endPoints] = getPoints(gridMap);\n    const heapFromLeft = new FibonacciHeap();\n    const heapFromRight = new FibonacciHeap();\n    const cameFromLeft = {};\n    const cameFromRight = {}\n    const nodeFromLeft = {};\n    const nodeFromRight = {};\n    const states = [];\n\n    //TODO: Bug, clears grid but then returns it to its previous state\n    const newState = {\n        ...memState,\n        grid: new Array(rows*cols).fill({val: false, type: null}).map((square, i) => {\n            return {\n                ...square,\n                x: i % cols,\n                y: Math.abs((i - (i % cols)) / cols)\n            }\n        })\n    }\n    states.push(newState);\n\n    let goal = endPoints[0];\n\n    if(!startPoint || !endPoints){\n        console.log(\"Map must have a start point, and an end point\");\n        return \"Map must have a start point, and an end point\"; \n    }\n\n    gridMap.map((square, index) => {\n        if(getIndex(startPoint.x, startPoint.y, cols) === index){\n            nodeFromLeft[index] = {dist: 0, node: null};\n            cameFromLeft[index] = null;\n        }\n\n        if(getIndex(goal.x, goal.y, cols) === index){\n            nodeFromRight[index] = {dist: 0, node: null};\n            cameFromRight[index] = null;\n        }\n\n        if(getIndex(startPoint.x, startPoint.y, cols) !== index){     \n            nodeFromLeft[index] =  {dist: Number.POSITIVE_INFINITY, node: null};\n            cameFromLeft[index] = null;\n        }\n\n        if(getIndex(goal.x, goal.y, cols) !== index){\n            nodeFromRight[index] = {dist: Number.POSITIVE_INFINITY, node: null};\n            cameFromRight[index] = null;\n        }\n\n        const currNode1 = new FibonacciHeapNode(nodeFromLeft[index].dist, square);\n        const currNode2 = new FibonacciHeapNode(nodeFromRight[index].dist, square);\n\n        nodeFromLeft[index].node = currNode1;\n        nodeFromRight[index].node = currNode2;\n\n        heapFromLeft.insert(nodeFromLeft[index].node);\n        heapFromRight.insert(nodeFromRight[index].node);\n\n        return null;\n    });\n\n    while(heapFromLeft.getRootList().length > 0 && heapFromRight.getRootList().length > 0){\n        const current1 = heapFromLeft.peek();\n        const current2 = heapFromRight.peek();\n        // console.log(\"new min\",current;\n\n        heapFromLeft.extractMin();\n        heapFromRight.extractMin();\n        // console.log(Array.from(heap.getRootList()))\n\n        const newState = {\n            ...memState,\n            grid: memState.grid.map((square, index) => {\n                if(current1.getPoint().x === square.x && current1.getPoint().y === square.y){\n                    if(current1.getPoint().type !== \"start\" && current1.getPoint().type !== \"end\"){\n                        memState.grid[index] = {\n                            ...memState.grid[index],\n                            val: true,\n                            type: \"neighbors\"\n                        }\n                    }\n                    return {...square}\n                }\n                if(current2.getPoint().x === square.x && current2.getPoint().y === square.y){\n                    if(current2.getPoint().type !== \"start\" && current2.getPoint().type !== \"end\"){\n                        memState.grid[index] = {\n                            ...memState.grid[index],\n                            val: true,\n                            type: \"neighbors\"\n                        }\n                    }\n                    return {...square}\n                }\n                return {...square}\n            })\n        }\n        states.push(newState);\n\n        if(cameFromLeft[getIndex(current2.getPoint().x, current2.getPoint().y, cols)] || cameFromRight[getIndex(current1.getPoint().x, current1.getPoint().y, cols)]){\n            let cameFromLeftPoint;\n            let cameFromRightPoint;\n\n            if(cameFromLeft[getIndex(current2.getPoint().x, current2.getPoint().y, cols)]){\n                cameFromRightPoint = current2.getPoint();\n                cameFromLeftPoint = current2.getPoint();\n            }else if(cameFromRight[getIndex(current1.getPoint().x, current1.getPoint().y, cols)]){\n                cameFromRightPoint = current1;\n                cameFromLeftPoint = current1;\n            }\n            \n\n            const state = states[states.length-1];\n            setState({\n                // return {\n                ...state,\n                //state object is immutable so updates have to be done this way\n                grid: state.grid.map((square, index) => {\n                    if(cameFromLeft[index] || cameFromRight[index]){\n                        if(square.x === cameFromLeftPoint.x && square.y === cameFromLeftPoint.y){\n                            let prev = cameFromLeftPoint;\n                \n                            while(prev){                   \n                                if(prev.type !== \"start\"){\n                                    state.grid[getIndex(prev.x,prev.y,state.cols)] = {\n                                        ...state.grid[getIndex(prev.x,prev.y,state.cols)],\n                                        val: true,\n                                        type: \"path\"\n                                    }\n                                }\n                                prev = cameFromLeft[getIndex(prev.x,prev.y,state.cols)];\n                            }\n                        }\n                        if(square.x === cameFromRightPoint.x && square.y === cameFromRightPoint.y){\n                            let prev = cameFromRightPoint;\n                \n                            while(prev){                   \n                                if(prev.type !== \"end\"){\n                                    state.grid[getIndex(prev.x,prev.y,state.cols)] = {\n                                        ...state.grid[getIndex(prev.x,prev.y,state.cols)],\n                                        val: true,\n                                        type: \"path\"\n                                    }\n                                }\n                                prev = cameFromRight[getIndex(prev.x,prev.y,state.cols)];\n                            }\n                            return {...square};\n                        }\n                        return {...square};\n                    }\n                    return {...square};\n                })\n                \n            });\n\n            console.log(\"PATH FOUND!!!!!\");\n            return states;\n        }\n\n        // if(discoveredFromLeft[getIndex(current2.x, current2.y, cols)] || discoveredFromRight[getIndex(current1.x, current1.y, cols)]){\n        //     let cameFromLeftPoint;\n        //     let cameFromRightPoint;\n\n        //     if(discoveredFromLeft[getIndex(current2.x, current2.y, cols)]){\n        //         cameFromRightPoint = current2;\n        //         cameFromLeftPoint = current2;\n        //     }else if(discoveredFromRight[getIndex(current1.x, current1.y, cols)]){\n        //         cameFromRightPoint = current1;\n        //         cameFromLeftPoint = current1;\n        //     }\n            \n\n        //     const state = states[states.length-1];\n        //     setState({\n        //         // return {\n        //         ...state,\n        //         //state object is immutable so updates have to be done this way\n        //         grid: state.grid.map((square, index) => {\n        //             if(cameFromLeft[index] || cameFromRight[index]){\n        //                 if(square.x === cameFromLeftPoint.x && square.y === cameFromLeftPoint.y){\n        //                     let prev = cameFromLeftPoint;\n                \n        //                     while(prev){                   \n        //                         if(prev.type !== \"start\"){\n        //                             state.grid[getIndex(prev.x,prev.y,state.cols)] = {\n        //                                 ...state.grid[getIndex(prev.x,prev.y,state.cols)],\n        //                                 val: true,\n        //                                 type: \"path\"\n        //                             }\n        //                         }\n        //                         prev = cameFromLeft[getIndex(prev.x,prev.y,state.cols)];\n        //                     }\n        //                 }\n        //                 if(square.x === cameFromRightPoint.x && square.y === cameFromRightPoint.y){\n        //                     let prev = cameFromRightPoint;\n                \n        //                     while(prev){                   \n        //                         if(prev.type !== \"end\"){\n        //                             state.grid[getIndex(prev.x,prev.y,state.cols)] = {\n        //                                 ...state.grid[getIndex(prev.x,prev.y,state.cols)],\n        //                                 val: true,\n        //                                 type: \"path\"\n        //                             }\n        //                         }\n        //                         prev = cameFromRight[getIndex(prev.x,prev.y,state.cols)];\n        //                     }\n        //                     return {...square};\n        //                 }\n        //                 return {...square};\n        //             }\n        //             return {...square};\n        //         })\n                \n        //     });\n\n        //     console.log(\"PATH FOUND!!!!!\");\n        //     return states;\n        // };\n\n        const neighbors1 = getNeighbors(current1, rows, cols, nodeFromLeft, cutCorners, allowDiags);\n        const neighbors2 = getNeighbors(current2, rows, cols, nodeFromRight, cutCorners, allowDiags);\n\n        console.log(neighbors2);\n\n        // console.log(neighbors)\n        neighbors1.map((neighbor) => {\n            // console.log(neighbor);\n\n            const current1Dist = nodeFromLeft[getIndex(current1.getPoint().x, current1.getPoint().y, cols)].dist + dist(current1, neighbor);\n\n            if(current1Dist < nodeFromLeft[getIndex(neighbor.getPoint().x, neighbor.getPoint().y, cols)].dist){\n\n                nodeFromLeft[getIndex(neighbor.getPoint().x, neighbor.getPoint().y, cols)].dist = current1Dist;\n                \n                cameFromLeft[getIndex(neighbor.getPoint().x, neighbor.getPoint().y, cols)] = current1.getPoint();\n\n                heapFromLeft.decreaseKey(neighbor, nodeFromLeft[getIndex(neighbor.getPoint().x, neighbor.getPoint().y, cols)].dist);\n\n                const newState = {\n                    ...memState,\n                    grid: memState.grid.map((square, index) => {\n                        if(neighbor.getPoint().x === square.x && neighbor.getPoint().y === square.y){\n                            if(neighbor.getPoint().type !== \"start\" && neighbor.getPoint().type !== \"end\"){\n                                memState.grid[index] = {\n                                    ...memState.grid[index],\n                                    val: true,\n                                    type: \"openset\"\n                                }\n                            }\n                            return {...square}\n                        }\n                        return {...square}\n                    })\n                }\n                states.push(newState); \n\n                return null;\n            } \n\n            return null;\n        })\n\n        neighbors2.map((neighbor) => {\n            // console.log(neighbor);\n\n            const current2Dist = nodeFromRight[getIndex(current2.getPoint().x, current2.getPoint().y, cols)].dist + dist(current2, neighbor);\n\n            if(current2Dist < nodeFromRight[getIndex(neighbor.getPoint().x, neighbor.getPoint().y, cols)].dist){\n\n                nodeFromRight[getIndex(neighbor.getPoint().x, neighbor.getPoint().y, cols)].dist = current2Dist;\n                \n                cameFromRight[getIndex(neighbor.getPoint().x, neighbor.getPoint().y, cols)] = current2.getPoint();\n\n                console.log(neighbor);\n                console.log(nodeFromRight[getIndex(neighbor.getPoint().x, neighbor.getPoint().y, cols)].dist);\n\n                heapFromRight.decreaseKey(neighbor, nodeFromRight[getIndex(neighbor.getPoint().x, neighbor.getPoint().y, cols)].dist);\n\n                const newState = {\n                    ...memState,\n                    grid: memState.grid.map((square, index) => {\n                        if(neighbor.getPoint().x === square.x && neighbor.getPoint().y === square.y){\n                            if(neighbor.getPoint().type !== \"start\" && neighbor.getPoint().type !== \"end\"){\n                                memState.grid[index] = {\n                                    ...memState.grid[index],\n                                    val: true,\n                                    type: \"openset\"\n                                }\n                            }\n                            return {...square}\n                        }\n                        return {...square}\n                    })\n                }\n                states.push(newState); \n\n                return null;\n            } \n\n            return null;\n        })\n    }\n    \n    return states;\n}\n\nexport default Dijkstra;"]},"metadata":{},"sourceType":"module"}