{"ast":null,"code":"import FibonacciHeapNode from '../Algorithms/FibonacciHeapNode';\nimport FibonacciHeap from '../Algorithms/FibonacciHeap';\n\nfunction getIndex(x, y, cols) {\n  return x + y * cols;\n}\n\nfunction dist(startPoint, endPoint) {\n  //TODO make this a switch for the different types of heuristic functions\n  const distance = Math.sqrt(Math.pow(endPoint.x - startPoint.x, 2) + Math.pow(endPoint.y - startPoint.y, 2));\n  return distance;\n}\n\nfunction getPoints(gridMap) {\n  let startPoint = null;\n  let endPoints = [];\n  gridMap.map(square => {\n    if (square.val && square.type === \"start\") {\n      // console.log(square);\n      startPoint = square;\n      return null;\n    }\n\n    if (square.val && square.type === \"end\") {\n      // console.log(square);\n      endPoints.push(square);\n      return null;\n    }\n\n    return null;\n  });\n  return [startPoint, endPoints];\n}\n\nfunction getNeighbors(point, gridMap, rows, cols) {\n  //Point                                 Index\n  // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n  // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n  // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n  // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n  // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n  // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n  // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n  // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n  const neighbors = new Array(8);\n\n  if (point.x > 0) {\n    const left = getIndex(point.x - 1, point.y, cols);\n\n    if (gridMap[left].type !== \"wall\" && gridMap[left].type !== \"start\") {\n      neighbors[0] = gridMap[left];\n    }\n  }\n\n  if (point.x < cols - 1) {\n    const right = getIndex(point.x + 1, point.y, cols);\n\n    if (gridMap[right].type !== \"wall\" && gridMap[right].type !== \"start\") {\n      neighbors[1] = gridMap[right];\n    }\n  }\n\n  if (point.y > 0) {\n    const up = getIndex(point.x, point.y - 1, cols);\n\n    if (gridMap[up].type !== \"wall\" && gridMap[up].type !== \"start\") {\n      neighbors[2] = gridMap[up];\n    }\n  }\n\n  if (point.y < rows - 1) {\n    const down = getIndex(point.x, point.y + 1, cols);\n\n    if (gridMap[down].type !== \"wall\" && gridMap[down].type !== \"start\") {\n      neighbors[3] = gridMap[down];\n    }\n  }\n\n  if (point.x > 0 && point.y > 0) {\n    const topLeft = getIndex(point.x - 1, point.y - 1, cols);\n\n    if (gridMap[topLeft].type !== \"wall\" && gridMap[topLeft].type !== \"start\") {\n      neighbors[4] = gridMap[topLeft];\n    }\n  }\n\n  if (point.x < cols - 1 && point.y > 0) {\n    const topRight = getIndex(point.x + 1, point.y - 1, cols);\n\n    if (gridMap[topRight].type !== \"wall\" && gridMap[topRight].type !== \"start\") {\n      neighbors[5] = gridMap[topRight];\n    }\n  }\n\n  if (point.x > 0 && point.y < rows - 1) {\n    const bottomLeft = getIndex(point.x - 1, point.y + 1, cols);\n\n    if (gridMap[bottomLeft].type !== \"wall\" && gridMap[bottomLeft].type !== \"start\") {\n      neighbors[6] = gridMap[bottomLeft];\n    }\n  }\n\n  if (point.x < cols - 1 && point.y < rows - 1) {\n    const bottomRight = getIndex(point.x + 1, point.y + 1, cols);\n\n    if (gridMap[bottomRight].type !== \"wall\" && gridMap[bottomRight].type !== \"start\") {\n      neighbors[7] = gridMap[bottomRight];\n    }\n  }\n\n  return neighbors;\n}\n\nfunction Dijkstra(rows, cols, gridMap, memState, setState) {\n  const [startPoint, endPoints] = getPoints(gridMap);\n  const queue = new FibonacciHeap();\n  const point = {};\n  const cameFrom = {};\n  const gScore = {};\n  const states = []; //TODO: Bug, clears grid but then returns it to its previous state\n\n  const newState = { ...memState,\n    grid: new Array(rows * cols).fill({\n      val: false,\n      type: null\n    }).map((square, i) => {\n      return { ...square,\n        x: i % cols,\n        y: Math.abs((i - i % cols) / cols)\n      };\n    })\n  };\n  states.push(newState);\n  let goal = endPoints[0];\n\n  if (!startPoint || !endPoints) {\n    console.log(\"Map must have a start point, and an end point\");\n    return \"Map must have a start point, and an end point\";\n  }\n\n  gScore[getIndex(startPoint.x, startPoint.y, cols)] = 0;\n  cameFrom[getIndex(startPoint.x, startPoint.y, cols)] = null;\n\n  if (point[gScore[index]] == null) {\n    point[gScore[index]] = [];\n  }\n\n  ;\n  point[gScore[index]].push(square);\n  gridMap.map((square, index) => {\n    if (getIndex(startPoint.x, startPoint.y, cols) !== index) {\n      gScore[index] = Number.POSITIVE_INFINITY;\n      cameFrom[index] = null;\n    }\n\n    queue.insert(new FibonacciHeapNode(gScore[index]));\n    return null;\n  });\n\n  while (queue.getRootList().length > 0) {\n    console.log(point);\n    const current = point[queue.peek()][point[queue.peek()].length - 1];\n    queue.extractMin();\n    point[gScore[getIndex(current.x, current.y, cols)]].pop();\n    console.log(Array.from(queue.getRootList()));\n    const newState = { ...memState,\n      grid: memState.grid.map((square, index) => {\n        if (current.x === square.x && current.y === square.y) {\n          if (current.type !== \"start\" && current.type !== \"end\") {\n            memState.grid[index] = { ...memState.grid[index],\n              val: true,\n              type: \"neighbors\"\n            };\n          }\n\n          return { ...square\n          };\n        }\n\n        return { ...square\n        };\n      })\n    };\n    states.push(newState);\n\n    if (current.x === goal.x && current.y === goal.y) {\n      const state = states[states.length - 1];\n      setState({ // return {\n        ...state,\n        //state object is immutable so updates have to be done this way\n        grid: state.grid.map((square, index) => {\n          if (cameFrom[index]) {\n            if (square.type === \"end\") {\n              let prev = cameFrom[index];\n\n              while (prev) {\n                if (prev.type !== \"start\" && prev.type !== \"end\") {\n                  state.grid[getIndex(prev.x, prev.y, state.cols)] = { ...state.grid[getIndex(prev.x, prev.y, state.cols)],\n                    val: true,\n                    type: \"path\"\n                  };\n                }\n\n                prev = cameFrom[getIndex(prev.x, prev.y, state.cols)];\n              }\n\n              return { ...square\n              };\n            }\n\n            return { ...square\n            };\n          }\n\n          return { ...square\n          };\n        })\n      });\n      console.log(\"PATH FOUND!!!!!\");\n      return states;\n    } //     const neighbors = getNeighbors(current, gridMap, rows, cols);\n    //     neighbors.map((neighbor) => {\n    //         // console.log(neighbor);\n    //         // console.log((gScore[getIndex(current.x, current.y, cols)] + dist(current, neighbor)) + heuristic(neighbor, goal));\n    //         // console.log(\"neighbor\", neighbor);\n    //         const currentPathGScore = gScore[getIndex(current.x, current.y, cols)] + dist(current, neighbor);\n    //         if(currentPathGScore < gScore[getIndex(neighbor.x, neighbor.y, cols)] || !gScore[getIndex(neighbor.x, neighbor.y, cols)]){\n    //             cameFrom[getIndex(neighbor.x, neighbor.y, cols)] = current;\n    //             gScore[getIndex(neighbor.x, neighbor.y, cols)] = currentPathGScore;\n    //             if(point[gScore[getIndex(neighbor.x, neighbor.y, cols)]] == null){\n    //                 point[gScore[getIndex(neighbor.x, neighbor.y, cols)]] = [];\n    //             }\n    //             point[gScore[getIndex(neighbor.x, neighbor.y, cols)]].push(neighbor);\n    //             //TODO: figure out how to do this in constant time\n    //             queue.decreaseKey();\n    //             return null;\n    //         }\n    //         return null;\n    //     })\n\n  }\n}\n\nexport default Dijkstra;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Algorithms/Dijkstra.js"],"names":["FibonacciHeapNode","FibonacciHeap","getIndex","x","y","cols","dist","startPoint","endPoint","distance","Math","sqrt","pow","getPoints","gridMap","endPoints","map","square","val","type","push","getNeighbors","point","rows","neighbors","Array","left","right","up","down","topLeft","topRight","bottomLeft","bottomRight","Dijkstra","memState","setState","queue","cameFrom","gScore","states","newState","grid","fill","i","abs","goal","console","log","index","Number","POSITIVE_INFINITY","insert","getRootList","length","current","peek","extractMin","pop","from","state","prev"],"mappings":"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","sourcesContent":["import FibonacciHeapNode from '../Algorithms/FibonacciHeapNode';\nimport FibonacciHeap from '../Algorithms/FibonacciHeap';\n\nfunction getIndex(x, y, cols){\n    return (x + (y * cols));\n}\n\nfunction dist(startPoint, endPoint){\n    //TODO make this a switch for the different types of heuristic functions\n    const distance = Math.sqrt(Math.pow((endPoint.x-startPoint.x), 2) + Math.pow((endPoint.y-startPoint.y), 2));     \n    return distance;\n}\n\nfunction getPoints(gridMap){\n    let startPoint = null;\n    let endPoints = [];\n    \n    gridMap.map((square) => {\n        if(square.val && square.type ===  \"start\"){\n            // console.log(square);\n            startPoint = square;\n\n            return null;\n        }\n\n        if(square.val && square.type === \"end\"){\n            // console.log(square);\n            endPoints.push(square);\n\n            return null;\n        }\n\n        return null;\n    })\n\n    return [startPoint, endPoints];\n}\n\nfunction getNeighbors(point, gridMap, rows, cols){\n    //Point                                 Index\n    // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n    // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n    // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n    // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n    // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n    // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n    // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n    // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n\n    const neighbors = new Array(8);\n\n    if(point.x > 0){\n        const left = getIndex((point.x-1), (point.y), cols);\n\n        if(gridMap[left].type !== \"wall\" && gridMap[left].type !== \"start\"){\n            neighbors[0] = gridMap[left];\n        }\n    }\n    if(point.x < cols-1){\n        const right = getIndex((point.x+1), (point.y), cols);\n\n        if(gridMap[right].type !== \"wall\" && gridMap[right].type !== \"start\"){\n            neighbors[1] = gridMap[right];\n        }\n    }\n    if(point.y > 0){\n        const up = getIndex((point.x), (point.y-1), cols);\n\n        if(gridMap[up].type !== \"wall\" && gridMap[up].type !== \"start\"){\n            neighbors[2] = gridMap[up];\n        }\n    }\n    if(point.y < rows-1){\n        const down = getIndex((point.x), (point.y+1), cols);\n\n        if(gridMap[down].type !== \"wall\" && gridMap[down].type !== \"start\"){\n            neighbors[3] = gridMap[down];\n        }\n    }\n    if(point.x > 0 && point.y > 0){\n        const topLeft = getIndex((point.x-1), (point.y-1), cols);\n\n        if(gridMap[topLeft].type !== \"wall\" && gridMap[topLeft].type !== \"start\"){\n            neighbors[4] = gridMap[topLeft];\n        }\n    }\n    if(point.x < cols-1 && point.y > 0){\n        const topRight = getIndex((point.x+1), (point.y-1), cols);\n\n        if(gridMap[topRight].type !== \"wall\" && gridMap[topRight].type !== \"start\"){\n            neighbors[5] = gridMap[topRight];\n        }\n    }\n    if(point.x > 0 && point.y < rows-1){\n        const bottomLeft  = getIndex((point.x-1), (point.y+1), cols);\n\n        if(gridMap[bottomLeft].type !== \"wall\" && gridMap[bottomLeft].type !== \"start\"){\n            neighbors[6] = gridMap[bottomLeft];\n        }\n    }\n    if(point.x < cols-1 && point.y < rows-1){\n        const bottomRight = getIndex((point.x+1), (point.y+1), cols);\n\n        if(gridMap[bottomRight].type !== \"wall\" && gridMap[bottomRight].type !== \"start\"){\n            neighbors[7] = gridMap[bottomRight];\n        }\n    }\n\n    return neighbors;\n}\n\nfunction Dijkstra(rows, cols, gridMap, memState, setState){\n    const [startPoint, endPoints] = getPoints(gridMap);\n    const queue = new FibonacciHeap();\n    const point = {};\n    const cameFrom = {};\n    const gScore = {};\n    const states = [];\n\n    //TODO: Bug, clears grid but then returns it to its previous state\n    const newState = {\n        ...memState,\n        grid: new Array(rows*cols).fill({val: false, type: null}).map((square, i) => {\n            return {\n                ...square,\n                x: i % cols,\n                y: Math.abs((i - (i % cols)) / cols)\n            }\n        })\n    }\n    states.push(newState);\n\n    let goal = endPoints[0];\n\n    if(!startPoint || !endPoints){\n        console.log(\"Map must have a start point, and an end point\");\n        return \"Map must have a start point, and an end point\"; \n    }\n\n    gScore[getIndex(startPoint.x, startPoint.y, cols)] = 0;\n    cameFrom[getIndex(startPoint.x, startPoint.y, cols)] = null;\n            if(point[gScore[index]] == null){\n            point[gScore[index]] = [];\n        };\n\n        point[gScore[index]].push(square);\n\n    gridMap.map((square, index) => {\n        if(getIndex(startPoint.x, startPoint.y, cols) !== index){\n            gScore[index] = Number.POSITIVE_INFINITY;\n            cameFrom[index] = null\n        }\n\n        queue.insert(new FibonacciHeapNode(gScore[index]));\n\n        return null;\n    });\n\n    while(queue.getRootList().length > 0){\n        console.log(point);\n        const current = point[queue.peek()][point[queue.peek()].length-1];\n\n        queue.extractMin();\n        point[gScore[getIndex(current.x, current.y, cols)]].pop();\n\n        console.log(Array.from(queue.getRootList()))\n\n        const newState = {\n            ...memState,\n            grid: memState.grid.map((square, index) => {\n                if(current.x === square.x && current.y === square.y){\n                    if(current.type !== \"start\" && current.type !== \"end\"){\n                        memState.grid[index] = {\n                            ...memState.grid[index],\n                            val: true,\n                            type: \"neighbors\"\n                        }\n                    }\n                    return {...square}\n                }\n                return {...square}\n            })\n        }\n        states.push(newState);\n\n        if(current.x === goal.x && current.y === goal.y){\n            const state = states[states.length-1];\n            setState({\n                // return {\n                ...state,\n                //state object is immutable so updates have to be done this way\n                grid: state.grid.map((square, index) => {\n                    if(cameFrom[index]){\n                        if(square.type === \"end\"){\n                            let prev = cameFrom[index];\n                \n                            while(prev){                   \n                                if(prev.type !== \"start\" && prev.type !== \"end\"){\n                                    state.grid[getIndex(prev.x,prev.y,state.cols)] = {\n                                        ...state.grid[getIndex(prev.x,prev.y,state.cols)],\n                                        val: true,\n                                        type: \"path\"\n                                    }\n                                }\n                                prev = cameFrom[getIndex(prev.x,prev.y,state.cols)];\n                            }\n                            return {...square};\n                        }\n                        return {...square};\n                    }\n                    return {...square};\n                })\n            \n            });\n\n            console.log(\"PATH FOUND!!!!!\");\n            return states;\n        }\n\n    //     const neighbors = getNeighbors(current, gridMap, rows, cols);\n\n    //     neighbors.map((neighbor) => {\n    //         // console.log(neighbor);\n    //         // console.log((gScore[getIndex(current.x, current.y, cols)] + dist(current, neighbor)) + heuristic(neighbor, goal));\n    //         // console.log(\"neighbor\", neighbor);\n    //         const currentPathGScore = gScore[getIndex(current.x, current.y, cols)] + dist(current, neighbor);\n\n    //         if(currentPathGScore < gScore[getIndex(neighbor.x, neighbor.y, cols)] || !gScore[getIndex(neighbor.x, neighbor.y, cols)]){\n    //             cameFrom[getIndex(neighbor.x, neighbor.y, cols)] = current;\n\n    //             gScore[getIndex(neighbor.x, neighbor.y, cols)] = currentPathGScore;\n                \n    //             if(point[gScore[getIndex(neighbor.x, neighbor.y, cols)]] == null){\n    //                 point[gScore[getIndex(neighbor.x, neighbor.y, cols)]] = [];\n    //             }\n                \n    //             point[gScore[getIndex(neighbor.x, neighbor.y, cols)]].push(neighbor);\n\n    //             //TODO: figure out how to do this in constant time\n    //             queue.decreaseKey();\n                    \n                \n    //             return null;\n    //         }\n    //         return null;\n    //     })\n    }\n}\n\nexport default Dijkstra;"]},"metadata":{},"sourceType":"module"}