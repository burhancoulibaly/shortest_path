{"ast":null,"code":"import MinHeap from './MinHeap';\n\nfunction getIndex(x, y, cols) {\n  return x + y * cols;\n}\n\nfunction heuristic(startPoint, endPoint) {\n  //TODO make this a switch for the different types of heuristic functions\n  const distance = Math.sqrt(Math.pow(startPoint.x - endPoint.x, 2) + Math.pow(startPoint.y - endPoint.y, 2));\n  return distance;\n}\n\nfunction dist(startPoint, endPoint) {\n  //TODO make this a switch for the different types of heuristic functions\n  const distance = Math.sqrt(Math.pow(startPoint.x - endPoint.x, 2) + Math.pow(startPoint.y - endPoint.y, 2));\n  return distance;\n}\n\nfunction getPoints(gridMap) {\n  let startPoint = null;\n  let wallPoints = [];\n  let endPoints = [];\n  gridMap.map(square => {\n    if (square.val && square.type === \"start\") {\n      // console.log(square);\n      startPoint = square;\n      return null;\n    }\n\n    if (square.val && square.type === \"wall\") {\n      // console.log(square);\n      wallPoints.push(square);\n      return null;\n    }\n\n    if (square.val && square.type === \"end\") {\n      // console.log(square);\n      endPoints.push(square);\n      return null;\n    }\n\n    return null;\n  });\n  return [startPoint, wallPoints, endPoints];\n}\n\nfunction getNeighbors(point, gridMap, rows, cols) {\n  //Point                                 Index\n  // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n  // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n  // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n  // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n  // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n  // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n  // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n  // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n  const neighbors = new Array(8);\n\n  if (point.x - 1 > 0) {\n    const left = getIndex(point.x - 1, point.y, cols);\n    console.log(!gridMap[left].val && gridMap[left].type !== \"wall\" && gridMap[left].type !== \"start\");\n\n    if (!gridMap[left].val && gridMap[left].type !== \"wall\" && gridMap[left].type !== \"start\") {\n      neighbors[0] = gridMap[left];\n    }\n  }\n\n  if (point.x + 1 < cols) {\n    const right = getIndex(point.x + 1, point.y, cols);\n    console.log(!gridMap[right].val && gridMap[right].type !== \"wall\" && gridMap[right].type !== \"start\");\n\n    if (!gridMap[right].val && gridMap[right].type !== \"wall\" && gridMap[right].type !== \"start\") {\n      neighbors[1] = gridMap[right];\n    }\n  }\n\n  if (point.y - 1 > 0) {\n    const up = getIndex(point.x, point.y - 1, cols);\n    console.log(!gridMap[up].val && gridMap[up].type !== \"wall\" && gridMap[up].type !== \"start\");\n\n    if (!gridMap[up].val && gridMap[up].type !== \"wall\" && gridMap[up].type !== \"start\") {\n      neighbors[2] = gridMap[up];\n    }\n  }\n\n  if (point.y + 1 < rows) {\n    const down = getIndex(point.x, point.y + 1, cols);\n    console.log(!gridMap[down].val && gridMap[down].type !== \"wall\" && gridMap[down].type !== \"start\");\n\n    if (!gridMap[down].val && gridMap[down].type !== \"wall\" && gridMap[down].type !== \"start\") {\n      neighbors[3] = gridMap[down];\n    }\n  }\n\n  if (point.x - 1 > 0 && point.y - 1 > 0) {\n    const topLeft = getIndex(point.x - 1, point.y - 1, cols);\n    console.log(!gridMap[topLeft].val && gridMap[topLeft].type !== \"wall\" && gridMap[topLeft].type !== \"start\");\n\n    if (!gridMap[topLeft].val && gridMap[topLeft].type !== \"wall\" && gridMap[topLeft].type !== \"start\") {\n      neighbors[4] = gridMap[topLeft];\n    }\n  }\n\n  if (point.x + 1 < cols && point.y - 1 > 0) {\n    const topRight = getIndex(point.x + 1, point.y - 1, cols);\n    console.log(!gridMap[topRight].val && gridMap[topRight].type !== \"wall\" && gridMap[topRight].type !== \"start\");\n\n    if (!gridMap[topRight].val && gridMap[topRight].type !== \"wall\" && gridMap[topRight].type !== \"start\") {\n      neighbors[5] = gridMap[topRight];\n    }\n  }\n\n  if (point.x - 1 > 0 && point.y + 1 < rows) {\n    const bottomLeft = getIndex(point.x - 1, point.y + 1, cols);\n    console.log(!gridMap[bottomLeft].val && gridMap[bottomLeft].type !== \"wall\" && gridMap[bottomLeft].type !== \"start\");\n\n    if (!gridMap[bottomLeft].val && gridMap[bottomLeft].type !== \"wall\" && gridMap[bottomLeft].type !== \"start\") {\n      neighbors[6] = gridMap[bottomLeft];\n    }\n  }\n\n  if (point.x + 1 < cols && point.y + 1 < rows) {\n    const bottomRight = getIndex(point.x + 1, point.y + 1, cols);\n    console.log(!gridMap[bottomRight].val && gridMap[bottomRight].type !== \"wall\" && gridMap[bottomRight].type !== \"start\");\n\n    if (!gridMap[bottomRight].val && gridMap[bottomRight].type !== \"wall\" && gridMap[bottomRight].type !== \"start\") {\n      neighbors[7] = gridMap[bottomRight];\n    }\n  }\n\n  return neighbors;\n}\n\nfunction AStar(rows, cols, gridMap) {\n  const [startPoint, wallPoints, endPoints] = getPoints(gridMap);\n  let points = {};\n  let openSet = new MinHeap();\n  let cameFrom = {};\n  let gScore = {};\n  let fScore = {};\n  let goal = null;\n\n  if (!startPoint || !endPoints) {\n    console.log(\"Map must have a start point, and an end point\");\n    return \"Map must have a start point, and an end point\";\n  }\n\n  gScore[getIndex(startPoint.x, startPoint.y, cols)] = 0;\n  const endPointDistances = new Array(endPoints.length);\n  endPoints.map((endPoint, i) => {\n    const score = heuristic(startPoint, endPoint);\n    endPointDistances[i] = [endPoint, gScore[getIndex(startPoint.x, startPoint.y, cols)] + score];\n    return null;\n  }); // console.log(endPointDistances);\n\n  endPointDistances.sort((a, b) => {\n    if (a[1] > b[1]) {\n      return 1;\n    }\n\n    if (a[1] < b[1]) {\n      return -1;\n    }\n\n    return 0;\n  });\n  goal = endPointDistances[0][0];\n  fScore[getIndex(startPoint.x, startPoint.y, cols)] = endPointDistances[0][1];\n  openSet.insert(fScore[getIndex(startPoint.x, startPoint.y, cols)]);\n  points[fScore[getIndex(startPoint.x, startPoint.y, cols)]] = startPoint;\n  console.log(points);\n\n  while (openSet.getHeap().length !== 0) {\n    const current = points[openSet.peek().toString()]; // console.log(current);\n\n    if (current.x === goal.x && current.y === goal.y) {\n      console.log(\"current\", current);\n      console.log(\"goal\", goal);\n      console.log(\"GOOOAAAAALLLLLLL\");\n      console.log(cameFrom);\n      return cameFrom;\n    }\n\n    const neighbors = getNeighbors(current, gridMap, rows, cols);\n    openSet.extract();\n    neighbors.map(neighbor => {\n      if (!neighbor) {\n        return null;\n      } // console.log(\"neighbor\", neighbor);\n\n\n      const currentPathGScore = gScore[getIndex(current.x, current.y, cols)] + dist(current, neighbor);\n\n      if (gScore[getIndex(neighbor.x, neighbor.y, cols)]) {\n        if (currentPathGScore < gScore[getIndex(neighbor.x, neighbor.y, cols)]) {\n          cameFrom[getIndex(neighbor.x, neighbor.y, cols)] = current;\n          gScore[getIndex(neighbor.x, neighbor.y, cols)] = currentPathGScore;\n          fScore[getIndex(neighbor.x, neighbor.y, cols)] = gScore[getIndex(neighbor.x, neighbor.y, cols)] + heuristic(neighbor, goal);\n\n          if (!openSet.find(fScore[getIndex(neighbor.x, neighbor.y, cols)])) {\n            openSet.insert(fScore[getIndex(neighbor.x, neighbor.y, cols)]);\n            points[fScore[getIndex(neighbor.x, neighbor.y, cols)]] = neighbor;\n          }\n\n          return null;\n        }\n\n        return null;\n      }\n\n      cameFrom[getIndex(neighbor.x, neighbor.y, cols)] = current;\n      gScore[getIndex(neighbor.x, neighbor.y, cols)] = currentPathGScore;\n      fScore[getIndex(neighbor.x, neighbor.y, cols)] = gScore[getIndex(neighbor.x, neighbor.y, cols)] + heuristic(neighbor, goal); // console.log(openSet.find(fScore[getIndex(neighbor.x, neighbor.y, cols)]));\n\n      if (!openSet.find(fScore[getIndex(neighbor.x, neighbor.y, cols)])) {\n        openSet.insert(fScore[getIndex(neighbor.x, neighbor.y, cols)]);\n        points[fScore[getIndex(neighbor.x, neighbor.y, cols)]] = neighbor;\n      }\n\n      return null;\n    });\n  }\n\n  console.log(openSet.getHeap());\n  return;\n}\n\nexport default AStar;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Algorithms/AStar.js"],"names":["MinHeap","getIndex","x","y","cols","heuristic","startPoint","endPoint","distance","Math","sqrt","pow","dist","getPoints","gridMap","wallPoints","endPoints","map","square","val","type","push","getNeighbors","point","rows","neighbors","Array","left","console","log","right","up","down","topLeft","topRight","bottomLeft","bottomRight","AStar","points","openSet","cameFrom","gScore","fScore","goal","endPointDistances","length","i","score","sort","a","b","insert","getHeap","current","peek","toString","extract","neighbor","currentPathGScore","find"],"mappings":"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","sourcesContent":["import MinHeap from './MinHeap';\n\nfunction getIndex(x, y, cols){\n    return (x + (y * cols));\n}\n\nfunction heuristic(startPoint, endPoint){\n    //TODO make this a switch for the different types of heuristic functions\n    const distance = Math.sqrt(Math.pow((startPoint.x-endPoint.x), 2) + Math.pow((startPoint.y-endPoint.y), 2));  \n\n    return distance;\n} \n\nfunction dist(startPoint, endPoint){\n    //TODO make this a switch for the different types of heuristic functions\n    const distance = Math.sqrt(Math.pow((startPoint.x-endPoint.x), 2) + Math.pow((startPoint.y-endPoint.y), 2));  \n\n    return distance;\n} \n\nfunction getPoints(gridMap){\n    let startPoint = null;\n    let wallPoints = [];\n    let endPoints = [];\n\n    gridMap.map((square) => {\n        if(square.val && square.type ===  \"start\"){\n            // console.log(square);\n            startPoint = square;\n\n            return null;\n        }\n\n        if(square.val && square.type === \"wall\"){\n            // console.log(square);\n            wallPoints.push(square);\n\n            return null;\n        }\n\n        if(square.val && square.type === \"end\"){\n            // console.log(square);\n            endPoints.push(square);\n\n            return null;\n        }\n\n        return null;\n    })\n\n    return [startPoint, wallPoints, endPoints];\n}\n\nfunction getNeighbors(point, gridMap, rows, cols){\n    //Point                                 Index\n    // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n    // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n    // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n    // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n    // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n    // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n    // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n    // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n\n    const neighbors = new Array(8);\n\n    if(point.x-1 > 0){\n        const left = getIndex((point.x-1), (point.y), cols);\n        console.log(!gridMap[left].val && gridMap[left].type !== \"wall\" && gridMap[left].type !== \"start\");\n        if(!gridMap[left].val  && gridMap[left].type !== \"wall\" && gridMap[left].type !== \"start\"){\n            neighbors[0] = gridMap[left];\n        }\n    }\n    if(point.x+1 < cols){\n        const right = getIndex((point.x+1), (point.y), cols);\n        console.log(!gridMap[right].val  && gridMap[right].type !== \"wall\" && gridMap[right].type !== \"start\");\n        if(!gridMap[right].val  && gridMap[right].type !== \"wall\" && gridMap[right].type !== \"start\"){\n            neighbors[1] = gridMap[right];\n        }\n    }\n    if(point.y-1 > 0){\n        const up = getIndex((point.x), (point.y-1), cols);\n        console.log(!gridMap[up].val  && gridMap[up].type !== \"wall\" && gridMap[up].type !== \"start\");\n        if(!gridMap[up].val  && gridMap[up].type !== \"wall\" && gridMap[up].type !== \"start\"){\n            neighbors[2] = gridMap[up];\n        }\n    }\n    if(point.y+1 < rows){\n        const down = getIndex((point.x), (point.y+1), cols);\n        console.log(!gridMap[down].val  && gridMap[down].type !== \"wall\" && gridMap[down].type !== \"start\");\n        if(!gridMap[down].val  && gridMap[down].type !== \"wall\" && gridMap[down].type !== \"start\"){\n            neighbors[3] = gridMap[down];\n        }\n    }\n    if(point.x-1 > 0 && point.y-1 > 0){\n        const topLeft = getIndex((point.x-1), (point.y-1), cols);\n        console.log(!gridMap[topLeft].val  && gridMap[topLeft].type !== \"wall\" && gridMap[topLeft].type !== \"start\");\n        if(!gridMap[topLeft].val  && gridMap[topLeft].type !== \"wall\" && gridMap[topLeft].type !== \"start\"){\n            neighbors[4] = gridMap[topLeft];\n        }\n    }\n    if(point.x+1 < cols && point.y-1 > 0){\n        const topRight = getIndex((point.x+1), (point.y-1), cols);\n        console.log(!gridMap[topRight].val  && gridMap[topRight].type !== \"wall\" && gridMap[topRight].type !== \"start\");\n        if(!gridMap[topRight].val  && gridMap[topRight].type !== \"wall\" && gridMap[topRight].type !== \"start\"){\n            neighbors[5] = gridMap[topRight];\n        }\n    }\n    if(point.x-1 > 0 && point.y+1 < rows){\n        const bottomLeft  = getIndex((point.x-1), (point.y+1), cols);\n        console.log(!gridMap[bottomLeft].val  && gridMap[bottomLeft].type !== \"wall\" && gridMap[bottomLeft].type !== \"start\");\n        if(!gridMap[bottomLeft].val  && gridMap[bottomLeft].type !== \"wall\" && gridMap[bottomLeft].type !== \"start\"){\n            neighbors[6] = gridMap[bottomLeft];\n        }\n    }\n    if(point.x+1 < cols && point.y+1 < rows){\n        const bottomRight = getIndex((point.x+1), (point.y+1), cols);\n        console.log(!gridMap[bottomRight].val  && gridMap[bottomRight].type !== \"wall\" && gridMap[bottomRight].type !== \"start\");\n        if(!gridMap[bottomRight].val  && gridMap[bottomRight].type !== \"wall\" && gridMap[bottomRight].type !== \"start\"){\n            neighbors[7] = gridMap[bottomRight];\n        }\n    }\n\n    return neighbors;\n}\n\nfunction AStar(rows, cols, gridMap){\n    const [startPoint, wallPoints, endPoints] = getPoints(gridMap);\n\n    let points = {};\n    let openSet = new MinHeap();\n    let cameFrom = {};\n    let gScore = {};\n    let fScore = {};\n    let goal = null;\n    \n\n    if(!startPoint || !endPoints){\n        console.log(\"Map must have a start point, and an end point\");\n        return \"Map must have a start point, and an end point\"; \n    }\n\n    gScore[getIndex(startPoint.x, startPoint.y, cols)] = 0;\n\n    const endPointDistances = new Array(endPoints.length);\n\n    endPoints.map((endPoint, i) => {\n        const score = heuristic(startPoint, endPoint); \n\n        endPointDistances[i] = [endPoint, gScore[getIndex(startPoint.x, startPoint.y, cols)] + score];\n\n        return null;\n    })\n\n    // console.log(endPointDistances);\n    \n    endPointDistances.sort((a, b) => {\n        if(a[1] > b[1]){\n            return 1\n        }\n        if(a[1] < b[1]){\n            return -1\n        }\n\n        return 0;\n    });\n\n    goal = endPointDistances[0][0];\n\n    fScore[getIndex(startPoint.x, startPoint.y, cols)] = endPointDistances[0][1];\n\n    openSet.insert(fScore[getIndex(startPoint.x, startPoint.y, cols)]);\n    points[fScore[getIndex(startPoint.x, startPoint.y, cols)]] = startPoint;\n\n    console.log(points);\n    while(openSet.getHeap().length !== 0){\n        const current = points[openSet.peek().toString()];\n        // console.log(current);\n\n        if(current.x === goal.x && current.y === goal.y){\n            console.log(\"current\",current);\n            console.log(\"goal\", goal);\n            console.log(\"GOOOAAAAALLLLLLL\");\n            console.log(cameFrom);\n            return cameFrom;\n        }\n\n        const neighbors = getNeighbors(current, gridMap, rows, cols);\n\n\n        openSet.extract();\n\n\n        neighbors.map((neighbor) => {\n            if(!neighbor){\n                return null;\n            }\n\n            // console.log(\"neighbor\", neighbor);\n            const currentPathGScore = gScore[getIndex(current.x, current.y, cols)] + dist(current, neighbor);\n\n            if(gScore[getIndex(neighbor.x, neighbor.y, cols)]){\n                if(currentPathGScore < gScore[getIndex(neighbor.x, neighbor.y, cols)]){\n\n                    cameFrom[getIndex(neighbor.x, neighbor.y, cols)] = current;\n                    gScore[getIndex(neighbor.x, neighbor.y, cols)] = currentPathGScore\n                    fScore[getIndex(neighbor.x, neighbor.y, cols)] = gScore[getIndex(neighbor.x, neighbor.y, cols)] + heuristic(neighbor, goal);\n                    \n                    if(!openSet.find(fScore[getIndex(neighbor.x, neighbor.y, cols)])){\n                        openSet.insert(fScore[getIndex(neighbor.x, neighbor.y, cols)]);\n                        points[fScore[getIndex(neighbor.x, neighbor.y, cols)]] = neighbor;\n                    } \n                    return null;\n                }\n                return null;\n            }\n\n            cameFrom[getIndex(neighbor.x, neighbor.y, cols)] = current;\n            gScore[getIndex(neighbor.x, neighbor.y, cols)] = currentPathGScore;\n            fScore[getIndex(neighbor.x, neighbor.y, cols)] = (gScore[getIndex(neighbor.x, neighbor.y, cols)] + heuristic(neighbor, goal));\n            \n            // console.log(openSet.find(fScore[getIndex(neighbor.x, neighbor.y, cols)]));\n            if(!openSet.find(fScore[getIndex(neighbor.x, neighbor.y, cols)])){\n                openSet.insert(fScore[getIndex(neighbor.x, neighbor.y, cols)]);\n                points[fScore[getIndex(neighbor.x, neighbor.y, cols)]] = neighbor;\n            }\n            return null;    \n        });\n    }\n\n    console.log(openSet.getHeap());\n\n    return;\n}\n\nexport default AStar"]},"metadata":{},"sourceType":"module"}