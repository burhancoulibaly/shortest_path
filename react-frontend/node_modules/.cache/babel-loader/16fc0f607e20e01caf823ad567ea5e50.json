{"ast":null,"code":"import FibonacciHeapNode from '../Algorithms/FibonacciHeapNode';\nimport FibonacciHeap from '../Algorithms/FibonacciHeap';\n\nfunction getIndex(x, y, cols) {\n  return x + y * cols;\n}\n\nfunction dist(startPoint, endPoint) {\n  //TODO make this a switch for the different types of heuristic functions\n  const distance = Math.sqrt(Math.pow(endPoint.x - startPoint.x, 2) + Math.pow(endPoint.y - startPoint.y, 2));\n  return distance;\n}\n\nfunction getPoints(gridMap) {\n  let startPoint = null;\n  let endPoints = [];\n  gridMap.map(square => {\n    if (square.val && square.type === \"start\") {\n      // console.log(square);\n      startPoint = square;\n      return null;\n    }\n\n    if (square.val && square.type === \"end\") {\n      // console.log(square);\n      endPoints.push(square);\n      return null;\n    }\n\n    return null;\n  });\n  return [startPoint, endPoints];\n}\n\nfunction getNeighbors(current, gridMap, rows, cols, gScore, points) {\n  console.log(\"hello\"); //Point                                 Index\n  // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n  // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n  // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n  // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n  // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n  // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n  // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n  // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n\n  const neighbors = new Array(8);\n\n  if (current.x > 0) {\n    const left = getIndex(current.x - 1, current.y, cols);\n\n    if (gridMap[left].type !== \"wall\" && gridMap[left].type !== \"start\") {\n      neighbors[0] = gridMap[left];\n    }\n  }\n\n  if (current.x < cols - 1) {\n    const right = getIndex(current.x + 1, current.y, cols);\n\n    if (gridMap[right].type !== \"wall\" && gridMap[right].type !== \"start\") {\n      neighbors[1] = gridMap[right];\n    }\n  }\n\n  if (current.y > 0) {\n    const up = getIndex(current.x, current.y - 1, cols);\n\n    if (gridMap[up].type !== \"wall\" && gridMap[up].type !== \"start\") {\n      neighbors[2] = gridMap[up];\n    }\n  }\n\n  if (current.y < rows - 1) {\n    const down = getIndex(current.x, current.y + 1, cols);\n\n    if (gridMap[down].type !== \"wall\" && gridMap[down].type !== \"start\") {\n      neighbors[3] = gridMap[down];\n    }\n  }\n\n  if (current.x > 0 && current.y > 0) {\n    const topLeft = getIndex(current.x - 1, current.y - 1, cols);\n\n    if (gridMap[topLeft].type !== \"wall\" && gridMap[topLeft].type !== \"start\") {\n      neighbors[4] = gridMap[topLeft];\n    }\n  }\n\n  if (current.x < cols - 1 && current.y > 0) {\n    const topRight = getIndex(current.x + 1, current.y - 1, cols);\n\n    if (gridMap[topRight].type !== \"wall\" && gridMap[topRight].type !== \"start\") {\n      neighbors[5] = gridMap[topRight];\n    }\n  }\n\n  if (current.x > 0 && current.y < rows - 1) {\n    const bottomLeft = getIndex(current.x - 1, current.y + 1, cols);\n\n    if (gridMap[bottomLeft].type !== \"wall\" && gridMap[bottomLeft].type !== \"start\") {\n      neighbors[6] = gridMap[bottomLeft];\n    }\n  }\n\n  if (current.x < cols - 1 && current.y < rows - 1) {\n    const bottomRight = getIndex(current.x + 1, current.y + 1, cols);\n\n    if (gridMap[bottomRight].type !== \"wall\" && gridMap[bottomRight].type !== \"start\") {\n      neighbors[7] = gridMap[bottomRight];\n    }\n  }\n\n  return neighbors;\n}\n\nfunction Dijkstra(rows, cols, gridMap, memState, setState) {\n  const [startPoint, endPoints] = getPoints(gridMap);\n  const queue = new FibonacciHeap();\n  const cameFrom = {};\n  const gScore = {};\n  const states = []; //TODO: Bug, clears grid but then returns it to its previous state\n\n  const newState = { ...memState,\n    grid: new Array(rows * cols).fill({\n      val: false,\n      type: null\n    }).map((square, i) => {\n      return { ...square,\n        x: i % cols,\n        y: Math.abs((i - i % cols) / cols)\n      };\n    })\n  };\n  states.push(newState);\n  let goal = endPoints[0];\n\n  if (!startPoint || !endPoints) {\n    console.log(\"Map must have a start point, and an end point\");\n    return \"Map must have a start point, and an end point\";\n  }\n\n  gScore[getIndex(startPoint.x, startPoint.y, cols)] = 0;\n  cameFrom[getIndex(startPoint.x, startPoint.y, cols)] = null;\n  gridMap.map((square, index) => {\n    if (getIndex(startPoint.x, startPoint.y, cols) !== index) {\n      gScore[index] = Number.POSITIVE_INFINITY;\n      cameFrom[index] = null;\n    }\n\n    const node = new FibonacciHeapNode(gScore[index], square);\n    queue.insert(node);\n    return null;\n  });\n\n  while (queue.getRootList().length > 0) {\n    console.log(\"new min\", queue.peek());\n    const current = queue.peek().getPoint();\n    console.log(current);\n    queue.extractMin();\n    console.log(Array.from(queue.getRootList()));\n    const newState = { ...memState,\n      grid: memState.grid.map((square, index) => {\n        if (current.x === square.x && current.y === square.y) {\n          if (current.type !== \"start\" && current.type !== \"end\") {\n            memState.grid[index] = { ...memState.grid[index],\n              val: true,\n              type: \"neighbors\"\n            };\n          }\n\n          return { ...square\n          };\n        }\n\n        return { ...square\n        };\n      })\n    };\n    states.push(newState);\n\n    if (current.x === goal.x && current.y === goal.y) {\n      const state = states[states.length - 1];\n      setState({ // return {\n        ...state,\n        //state object is immutable so updates have to be done this way\n        grid: state.grid.map((square, index) => {\n          if (cameFrom[index]) {\n            if (square.type === \"end\") {\n              let prev = cameFrom[index];\n\n              while (prev) {\n                if (prev.type !== \"start\" && prev.type !== \"end\") {\n                  state.grid[getIndex(prev.x, prev.y, state.cols)] = { ...state.grid[getIndex(prev.x, prev.y, state.cols)],\n                    val: true,\n                    type: \"path\"\n                  };\n                }\n\n                prev = cameFrom[getIndex(prev.x, prev.y, state.cols)];\n              }\n\n              return { ...square\n              };\n            }\n\n            return { ...square\n            };\n          }\n\n          return { ...square\n          };\n        })\n      });\n      console.log(\"PATH FOUND!!!!!\");\n      return states;\n    }\n\n    const neighbors = getNeighbors(current, gridMap, rows, cols);\n    console.log(neighbors);\n    neighbors.map(neighbor => {\n      console.log(neighbor); // console.log((gScore[getIndex(current.x, current.y, cols)] + dist(current, neighbor)) + heuristic(neighbor, goal));\n      // console.log(\"neighbor\", neighbor);\n\n      const currentPathGScore = gScore[getIndex(current.x, current.y, cols)] + dist(current, neighbor);\n\n      if (currentPathGScore < gScore[getIndex(neighbor.x, neighbor.y, cols)]) {\n        gScore[getIndex(neighbor.x, neighbor.y, cols)] = currentPathGScore;\n        cameFrom[getIndex(neighbor.x, neighbor.y, cols)] = current;\n\n        if (points[gScore[getIndex(neighbor.x, neighbor.y, cols)]] == null) {\n          points[gScore[getIndex(neighbor.x, neighbor.y, cols)]] = [];\n        } //TODO: figure out how to do this in constant time\n\n\n        queue.decreaseKey(neighbor.node, gScore[getIndex(neighbor.x, neighbor.y, cols)]); // console.log(gScore[getIndex(neighbor.x, neighbor.y, cols)]);\n        // console.log(Array.from(points[gScore[getIndex(neighbor.x, neighbor.y, cols)]]))\n\n        return null;\n      }\n\n      return null;\n    });\n  }\n}\n\nexport default Dijkstra;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Algorithms/Dijkstra.js"],"names":["FibonacciHeapNode","FibonacciHeap","getIndex","x","y","cols","dist","startPoint","endPoint","distance","Math","sqrt","pow","getPoints","gridMap","endPoints","map","square","val","type","push","getNeighbors","current","rows","gScore","points","console","log","neighbors","Array","left","right","up","down","topLeft","topRight","bottomLeft","bottomRight","Dijkstra","memState","setState","queue","cameFrom","states","newState","grid","fill","i","abs","goal","index","Number","POSITIVE_INFINITY","node","insert","getRootList","length","peek","getPoint","extractMin","from","state","prev","neighbor","currentPathGScore","decreaseKey"],"mappings":"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","sourcesContent":["import FibonacciHeapNode from '../Algorithms/FibonacciHeapNode';\nimport FibonacciHeap from '../Algorithms/FibonacciHeap';\n\nfunction getIndex(x, y, cols){\n    return (x + (y * cols));\n}\n\nfunction dist(startPoint, endPoint){\n    //TODO make this a switch for the different types of heuristic functions\n    const distance = Math.sqrt(Math.pow((endPoint.x-startPoint.x), 2) + Math.pow((endPoint.y-startPoint.y), 2));     \n    return distance;\n}\n\nfunction getPoints(gridMap){\n    let startPoint = null;\n    let endPoints = [];\n    \n    gridMap.map((square) => {\n        if(square.val && square.type ===  \"start\"){\n            // console.log(square);\n            startPoint = square;\n\n            return null;\n        }\n\n        if(square.val && square.type === \"end\"){\n            // console.log(square);\n            endPoints.push(square);\n\n            return null;\n        }\n\n        return null;\n    })\n\n    return [startPoint, endPoints];\n}\n\nfunction getNeighbors(current, gridMap, rows, cols, gScore, points){\n    console.log(\"hello\");\n    //Point                                 Index\n    // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n    // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n    // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n    // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n    // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n    // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n    // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n    // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n\n    const neighbors = new Array(8);\n    \n    if(current.x > 0){\n        const left = getIndex((current.x-1), (current.y), cols);\n\n        if(gridMap[left].type !== \"wall\" && gridMap[left].type !== \"start\"){\n            neighbors[0] = gridMap[left];\n        }\n    }\n    if(current.x < cols-1){\n        const right = getIndex((current.x+1), (current.y), cols);\n\n        if(gridMap[right].type !== \"wall\" && gridMap[right].type !== \"start\"){\n            neighbors[1] = gridMap[right]\n        }\n    }\n    if(current.y > 0){\n        const up = getIndex((current.x), (current.y-1), cols);\n\n        if(gridMap[up].type !== \"wall\" && gridMap[up].type !== \"start\"){\n            neighbors[2] = gridMap[up];\n        }\n    }\n    if(current.y < rows-1){\n        const down = getIndex((current.x), (current.y+1), cols);\n\n        if(gridMap[down].type !== \"wall\" && gridMap[down].type !== \"start\"){\n            neighbors[3] = gridMap[down];\n        }\n    }\n    if(current.x > 0 && current.y > 0){\n        const topLeft = getIndex((current.x-1), (current.y-1), cols);\n\n        if(gridMap[topLeft].type !== \"wall\" && gridMap[topLeft].type !== \"start\"){\n            neighbors[4] = gridMap[topLeft];\n        }\n    }\n    if(current.x < cols-1 && current.y > 0){\n        const topRight = getIndex((current.x+1), (current.y-1), cols);\n\n        if(gridMap[topRight].type !== \"wall\" && gridMap[topRight].type !== \"start\"){\n            neighbors[5] = gridMap[topRight];\n        }\n    }\n    if(current.x > 0 && current.y < rows-1){\n        const bottomLeft  = getIndex((current.x-1), (current.y+1), cols);\n\n        if(gridMap[bottomLeft].type !== \"wall\" && gridMap[bottomLeft].type !== \"start\"){\n            neighbors[6] = gridMap[bottomLeft];\n        }\n    }\n    if(current.x < cols-1 && current.y < rows-1){\n        const bottomRight = getIndex((current.x+1), (current.y+1), cols);\n\n        if(gridMap[bottomRight].type !== \"wall\" && gridMap[bottomRight].type !== \"start\"){\n            neighbors[7] = gridMap[bottomRight];\n        }\n    }\n\n    return neighbors;\n}\n\nfunction Dijkstra(rows, cols, gridMap, memState, setState){\n    const [startPoint, endPoints] = getPoints(gridMap);\n    const queue = new FibonacciHeap();\n    const cameFrom = {};\n    const gScore = {};\n    const states = [];\n\n    //TODO: Bug, clears grid but then returns it to its previous state\n    const newState = {\n        ...memState,\n        grid: new Array(rows*cols).fill({val: false, type: null}).map((square, i) => {\n            return {\n                ...square,\n                x: i % cols,\n                y: Math.abs((i - (i % cols)) / cols)\n            }\n        })\n    }\n    states.push(newState);\n\n    let goal = endPoints[0];\n\n    if(!startPoint || !endPoints){\n        console.log(\"Map must have a start point, and an end point\");\n        return \"Map must have a start point, and an end point\"; \n    }\n\n    gScore[getIndex(startPoint.x, startPoint.y, cols)] = 0;\n    cameFrom[getIndex(startPoint.x, startPoint.y, cols)] = null;\n\n    gridMap.map((square, index) => {\n        if(getIndex(startPoint.x, startPoint.y, cols) !== index){\n            gScore[index] = Number.POSITIVE_INFINITY;\n            cameFrom[index] = null\n        }\n\n        const node = new FibonacciHeapNode(gScore[index], square);\n        queue.insert(node);\n\n        return null;\n    });\n\n    while(queue.getRootList().length > 0){\n        console.log(\"new min\",queue.peek());\n        const current = queue.peek().getPoint();\n        console.log(current);\n\n        queue.extractMin();\n\n        console.log(Array.from(queue.getRootList()))\n\n        const newState = {\n            ...memState,\n            grid: memState.grid.map((square, index) => {\n                if(current.x === square.x && current.y === square.y){\n                    if(current.type !== \"start\" && current.type !== \"end\"){\n                        memState.grid[index] = {\n                            ...memState.grid[index],\n                            val: true,\n                            type: \"neighbors\"\n                        }\n                    }\n                    return {...square}\n                }\n                return {...square}\n            })\n        }\n        states.push(newState);\n\n        if(current.x === goal.x && current.y === goal.y){\n            const state = states[states.length-1];\n            setState({\n                // return {\n                ...state,\n                //state object is immutable so updates have to be done this way\n                grid: state.grid.map((square, index) => {\n                    if(cameFrom[index]){\n                        if(square.type === \"end\"){\n                            let prev = cameFrom[index];\n                \n                            while(prev){                   \n                                if(prev.type !== \"start\" && prev.type !== \"end\"){\n                                    state.grid[getIndex(prev.x,prev.y,state.cols)] = {\n                                        ...state.grid[getIndex(prev.x,prev.y,state.cols)],\n                                        val: true,\n                                        type: \"path\"\n                                    }\n                                }\n                                prev = cameFrom[getIndex(prev.x,prev.y,state.cols)];\n                            }\n                            return {...square};\n                        }\n                        return {...square};\n                    }\n                    return {...square};\n                })\n            \n            });\n\n            console.log(\"PATH FOUND!!!!!\");\n            return states;\n        }\n\n        const neighbors = getNeighbors(current, gridMap, rows, cols);\n        console.log(neighbors);\n        neighbors.map((neighbor) => {\n            console.log(neighbor);\n            // console.log((gScore[getIndex(current.x, current.y, cols)] + dist(current, neighbor)) + heuristic(neighbor, goal));\n            // console.log(\"neighbor\", neighbor);\n            const currentPathGScore = gScore[getIndex(current.x, current.y, cols)] + dist(current, neighbor);\n\n            if(currentPathGScore < gScore[getIndex(neighbor.x, neighbor.y, cols)]){\n\n                gScore[getIndex(neighbor.x, neighbor.y, cols)] = currentPathGScore;\n                \n                cameFrom[getIndex(neighbor.x, neighbor.y, cols)] = current;\n\n                if(points[gScore[getIndex(neighbor.x, neighbor.y, cols)]] == null){\n                    points[gScore[getIndex(neighbor.x, neighbor.y, cols)]] = [];\n                }\n\n                //TODO: figure out how to do this in constant time\n                queue.decreaseKey(neighbor.node, gScore[getIndex(neighbor.x, neighbor.y, cols)]);\n                \n                // console.log(gScore[getIndex(neighbor.x, neighbor.y, cols)]);\n                // console.log(Array.from(points[gScore[getIndex(neighbor.x, neighbor.y, cols)]]))\n\n                return null;\n            }\n            return null;\n        })\n    }\n}\n\nexport default Dijkstra;"]},"metadata":{},"sourceType":"module"}