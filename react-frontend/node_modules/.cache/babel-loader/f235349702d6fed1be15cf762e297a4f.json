{"ast":null,"code":"var _jsxFileName = \"/home/menekou/projects/react/shortest-path/react-frontend/src/Sandbox/Sandbox.js\";\nimport React, { useState, useEffect } from 'react';\nimport './Sandbox.css'; //TODO: Runs a little slow, find a way to optimize (possibly using hooks)\n\nfunction Square(props) {\n  let downFlag = false;\n  const [state, setState] = useState({\n    x: props.x,\n    y: props.y,\n    val: props.val,\n    type: props.itemType\n  });\n  useEffect(() => {\n    setState({ ...state,\n      val: props.val,\n      type: props.itemType\n    });\n  }, [props.val]); // const handleMouseDown = () => {\n  //     // props.squareClick(state.x,state.y);\n  //     // document.addEventListener('mouseover', handler);\n  //     // document.addEventListener('mouseup', handler);\n  // }\n\n  const handler = (e, x = null, y = null) => {\n    if (e.type === \"mousedown\") {\n      downFlag = true; // console.log(x,y);\n\n      props.squareClick(x, y);\n    }\n\n    if (e.type === \"mouseover\") {\n      if (downFlag) {\n        // console.log(x,y);\n        props.squareClick(x, y);\n      }\n    }\n\n    if (e.type === \"mouseup\") {\n      downFlag = false;\n    }\n  };\n\n  switch (state.type) {\n    case \"start\":\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          width: `${props.width}px`,\n          height: `${props.height}px`,\n          backgroundColor: props.val === true ? `green` : `white`\n        },\n        className: \"square\",\n        onMouseDown: e => handler(e, state.x, state.y),\n        onMouseUp: e => handler(e),\n        onMouseOver: e => handler(e, state.x, state.y),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 17\n        }\n      });\n\n    case \"wall\":\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          width: `${props.width}px`,\n          height: `${props.height}px`,\n          backgroundColor: props.val === true ? `gray` : `white`\n        },\n        className: \"square\",\n        onMouseDown: e => handler(e, state.x, state.y),\n        onMouseUp: e => handler(e),\n        onMouseOver: e => handler(e, state.x, state.y),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 17\n        }\n      });\n\n    case \"end\":\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          width: `${props.width}px`,\n          height: `${props.height}px`,\n          backgroundColor: props.val === true ? `red` : `white`\n        },\n        className: \"square\",\n        onMouseDown: e => handler(e, state.x, state.y),\n        onMouseUp: e => handler(e),\n        onMouseOver: e => handler(e, state.x, state.y),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 17\n        }\n      });\n\n    default:\n      break;\n  }\n}\n\nfunction Map(props) {\n  const [state, setState] = useState({\n    rows: 25,\n    cols: 50,\n    grid: new Array(25 * 50).fill({\n      val: false,\n      type: null\n    }),\n    itemType: \"start\"\n  });\n\n  const renderSquare = (x, y, val) => {\n    return /*#__PURE__*/React.createElement(Square, {\n      width: props.winDimensions.width / 50 / (50 / 25) //This keeps ratio of squares so that they are square, they become longer if height becomes longer than the width (Square width is twice as long as square height)\n      ,\n      height: Math.min(props.winDimensions.height / 25, props.winDimensions.width / 50 / (50 / 25)),\n      x: x,\n      y: y,\n      val: val,\n      squareClick: (x, y) => handleClick(x, y),\n      itemType: state.itemType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }\n    });\n  };\n\n  const switchItemType = itemType => {\n    setState({ ...state,\n      itemType: itemType\n    });\n  };\n\n  const handleClick = (x, y) => {\n    switch (state.itemType) {\n      case \"start\":\n        setState(state => ({ ...state,\n          //state object is immutable so updates have to be done this way\n          grid: state.grid.map((square, index) => {\n            if (index === y + x * state.cols) {\n              console.log(x, y, square.type, state.itemType);\n\n              if (square.type === state.itemType || !square.type) {\n                if (state.grid[y + x * state.cols].val) {\n                  return { ...square,\n                    val: !state.grid[y + x * state.cols].val,\n                    type: null\n                  };\n                }\n\n                return { ...square,\n                  val: !state.grid[y + x * state.cols].val,\n                  type: \"start\"\n                };\n              }\n            }\n\n            if (square.type == \"start\") {\n              return { ...square,\n                val: false,\n                type: null\n              };\n            }\n\n            return { ...square\n            }; // return row.map((col, i) => {\n            //     if(y === j && x === i){\n            //         // console.log(x,y,col.type,state.itemType);\n            //         if(col.type === state.itemType || !col.type){\n            //             if(state.grid[y][x].val){\n            //                 return {...col, val: !state.grid[y][x].val, type: null}\n            //             }\n            //             return {...col, val: !state.grid[y][x].val, type: \"start\"}\n            //         }\n            //     }\n            //     if(col.type == \"start\"){\n            //         return {...col, val: false, type: null}\n            //     }\n            //     return {...col}\n            // })\n          })\n        }));\n        break;\n\n      case \"wall\":\n        setState(state => ({ ...state,\n          //state object is immutable so updates have to be done this way\n          grid: state.grid.map((row, j) => {\n            return row.map((col, i) => {\n              if (y === j && x === i) {\n                // console.log(x,y,col.type,state.itemType);\n                if (col.type === state.itemType || !col.type) {\n                  if (state.grid[y][x].val) {\n                    return { ...col,\n                      val: !state.grid[y][x].val,\n                      type: null\n                    };\n                  }\n\n                  return { ...col,\n                    val: !state.grid[y][x].val,\n                    type: \"wall\"\n                  };\n                }\n              }\n\n              return { ...col\n              };\n            });\n          })\n        }));\n        break;\n\n      case \"end\":\n        setState(state => ({ ...state,\n          //state object is immutable so updates have to be done this way\n          grid: state.grid.map((row, j) => {\n            return row.map((col, i) => {\n              if (y === j && x === i) {\n                // console.log(x,y,col.type,state.itemType);\n                if (col.type === state.itemType || !col.type) {\n                  if (state.grid[y][x].val) {\n                    return { ...col,\n                      val: !state.grid[y][x].val,\n                      type: null\n                    };\n                  }\n\n                  return { ...col,\n                    val: !state.grid[y][x].val,\n                    type: \"end\"\n                  };\n                }\n              }\n\n              return { ...col\n              };\n            });\n          })\n        }));\n        break;\n\n      default:\n        break;\n    }\n\n    return;\n  };\n\n  console.log(state.cols);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 9\n    }\n  }, state.grid.filter((rows, index) => index % state.cols === 0).map((row, j) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid-row\",\n      key: j,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 25\n      }\n    }, state.grid.filter((cols, index) => index % state.cols !== 0).map((col, i) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"grid-col\",\n        key: j + i * state.cols,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 37\n        }\n      }, renderSquare(i, j, col.val));\n    }));\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => switchItemType(\"start\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 13\n    }\n  }, \"Start Item\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => switchItemType(\"wall\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 13\n    }\n  }, \"Wall Item\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => switchItemType(\"end\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 13\n    }\n  }, \"End Item\"));\n}\n\nfunction Sandbox() {\n  const [winDimensions, setWinDimensions] = useState({\n    width: document.documentElement.clientWidth,\n    height: document.documentElement.clientHeight\n  });\n  useEffect(() => {\n    const handleWinResize = () => {\n      setWinDimensions({\n        width: document.documentElement.clientWidth,\n        height: document.documentElement.clientHeight\n      });\n    };\n\n    window.addEventListener('resize', handleWinResize); // console.log(\"Window has been resized: \", winDimensions.width, winDimensions.height);\n\n    return () => {\n      window.removeEventListener('resize', handleWinResize);\n    };\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"sandbox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Map, {\n    winDimensions: winDimensions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default Sandbox;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Sandbox/Sandbox.js"],"names":["React","useState","useEffect","Square","props","downFlag","state","setState","x","y","val","type","itemType","handler","e","squareClick","width","height","backgroundColor","Map","rows","cols","grid","Array","fill","renderSquare","winDimensions","Math","min","handleClick","switchItemType","map","square","index","console","log","row","j","col","i","filter","Sandbox","setWinDimensions","document","documentElement","clientWidth","clientHeight","handleWinResize","window","addEventListener","removeEventListener"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,eAAP,C,CAEA;;AACA,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AACnB,MAAIC,QAAQ,GAAG,KAAf;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC;AAACO,IAAAA,CAAC,EAAEJ,KAAK,CAACI,CAAV;AAAaC,IAAAA,CAAC,EAAEL,KAAK,CAACK,CAAtB;AAAyBC,IAAAA,GAAG,EAAEN,KAAK,CAACM,GAApC;AAAyCC,IAAAA,IAAI,EAAEP,KAAK,CAACQ;AAArD,GAAD,CAAlC;AACAV,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,QAAQ,CAAC,EACL,GAAGD,KADE;AAELI,MAAAA,GAAG,EAAEN,KAAK,CAACM,GAFN;AAGLC,MAAAA,IAAI,EAAEP,KAAK,CAACQ;AAHP,KAAD,CAAR;AAKH,GANQ,EAMN,CAACR,KAAK,CAACM,GAAP,CANM,CAAT,CAHmB,CAWnB;AACA;AAEA;AAEA;AACA;;AAEA,QAAMG,OAAO,GAAG,CAACC,CAAD,EAAIN,CAAC,GAAC,IAAN,EAAYC,CAAC,GAAC,IAAd,KAAuB;AACnC,QAAGK,CAAC,CAACH,IAAF,KAAW,WAAd,EAA0B;AACtBN,MAAAA,QAAQ,GAAG,IAAX,CADsB,CAEtB;;AACAD,MAAAA,KAAK,CAACW,WAAN,CAAkBP,CAAlB,EAAoBC,CAApB;AACH;;AAED,QAAGK,CAAC,CAACH,IAAF,KAAW,WAAd,EAA0B;AACtB,UAAGN,QAAH,EAAY;AACR;AACAD,QAAAA,KAAK,CAACW,WAAN,CAAkBP,CAAlB,EAAqBC,CAArB;AACH;AACJ;;AAED,QAAGK,CAAC,CAACH,IAAF,KAAW,SAAd,EAAwB;AACpBN,MAAAA,QAAQ,GAAG,KAAX;AACH;AACJ,GAjBD;;AAmBA,UAAQC,KAAK,CAACK,IAAd;AACI,SAAK,OAAL;AACI,0BACI;AAAK,QAAA,KAAK,EAAE;AAACK,UAAAA,KAAK,EAAG,GAAEZ,KAAK,CAACY,KAAM,IAAvB;AAA4BC,UAAAA,MAAM,EAAE,GAAEb,KAAK,CAACa,MAAO,IAAnD;AAAwDC,UAAAA,eAAe,EAAEd,KAAK,CAACM,GAAN,KAAc,IAAd,GAAsB,OAAtB,GAAgC;AAAzG,SAAZ;AAA8H,QAAA,SAAS,EAAC,QAAxI;AAAiJ,QAAA,WAAW,EAAGI,CAAD,IAAOD,OAAO,CAACC,CAAD,EAAGR,KAAK,CAACE,CAAT,EAAWF,KAAK,CAACG,CAAjB,CAA5K;AAAiM,QAAA,SAAS,EAAGK,CAAD,IAAOD,OAAO,CAACC,CAAD,CAA1N;AAA+N,QAAA,WAAW,EAAGA,CAAD,IAAOD,OAAO,CAACC,CAAD,EAAGR,KAAK,CAACE,CAAT,EAAWF,KAAK,CAACG,CAAjB,CAA1P;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;;AAIJ,SAAK,MAAL;AACI,0BACI;AAAK,QAAA,KAAK,EAAE;AAACO,UAAAA,KAAK,EAAG,GAAEZ,KAAK,CAACY,KAAM,IAAvB;AAA4BC,UAAAA,MAAM,EAAE,GAAEb,KAAK,CAACa,MAAO,IAAnD;AAAwDC,UAAAA,eAAe,EAAEd,KAAK,CAACM,GAAN,KAAc,IAAd,GAAsB,MAAtB,GAA+B;AAAxG,SAAZ;AAA6H,QAAA,SAAS,EAAC,QAAvI;AAAgJ,QAAA,WAAW,EAAGI,CAAD,IAAOD,OAAO,CAACC,CAAD,EAAGR,KAAK,CAACE,CAAT,EAAWF,KAAK,CAACG,CAAjB,CAA3K;AAAgM,QAAA,SAAS,EAAGK,CAAD,IAAOD,OAAO,CAACC,CAAD,CAAzN;AAA8N,QAAA,WAAW,EAAGA,CAAD,IAAOD,OAAO,CAACC,CAAD,EAAGR,KAAK,CAACE,CAAT,EAAWF,KAAK,CAACG,CAAjB,CAAzP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;;AAIJ,SAAK,KAAL;AACI,0BACI;AAAK,QAAA,KAAK,EAAE;AAACO,UAAAA,KAAK,EAAG,GAAEZ,KAAK,CAACY,KAAM,IAAvB;AAA4BC,UAAAA,MAAM,EAAE,GAAEb,KAAK,CAACa,MAAO,IAAnD;AAAwDC,UAAAA,eAAe,EAAEd,KAAK,CAACM,GAAN,KAAc,IAAd,GAAsB,KAAtB,GAA8B;AAAvG,SAAZ;AAA4H,QAAA,SAAS,EAAC,QAAtI;AAA+I,QAAA,WAAW,EAAGI,CAAD,IAAOD,OAAO,CAACC,CAAD,EAAGR,KAAK,CAACE,CAAT,EAAWF,KAAK,CAACG,CAAjB,CAA1K;AAA+L,QAAA,SAAS,EAAGK,CAAD,IAAOD,OAAO,CAACC,CAAD,CAAxN;AAA6N,QAAA,WAAW,EAAGA,CAAD,IAAOD,OAAO,CAACC,CAAD,EAAGR,KAAK,CAACE,CAAT,EAAWF,KAAK,CAACG,CAAjB,CAAxP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;;AAIJ;AACI;AAjBR;AAmBH;;AAED,SAASU,GAAT,CAAaf,KAAb,EAAoB;AAChB,QAAM,CAACE,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC;AAC/BmB,IAAAA,IAAI,EAAE,EADyB;AAE/BC,IAAAA,IAAI,EAAC,EAF0B;AAG/BC,IAAAA,IAAI,EAAE,IAAIC,KAAJ,CAAU,KAAG,EAAb,EAAiBC,IAAjB,CAAsB;AAACd,MAAAA,GAAG,EAAE,KAAN;AAAaC,MAAAA,IAAI,EAAE;AAAnB,KAAtB,CAHyB;AAI/BC,IAAAA,QAAQ,EAAE;AAJqB,GAAD,CAAlC;;AAOA,QAAMa,YAAY,GAAG,CAACjB,CAAD,EAAGC,CAAH,EAAKC,GAAL,KAAa;AAC9B,wBACI,oBAAC,MAAD;AACI,MAAA,KAAK,EAAGN,KAAK,CAACsB,aAAN,CAAoBV,KAApB,GAA4B,EAA7B,IAAoC,KAAK,EAAzC,CADX,CAEI;AAFJ;AAGI,MAAA,MAAM,EAAEW,IAAI,CAACC,GAAL,CAAUxB,KAAK,CAACsB,aAAN,CAAoBT,MAApB,GAA6B,EAAvC,EAA6Cb,KAAK,CAACsB,aAAN,CAAoBV,KAApB,GAA4B,EAA7B,IAAoC,KAAK,EAAzC,CAA5C,CAHZ;AAII,MAAA,CAAC,EAAER,CAJP;AAKI,MAAA,CAAC,EAAEC,CALP;AAMI,MAAA,GAAG,EAAEC,GANT;AAOI,MAAA,WAAW,EAAE,CAACF,CAAD,EAAIC,CAAJ,KAAUoB,WAAW,CAACrB,CAAD,EAAIC,CAAJ,CAPtC;AAQI,MAAA,QAAQ,EAAEH,KAAK,CAACM,QARpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAYH,GAbD;;AAeA,QAAMkB,cAAc,GAAIlB,QAAD,IAAc;AACjCL,IAAAA,QAAQ,CAAC,EACL,GAAGD,KADE;AAELM,MAAAA,QAAQ,EAAEA;AAFL,KAAD,CAAR;AAIH,GALD;;AASA,QAAMiB,WAAW,GAAG,CAACrB,CAAD,EAAGC,CAAH,KAAS;AACzB,YAAQH,KAAK,CAACM,QAAd;AACI,WAAK,OAAL;AACIL,QAAAA,QAAQ,CAACD,KAAK,KAAK,EACf,GAAGA,KADY;AAEf;AACAgB,UAAAA,IAAI,EAAEhB,KAAK,CAACgB,IAAN,CAAWS,GAAX,CAAe,CAACC,MAAD,EAASC,KAAT,KAAmB;AAChC,gBAAGA,KAAK,KAAKxB,CAAC,GAAID,CAAC,GAAGF,KAAK,CAACe,IAA5B,EAAkC;AAC9Ba,cAAAA,OAAO,CAACC,GAAR,CAAY3B,CAAZ,EAAcC,CAAd,EAAgBuB,MAAM,CAACrB,IAAvB,EAA4BL,KAAK,CAACM,QAAlC;;AACA,kBAAGoB,MAAM,CAACrB,IAAP,KAAgBL,KAAK,CAACM,QAAtB,IAAkC,CAACoB,MAAM,CAACrB,IAA7C,EAAkD;AAC9C,oBAAGL,KAAK,CAACgB,IAAN,CAAWb,CAAC,GAAID,CAAC,GAAGF,KAAK,CAACe,IAA1B,EAAiCX,GAApC,EAAwC;AACpC,yBAAO,EAAC,GAAGsB,MAAJ;AAAYtB,oBAAAA,GAAG,EAAE,CAACJ,KAAK,CAACgB,IAAN,CAAWb,CAAC,GAAID,CAAC,GAAGF,KAAK,CAACe,IAA1B,EAAiCX,GAAnD;AAAwDC,oBAAAA,IAAI,EAAE;AAA9D,mBAAP;AACH;;AAED,uBAAO,EAAC,GAAGqB,MAAJ;AAAYtB,kBAAAA,GAAG,EAAE,CAACJ,KAAK,CAACgB,IAAN,CAAWb,CAAC,GAAID,CAAC,GAAGF,KAAK,CAACe,IAA1B,EAAiCX,GAAnD;AAAwDC,kBAAAA,IAAI,EAAE;AAA9D,iBAAP;AACH;AACJ;;AACD,gBAAGqB,MAAM,CAACrB,IAAP,IAAe,OAAlB,EAA0B;AACtB,qBAAO,EAAC,GAAGqB,MAAJ;AAAYtB,gBAAAA,GAAG,EAAE,KAAjB;AAAwBC,gBAAAA,IAAI,EAAE;AAA9B,eAAP;AACH;;AAED,mBAAO,EAAC,GAAGqB;AAAJ,aAAP,CAfgC,CAgBhC;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACP,WAlCK;AAHS,SAAL,CAAN,CAAR;AAwCA;;AAEJ,WAAK,MAAL;AACIzB,QAAAA,QAAQ,CAACD,KAAK,KAAK,EACf,GAAGA,KADY;AAEf;AACAgB,UAAAA,IAAI,EAAEhB,KAAK,CAACgB,IAAN,CAAWS,GAAX,CAAe,CAACK,GAAD,EAAMC,CAAN,KAAY;AACzB,mBAAOD,GAAG,CAACL,GAAJ,CAAQ,CAACO,GAAD,EAAMC,CAAN,KAAY;AACvB,kBAAG9B,CAAC,KAAK4B,CAAN,IAAW7B,CAAC,KAAK+B,CAApB,EAAsB;AAClB;AACA,oBAAGD,GAAG,CAAC3B,IAAJ,KAAaL,KAAK,CAACM,QAAnB,IAA+B,CAAC0B,GAAG,CAAC3B,IAAvC,EAA4C;AACxC,sBAAGL,KAAK,CAACgB,IAAN,CAAWb,CAAX,EAAcD,CAAd,EAAiBE,GAApB,EAAwB;AACpB,2BAAO,EAAC,GAAG4B,GAAJ;AAAS5B,sBAAAA,GAAG,EAAE,CAACJ,KAAK,CAACgB,IAAN,CAAWb,CAAX,EAAcD,CAAd,EAAiBE,GAAhC;AAAqCC,sBAAAA,IAAI,EAAE;AAA3C,qBAAP;AACH;;AAED,yBAAO,EAAC,GAAG2B,GAAJ;AAAS5B,oBAAAA,GAAG,EAAE,CAACJ,KAAK,CAACgB,IAAN,CAAWb,CAAX,EAAcD,CAAd,EAAiBE,GAAhC;AAAqCC,oBAAAA,IAAI,EAAE;AAA3C,mBAAP;AACH;AACJ;;AAED,qBAAO,EAAC,GAAG2B;AAAJ,eAAP;AACH,aAbM,CAAP;AAcP,WAfK;AAHS,SAAL,CAAN,CAAR;AAqBA;;AAEJ,WAAK,KAAL;AACI/B,QAAAA,QAAQ,CAACD,KAAK,KAAK,EACf,GAAGA,KADY;AAEf;AACAgB,UAAAA,IAAI,EAAEhB,KAAK,CAACgB,IAAN,CAAWS,GAAX,CAAe,CAACK,GAAD,EAAMC,CAAN,KAAY;AACzB,mBAAOD,GAAG,CAACL,GAAJ,CAAQ,CAACO,GAAD,EAAMC,CAAN,KAAY;AACvB,kBAAG9B,CAAC,KAAK4B,CAAN,IAAW7B,CAAC,KAAK+B,CAApB,EAAsB;AAClB;AACA,oBAAGD,GAAG,CAAC3B,IAAJ,KAAaL,KAAK,CAACM,QAAnB,IAA+B,CAAC0B,GAAG,CAAC3B,IAAvC,EAA4C;AACxC,sBAAGL,KAAK,CAACgB,IAAN,CAAWb,CAAX,EAAcD,CAAd,EAAiBE,GAApB,EAAwB;AACpB,2BAAO,EAAC,GAAG4B,GAAJ;AAAS5B,sBAAAA,GAAG,EAAE,CAACJ,KAAK,CAACgB,IAAN,CAAWb,CAAX,EAAcD,CAAd,EAAiBE,GAAhC;AAAqCC,sBAAAA,IAAI,EAAE;AAA3C,qBAAP;AACH;;AAED,yBAAO,EAAC,GAAG2B,GAAJ;AAAS5B,oBAAAA,GAAG,EAAE,CAACJ,KAAK,CAACgB,IAAN,CAAWb,CAAX,EAAcD,CAAd,EAAiBE,GAAhC;AAAqCC,oBAAAA,IAAI,EAAE;AAA3C,mBAAP;AACH;AACJ;;AAED,qBAAO,EAAC,GAAG2B;AAAJ,eAAP;AACH,aAbM,CAAP;AAcP,WAfK;AAHS,SAAL,CAAN,CAAR;AAqBA;;AAEJ;AACI;AA7FR;;AAgGA;AACH,GAlGD;;AAmGAJ,EAAAA,OAAO,CAACC,GAAR,CAAY7B,KAAK,CAACe,IAAlB;AACA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKf,KAAK,CAACgB,IAAN,CACIkB,MADJ,CACW,CAACpB,IAAD,EAAOa,KAAP,KAAiBA,KAAK,GAAG3B,KAAK,CAACe,IAAd,KAAuB,CADnD,EAEIU,GAFJ,CAEQ,CAACK,GAAD,EAAMC,CAAN,KAAY;AACb,wBACI;AAAK,MAAA,SAAS,EAAC,UAAf;AAA0B,MAAA,GAAG,EAAEA,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC/B,KAAK,CAACgB,IAAN,CACIkB,MADJ,CACW,CAACnB,IAAD,EAAOY,KAAP,KAAiBA,KAAK,GAAG3B,KAAK,CAACe,IAAd,KAAuB,CADnD,EAEIU,GAFJ,CAEQ,CAACO,GAAD,EAAMC,CAAN,KAAY;AACb,0BACI;AAAK,QAAA,SAAS,EAAC,UAAf;AAA0B,QAAA,GAAG,EAAEF,CAAC,GAAIE,CAAC,GAAGjC,KAAK,CAACe,IAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKI,YAAY,CAACc,CAAD,EAAIF,CAAJ,EAAOC,GAAG,CAAC5B,GAAX,CADjB,CADJ;AAKH,KARJ,CADD,CADJ;AAaH,GAhBJ,CADL,eAmBI;AAAQ,IAAA,OAAO,EAAE,MAAMoB,cAAc,CAAC,OAAD,CAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAnBJ,eAoBI;AAAQ,IAAA,OAAO,EAAE,MAAMA,cAAc,CAAC,MAAD,CAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBApBJ,eAqBI;AAAQ,IAAA,OAAO,EAAE,MAAMA,cAAc,CAAC,KAAD,CAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBArBJ,CADJ;AAyBH;;AAED,SAASW,OAAT,GAAmB;AACf,QAAM,CAACf,aAAD,EAAgBgB,gBAAhB,IAAoCzC,QAAQ,CAAC;AAAEe,IAAAA,KAAK,EAAE2B,QAAQ,CAACC,eAAT,CAAyBC,WAAlC;AAA+C5B,IAAAA,MAAM,EAAE0B,QAAQ,CAACC,eAAT,CAAyBE;AAAhF,GAAD,CAAlD;AAEA5C,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAM6C,eAAe,GAAG,MAAM;AAC1BL,MAAAA,gBAAgB,CAAC;AACb1B,QAAAA,KAAK,EAAE2B,QAAQ,CAACC,eAAT,CAAyBC,WADnB;AAEb5B,QAAAA,MAAM,EAAE0B,QAAQ,CAACC,eAAT,CAAyBE;AAFpB,OAAD,CAAhB;AAIH,KALD;;AAOAE,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCF,eAAlC,EARY,CAUZ;;AAEA,WAAO,MAAM;AACTC,MAAAA,MAAM,CAACE,mBAAP,CAA2B,QAA3B,EAAqCH,eAArC;AACH,KAFD;AAGH,GAfQ,CAAT;AAiBA,sBACI;AAAK,IAAA,EAAE,EAAC,SAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AACI,IAAA,aAAa,EAAErB,aADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAOH;;AAED,eAAee,OAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Sandbox.css';\n\n//TODO: Runs a little slow, find a way to optimize (possibly using hooks)\nfunction Square(props) {\n    let downFlag = false;\n    const [state, setState] = useState({x: props.x, y: props.y, val: props.val, type: props.itemType});\n    useEffect(() => {\n        setState({\n            ...state,\n            val: props.val,\n            type: props.itemType\n        })\n    }, [props.val]);\n\n    // const handleMouseDown = () => {\n    //     // props.squareClick(state.x,state.y);\n\n    //     // document.addEventListener('mouseover', handler);\n\n    //     // document.addEventListener('mouseup', handler);\n    // }\n\n    const handler = (e, x=null, y=null) => {\n        if(e.type === \"mousedown\"){\n            downFlag = true;\n            // console.log(x,y);\n            props.squareClick(x,y);\n        }\n        \n        if(e.type === \"mouseover\"){\n            if(downFlag){\n                // console.log(x,y);\n                props.squareClick(x, y);\n            }\n        }\n\n        if(e.type === \"mouseup\"){\n            downFlag = false;\n        }\n    }\n\n    switch (state.type) {\n        case \"start\":\n            return (\n                <div style={{width: `${props.width}px`, height:`${props.height}px`, backgroundColor: props.val === true ? `green` : `white`}} className=\"square\" onMouseDown={(e) => handler(e,state.x,state.y)} onMouseUp={(e) => handler(e)} onMouseOver={(e) => handler(e,state.x,state.y)}></div>\n            )\n\n        case \"wall\":\n            return (\n                <div style={{width: `${props.width}px`, height:`${props.height}px`, backgroundColor: props.val === true ? `gray` : `white`}} className=\"square\" onMouseDown={(e) => handler(e,state.x,state.y)} onMouseUp={(e) => handler(e)} onMouseOver={(e) => handler(e,state.x,state.y)}></div>\n            )\n\n        case \"end\":\n            return (\n                <div style={{width: `${props.width}px`, height:`${props.height}px`, backgroundColor: props.val === true ? `red` : `white`}} className=\"square\" onMouseDown={(e) => handler(e,state.x,state.y)} onMouseUp={(e) => handler(e)} onMouseOver={(e) => handler(e,state.x,state.y)}></div>\n            )\n    \n        default:\n            break;\n    }\n}\n\nfunction Map(props) {\n    const [state, setState] = useState({\n        rows: 25, \n        cols:50, \n        grid: new Array(25*50).fill({val: false, type: null}),\n        itemType: \"start\"\n    })\n\n    const renderSquare = (x,y,val) => {\n        return (\n            <Square \n                width={(props.winDimensions.width / 50) / (50 / 25)}\n                //This keeps ratio of squares so that they are square, they become longer if height becomes longer than the width (Square width is twice as long as square height)\n                height={Math.min((props.winDimensions.height / 25), (props.winDimensions.width / 50) / (50 / 25))}\n                x={x}\n                y={y}\n                val={val}\n                squareClick={(x, y) => handleClick(x, y)}\n                itemType={state.itemType}\n            />\n        )\n    }\n\n    const switchItemType = (itemType) => {\n        setState({\n            ...state,\n            itemType: itemType,\n        })\n    }\n\n\n\n    const handleClick = (x,y) => {\n        switch (state.itemType) {\n            case \"start\":\n                setState(state => ({\n                    ...state,\n                    //state object is immutable so updates have to be done this way\n                    grid: state.grid.map((square, index) => {\n                            if(index === y + (x * state.cols)){\n                                console.log(x,y,square.type,state.itemType);\n                                if(square.type === state.itemType || !square.type){\n                                    if(state.grid[y + (x * state.cols)].val){\n                                        return {...square, val: !state.grid[y + (x * state.cols)].val, type: null}\n                                    }\n\n                                    return {...square, val: !state.grid[y + (x * state.cols)].val, type: \"start\"}\n                                }\n                            }\n                            if(square.type == \"start\"){\n                                return {...square, val: false, type: null}\n                            }\n\n                            return {...square}\n                            // return row.map((col, i) => {\n                            //     if(y === j && x === i){\n                            //         // console.log(x,y,col.type,state.itemType);\n                            //         if(col.type === state.itemType || !col.type){\n                            //             if(state.grid[y][x].val){\n                            //                 return {...col, val: !state.grid[y][x].val, type: null}\n                            //             }\n\n                            //             return {...col, val: !state.grid[y][x].val, type: \"start\"}\n                            //         }\n                            //     }\n                                \n                            //     if(col.type == \"start\"){\n                            //         return {...col, val: false, type: null}\n                            //     }\n\n                            //     return {...col}\n                            // })\n                    })\n                }));\n                \n                break;\n\n            case \"wall\":\n                setState(state => ({\n                    ...state,\n                    //state object is immutable so updates have to be done this way\n                    grid: state.grid.map((row, j) => {\n                            return row.map((col, i) => {\n                                if(y === j && x === i){\n                                    // console.log(x,y,col.type,state.itemType);\n                                    if(col.type === state.itemType || !col.type){\n                                        if(state.grid[y][x].val){\n                                            return {...col, val: !state.grid[y][x].val, type: null}\n                                        }\n\n                                        return {...col, val: !state.grid[y][x].val, type: \"wall\"}\n                                    }\n                                }\n        \n                                return {...col}\n                            })\n                    })\n                }));\n\n                break;\n\n            case \"end\":\n                setState(state => ({\n                    ...state,\n                    //state object is immutable so updates have to be done this way\n                    grid: state.grid.map((row, j) => {\n                            return row.map((col, i) => {\n                                if(y === j && x === i){\n                                    // console.log(x,y,col.type,state.itemType);\n                                    if(col.type === state.itemType || !col.type){\n                                        if(state.grid[y][x].val){\n                                            return {...col, val: !state.grid[y][x].val, type: null}\n                                        }\n\n                                        return {...col, val: !state.grid[y][x].val, type: \"end\"}\n                                    }\n                                }\n        \n                                return {...col}\n                            })\n                    })\n                }));\n\n                break;\n        \n            default:\n                break;\n        }\n\n        return;\n    }\n    console.log(state.cols)\n    return (\n        <div className=\"map\">\n            {state.grid\n                .filter((rows, index) => index % state.cols === 0)\n                .map((row, j) => {\n                    return(\n                        <div className=\"grid-row\" key={j}>\n                        {state.grid\n                            .filter((cols, index) => index % state.cols !== 0)\n                            .map((col, i) => {\n                                return(\n                                    <div className=\"grid-col\" key={j + (i * state.cols)}>\n                                        {renderSquare(i, j, col.val)}\n                                    </div> \n                                )\n                            })}\n                        </div>\n                    )\n                })\n            }\n            <button onClick={() => switchItemType(\"start\")}>Start Item</button>\n            <button onClick={() => switchItemType(\"wall\")}>Wall Item</button>\n            <button onClick={() => switchItemType(\"end\")}>End Item</button>\n        </div>\n    )\n}\n\nfunction Sandbox() {\n    const [winDimensions, setWinDimensions] = useState({ width: document.documentElement.clientWidth, height: document.documentElement.clientHeight });\n\n    useEffect(() => {\n        const handleWinResize = () => {\n            setWinDimensions({\n                width: document.documentElement.clientWidth,\n                height: document.documentElement.clientHeight\n            })\n        }\n\n        window.addEventListener('resize', handleWinResize);\n\n        // console.log(\"Window has been resized: \", winDimensions.width, winDimensions.height);\n\n        return () => {\n            window.removeEventListener('resize', handleWinResize);\n        };\n    })\n\n    return (\n        <div id=\"sandbox\">\n            <Map \n                winDimensions={winDimensions}\n            />\n        </div>\n    );\n}\n\nexport default Sandbox;"]},"metadata":{},"sourceType":"module"}