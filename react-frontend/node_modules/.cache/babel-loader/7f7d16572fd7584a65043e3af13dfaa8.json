{"ast":null,"code":"import FibonacciHeapNode from '../Algorithms/FibonacciHeapNode';\nimport FibonacciHeap from '../Algorithms/FibonacciHeap';\n\nfunction getIndex(x, y, cols) {\n  return x + y * cols;\n}\n\nfunction dist(startPoint, endPoint) {\n  //TODO make this a switch for the different types of heuristic functions\n  const distance = Math.sqrt(Math.pow(endPoint.x - startPoint.x, 2) + Math.pow(endPoint.y - startPoint.y, 2));\n  return distance;\n}\n\nfunction getPoints(gridMap) {\n  let startPoint = null;\n  let endPoints = [];\n  gridMap.map(square => {\n    if (square.val && square.type === \"start\") {\n      // console.log(square);\n      startPoint = square;\n      return null;\n    }\n\n    if (square.val && square.type === \"end\") {\n      // console.log(square);\n      endPoints.push(square);\n      return null;\n    }\n\n    return null;\n  });\n  return [startPoint, endPoints];\n}\n\nfunction getNeighbors(current, gridMap, rows, cols, gScore, points) {\n  //Point                                 Index\n  // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n  // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n  // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n  // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n  // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n  // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n  // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n  // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n  const neighbors = new Array(8);\n\n  if (current.point.x > 0) {\n    const left = getIndex(current.point.x - 1, current.point.y, cols);\n\n    if (gridMap[left].type !== \"wall\" && gridMap[left].type !== \"start\") {\n      neighbors[0] = points[gScore[left]];\n    }\n  }\n\n  if (current.point.x < cols - 1) {\n    const right = getIndex(current.point.x + 1, current.point.y, cols);\n\n    if (gridMap[right].type !== \"wall\" && gridMap[right].type !== \"start\") {\n      neighbors[1] = points[gScore[right]];\n    }\n  }\n\n  if (current.point.y > 0) {\n    const up = getIndex(current.point.x, current.point.y - 1, cols);\n\n    if (gridMap[up].type !== \"wall\" && gridMap[up].type !== \"start\") {\n      neighbors[2] = points[gScore[up]];\n    }\n  }\n\n  if (current.point.y < rows - 1) {\n    const down = getIndex(current.point.x, current.point.y + 1, cols);\n\n    if (gridMap[down].type !== \"wall\" && gridMap[down].type !== \"start\") {\n      neighbors[3] = points[gScore[down]];\n    }\n  }\n\n  if (current.point.x > 0 && current.point.y > 0) {\n    const topLeft = getIndex(current.point.x - 1, current.point.y - 1, cols);\n\n    if (gridMap[topLeft].type !== \"wall\" && gridMap[topLeft].type !== \"start\") {\n      neighbors[4] = points[gScore[topLeft]];\n    }\n  }\n\n  if (current.point.x < cols - 1 && current.point.y > 0) {\n    const topRight = getIndex(current.point.x + 1, current.point.y - 1, cols);\n\n    if (gridMap[topRight].type !== \"wall\" && gridMap[topRight].type !== \"start\") {\n      neighbors[5] = points[gScore[topRight]];\n    }\n  }\n\n  if (current.point.x > 0 && current.point.y < rows - 1) {\n    const bottomLeft = getIndex(current.point.x - 1, current.point.y + 1, cols);\n\n    if (gridMap[bottomLeft].type !== \"wall\" && gridMap[bottomLeft].type !== \"start\") {\n      neighbors[6] = points[gScore[bottomLeft]];\n    }\n  }\n\n  if (current.point.x < cols - 1 && current.point.y < rows - 1) {\n    const bottomRight = getIndex(current.point.x + 1, current.point.y + 1, cols);\n\n    if (gridMap[bottomRight].type !== \"wall\" && gridMap[bottomRight].type !== \"start\") {\n      neighbors[7] = points[gScore[bottomRight]];\n    }\n  }\n\n  return neighbors;\n}\n\nfunction Dijkstra(rows, cols, gridMap, memState, setState) {\n  const [startPoint, endPoints] = getPoints(gridMap);\n  const queue = new FibonacciHeap();\n  const points = {};\n  const cameFrom = {};\n  const gScore = {};\n  const states = []; //TODO: Bug, clears grid but then returns it to its previous state\n\n  const newState = { ...memState,\n    grid: new Array(rows * cols).fill({\n      val: false,\n      type: null\n    }).map((square, i) => {\n      return { ...square,\n        x: i % cols,\n        y: Math.abs((i - i % cols) / cols)\n      };\n    })\n  };\n  states.push(newState);\n  let goal = endPoints[0];\n\n  if (!startPoint || !endPoints) {\n    console.log(\"Map must have a start point, and an end point\");\n    return \"Map must have a start point, and an end point\";\n  }\n\n  gScore[getIndex(startPoint.x, startPoint.y, cols)] = 0;\n  cameFrom[getIndex(startPoint.x, startPoint.y, cols)] = null;\n  gridMap.map((square, index) => {\n    if (getIndex(startPoint.x, startPoint.y, cols) !== index) {\n      gScore[index] = Number.POSITIVE_INFINITY;\n      cameFrom[index] = null;\n    }\n\n    if (points[gScore[index]] == null) {\n      points[gScore[index]] = [];\n    }\n\n    ;\n    const node = new FibonacciHeapNode(gScore[index]);\n    points[gScore[index]].push({\n      point: square,\n      node: node\n    });\n    queue.insert(node);\n    return null;\n  });\n\n  while (queue.getRootList().length > 0) {\n    console.log(points);\n    const current = points[queue.peek().getVal()][points[queue.peek().getVal()].length - 1];\n    queue.extractMin();\n    points[gScore[getIndex(current.point.x, current.point.y, cols)]].pop();\n    console.log(Array.from(queue.getRootList()));\n    const newState = { ...memState,\n      grid: memState.grid.map((square, index) => {\n        if (current.point.x === square.x && current.point.y === square.y) {\n          if (current.point.type !== \"start\" && current.point.type !== \"end\") {\n            memState.grid[index] = { ...memState.grid[index],\n              val: true,\n              type: \"neighbors\"\n            };\n          }\n\n          return { ...square\n          };\n        }\n\n        return { ...square\n        };\n      })\n    };\n    states.push(newState);\n\n    if (current.point.x === goal.x && current.point.y === goal.y) {\n      const state = states[states.length - 1];\n      setState({ // return {\n        ...state,\n        //state object is immutable so updates have to be done this way\n        grid: state.grid.map((square, index) => {\n          if (cameFrom[index]) {\n            if (square.type === \"end\") {\n              let prev = cameFrom[index];\n\n              while (prev) {\n                if (prev.type !== \"start\" && prev.type !== \"end\") {\n                  state.grid[getIndex(prev.x, prev.y, state.cols)] = { ...state.grid[getIndex(prev.x, prev.y, state.cols)],\n                    val: true,\n                    type: \"path\"\n                  };\n                }\n\n                prev = cameFrom[getIndex(prev.x, prev.y, state.cols)];\n              }\n\n              return { ...square\n              };\n            }\n\n            return { ...square\n            };\n          }\n\n          return { ...square\n          };\n        })\n      });\n      console.log(\"PATH FOUND!!!!!\");\n      return states;\n    }\n\n    const neighbors = getNeighbors(current, gridMap, rows, cols, points);\n    console.log(neighbors); // neighbors.map((neighbor) => {\n    //     // console.log(neighbor);\n    //     // console.log((gScore[getIndex(current.point.x, current.point.y, cols)] + dist(current, neighbor)) + heuristic(neighbor, goal));\n    //     // console.log(\"neighbor\", neighbor);\n    //     const currentPathGScore = gScore[getIndex(current.point.x, current.point.y, cols)] + dist(current, neighbor);\n    //     if(currentPathGScore < gScore[getIndex(neighbor.x, neighbor.y, cols)] || !gScore[getIndex(neighbor.x, neighbor.y, cols)]){\n    //         cameFrom[getIndex(neighbor.x, neighbor.y, cols)] = current;\n    //         //Removing from array of inifinites in gScore table\n    //         if(gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)] === Number.POSITIVE_INFINITY){\n    //             points[gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)]].pop();\n    //         }\n    //         gScore[getIndex(neighbor.x, neighbor.y, cols)] = currentPathGScore;\n    //         if(points[gScore[getIndex(neighbor.x, neighbor.y, cols)]] == null){\n    //             points[gScore[getIndex(neighbor.x, neighbor.y, cols)]] = [];\n    //         }\n    //         points[gScore[getIndex(neighbor.x, neighbor.y, cols)]].push(neighbor);\n    //         //TODO: figure out how to do this in constant time\n    //         queue.decreaseKey(current.node, currentPathGScore);\n    //         return null;\n    //     }\n    //     return null;\n    // })\n  }\n}\n\nexport default Dijkstra;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Algorithms/Dijkstra.js"],"names":["FibonacciHeapNode","FibonacciHeap","getIndex","x","y","cols","dist","startPoint","endPoint","distance","Math","sqrt","pow","getPoints","gridMap","endPoints","map","square","val","type","push","getNeighbors","current","rows","gScore","points","neighbors","Array","point","left","right","up","down","topLeft","topRight","bottomLeft","bottomRight","Dijkstra","memState","setState","queue","cameFrom","states","newState","grid","fill","i","abs","goal","console","log","index","Number","POSITIVE_INFINITY","node","insert","getRootList","length","peek","getVal","extractMin","pop","from","state","prev"],"mappings":"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","sourcesContent":["import FibonacciHeapNode from '../Algorithms/FibonacciHeapNode';\nimport FibonacciHeap from '../Algorithms/FibonacciHeap';\n\nfunction getIndex(x, y, cols){\n    return (x + (y * cols));\n}\n\nfunction dist(startPoint, endPoint){\n    //TODO make this a switch for the different types of heuristic functions\n    const distance = Math.sqrt(Math.pow((endPoint.x-startPoint.x), 2) + Math.pow((endPoint.y-startPoint.y), 2));     \n    return distance;\n}\n\nfunction getPoints(gridMap){\n    let startPoint = null;\n    let endPoints = [];\n    \n    gridMap.map((square) => {\n        if(square.val && square.type ===  \"start\"){\n            // console.log(square);\n            startPoint = square;\n\n            return null;\n        }\n\n        if(square.val && square.type === \"end\"){\n            // console.log(square);\n            endPoints.push(square);\n\n            return null;\n        }\n\n        return null;\n    })\n\n    return [startPoint, endPoints];\n}\n\nfunction getNeighbors(current, gridMap, rows, cols, gScore, points){\n    //Point                                 Index\n    // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n    // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n    // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n    // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n    // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n    // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n    // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n    // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n\n    const neighbors = new Array(8);\n\n    if(current.point.x > 0){\n        const left = getIndex((current.point.x-1), (current.point.y), cols);\n\n        if(gridMap[left].type !== \"wall\" && gridMap[left].type !== \"start\"){\n            neighbors[0] = points[gScore[left]];\n        }\n    }\n    if(current.point.x < cols-1){\n        const right = getIndex((current.point.x+1), (current.point.y), cols);\n\n        if(gridMap[right].type !== \"wall\" && gridMap[right].type !== \"start\"){\n            neighbors[1] = points[gScore[right]];\n        }\n    }\n    if(current.point.y > 0){\n        const up = getIndex((current.point.x), (current.point.y-1), cols);\n\n        if(gridMap[up].type !== \"wall\" && gridMap[up].type !== \"start\"){\n            neighbors[2] = points[gScore[up]];\n        }\n    }\n    if(current.point.y < rows-1){\n        const down = getIndex((current.point.x), (current.point.y+1), cols);\n\n        if(gridMap[down].type !== \"wall\" && gridMap[down].type !== \"start\"){\n            neighbors[3] = points[gScore[down]];\n        }\n    }\n    if(current.point.x > 0 && current.point.y > 0){\n        const topLeft = getIndex((current.point.x-1), (current.point.y-1), cols);\n\n        if(gridMap[topLeft].type !== \"wall\" && gridMap[topLeft].type !== \"start\"){\n            neighbors[4] = points[gScore[topLeft]];\n        }\n    }\n    if(current.point.x < cols-1 && current.point.y > 0){\n        const topRight = getIndex((current.point.x+1), (current.point.y-1), cols);\n\n        if(gridMap[topRight].type !== \"wall\" && gridMap[topRight].type !== \"start\"){\n            neighbors[5] = points[gScore[topRight]];\n        }\n    }\n    if(current.point.x > 0 && current.point.y < rows-1){\n        const bottomLeft  = getIndex((current.point.x-1), (current.point.y+1), cols);\n\n        if(gridMap[bottomLeft].type !== \"wall\" && gridMap[bottomLeft].type !== \"start\"){\n            neighbors[6] = points[gScore[bottomLeft]];\n        }\n    }\n    if(current.point.x < cols-1 && current.point.y < rows-1){\n        const bottomRight = getIndex((current.point.x+1), (current.point.y+1), cols);\n\n        if(gridMap[bottomRight].type !== \"wall\" && gridMap[bottomRight].type !== \"start\"){\n            neighbors[7] = points[gScore[bottomRight]];\n        }\n    }\n\n    return neighbors;\n}\n\nfunction Dijkstra(rows, cols, gridMap, memState, setState){\n    const [startPoint, endPoints] = getPoints(gridMap);\n    const queue = new FibonacciHeap();\n    const points = {};\n    const cameFrom = {};\n    const gScore = {};\n    const states = [];\n\n    //TODO: Bug, clears grid but then returns it to its previous state\n    const newState = {\n        ...memState,\n        grid: new Array(rows*cols).fill({val: false, type: null}).map((square, i) => {\n            return {\n                ...square,\n                x: i % cols,\n                y: Math.abs((i - (i % cols)) / cols)\n            }\n        })\n    }\n    states.push(newState);\n\n    let goal = endPoints[0];\n\n    if(!startPoint || !endPoints){\n        console.log(\"Map must have a start point, and an end point\");\n        return \"Map must have a start point, and an end point\"; \n    }\n\n    gScore[getIndex(startPoint.x, startPoint.y, cols)] = 0;\n    cameFrom[getIndex(startPoint.x, startPoint.y, cols)] = null;\n\n    gridMap.map((square, index) => {\n        if(getIndex(startPoint.x, startPoint.y, cols) !== index){\n            gScore[index] = Number.POSITIVE_INFINITY;\n            cameFrom[index] = null\n        }\n\n        if(points[gScore[index]] == null){\n            points[gScore[index]] = [];\n        };\n\n        const node = new FibonacciHeapNode(gScore[index])\n        points[gScore[index]].push({point: square, node: node});\n        queue.insert(node);\n\n        return null;\n    });\n\n    while(queue.getRootList().length > 0){\n        console.log(points);\n        const current = points[queue.peek().getVal()][points[queue.peek().getVal()].length-1];\n\n        queue.extractMin();\n        points[gScore[getIndex(current.point.x, current.point.y, cols)]].pop();\n\n        console.log(Array.from(queue.getRootList()))\n\n        const newState = {\n            ...memState,\n            grid: memState.grid.map((square, index) => {\n                if(current.point.x === square.x && current.point.y === square.y){\n                    if(current.point.type !== \"start\" && current.point.type !== \"end\"){\n                        memState.grid[index] = {\n                            ...memState.grid[index],\n                            val: true,\n                            type: \"neighbors\"\n                        }\n                    }\n                    return {...square}\n                }\n                return {...square}\n            })\n        }\n        states.push(newState);\n\n        if(current.point.x === goal.x && current.point.y === goal.y){\n            const state = states[states.length-1];\n            setState({\n                // return {\n                ...state,\n                //state object is immutable so updates have to be done this way\n                grid: state.grid.map((square, index) => {\n                    if(cameFrom[index]){\n                        if(square.type === \"end\"){\n                            let prev = cameFrom[index];\n                \n                            while(prev){                   \n                                if(prev.type !== \"start\" && prev.type !== \"end\"){\n                                    state.grid[getIndex(prev.x,prev.y,state.cols)] = {\n                                        ...state.grid[getIndex(prev.x,prev.y,state.cols)],\n                                        val: true,\n                                        type: \"path\"\n                                    }\n                                }\n                                prev = cameFrom[getIndex(prev.x,prev.y,state.cols)];\n                            }\n                            return {...square};\n                        }\n                        return {...square};\n                    }\n                    return {...square};\n                })\n            \n            });\n\n            console.log(\"PATH FOUND!!!!!\");\n            return states;\n        }\n\n        const neighbors = getNeighbors(current, gridMap, rows, cols, points);\n        console.log(neighbors);\n        // neighbors.map((neighbor) => {\n        //     // console.log(neighbor);\n        //     // console.log((gScore[getIndex(current.point.x, current.point.y, cols)] + dist(current, neighbor)) + heuristic(neighbor, goal));\n        //     // console.log(\"neighbor\", neighbor);\n        //     const currentPathGScore = gScore[getIndex(current.point.x, current.point.y, cols)] + dist(current, neighbor);\n\n        //     if(currentPathGScore < gScore[getIndex(neighbor.x, neighbor.y, cols)] || !gScore[getIndex(neighbor.x, neighbor.y, cols)]){\n        //         cameFrom[getIndex(neighbor.x, neighbor.y, cols)] = current;\n\n        //         //Removing from array of inifinites in gScore table\n        //         if(gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)] === Number.POSITIVE_INFINITY){\n        //             points[gScore[getIndex(neighbor.point.x, neighbor.point.y, cols)]].pop();\n        //         }\n\n        //         gScore[getIndex(neighbor.x, neighbor.y, cols)] = currentPathGScore;\n                \n        //         if(points[gScore[getIndex(neighbor.x, neighbor.y, cols)]] == null){\n        //             points[gScore[getIndex(neighbor.x, neighbor.y, cols)]] = [];\n        //         }\n                \n        //         points[gScore[getIndex(neighbor.x, neighbor.y, cols)]].push(neighbor);\n\n                \n\n        //         //TODO: figure out how to do this in constant time\n        //         queue.decreaseKey(current.node, currentPathGScore);\n                \n        //         return null;\n        //     }\n        //     return null;\n        // })\n    }\n}\n\nexport default Dijkstra;"]},"metadata":{},"sourceType":"module"}