{"ast":null,"code":"var _jsxFileName = \"/home/menekou/projects/react/shortest-path/react-frontend/src/Routes.js\";\nimport React, { useState, useMemo, useEffect } from \"react\";\nimport axios from \"axios\";\nimport apolloClient from './ApolloConfig';\nimport LoginPage from './Login Page/LoginPage';\nimport Home from './Home/Home';\nimport Account from \"./Account/Account\";\nimport App from './App/App';\nimport TenPaths from './TenPaths/TenPaths';\nimport Sandbox from './Sandbox/Sandbox';\nimport Multiplayer from './Multiplayer/Multiplayer';\nimport { ApolloProvider } from '@apollo/client';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\nimport UserContext from './UserContext';\nimport RouteGuard from './RouteGuard';\nimport TopNav from \"./TopNav/TopNav\"; //Using containers so top nav is not rendered on login page\n\nconst LoginContainer = ({\n  user,\n  logout,\n  updateUser,\n  ...props\n}) => {\n  console.log(location);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    path: \"/login\",\n    component: LoginPage,\n    user: user,\n    logout: logout,\n    updateUser: updateUser,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }\n  }));\n};\n\nconst DefaultContainer = ({\n  user,\n  logout\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TopNav, {\n    logout: logout,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Redirect, {\n    to: \"/home\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 42\n    }\n  })), /*#__PURE__*/React.createElement(RouteGuard, {\n    path: \"/app\",\n    component: App,\n    user: user,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(RouteGuard, {\n    path: \"/home\",\n    component: Home,\n    user: user,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(RouteGuard, {\n    path: \"/account\",\n    component: Account,\n    user: user,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(RouteGuard, {\n    path: \"/tenpaths\",\n    component: TenPaths,\n    user: user,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(RouteGuard, {\n    path: \"/sandbox\",\n    component: Sandbox,\n    user: user,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(RouteGuard, {\n    path: \"/multiplayer\",\n    component: Multiplayer,\n    user: user,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }));\n}; //Update user\n\n\nconst updateUser = (userData, setUser) => {\n  if (!userData || !userData.accessToken || !userData.response_type || userData.response_type !== \"Success\") {\n    setUser(null);\n    return;\n  }\n\n  setUser({\n    username: userData.username,\n    role: userData.role,\n    accessToken: userData.accessToken\n  });\n  return;\n}; //Log user out\n\n\nconst logout = setUser => {\n  axios.get(\"http://localhost:3000/deleteRefreshToken\").then(response => {\n    updateUser(response.data, setUser);\n    return;\n  }).catch(error => {\n    console.log(error.data);\n    updateUser(error.data, setUser);\n    return;\n  });\n};\n\nfunction Routes() {\n  //Stores user data if user is logged in and null if user isn't logged in\n  const [user, setUser] = useState();\n  console.log(user); //Adds headers to every axios request(requests)\n\n  axios.interceptors.request.use(function (request) {\n    request.headers[\"Content-Type\"] = 'application/json; charset=utf-8';\n    request.headers[\"Accept\"] = 'application/json';\n    request.headers[\"authorization\"] = user ? `Bearer ${user.accessToken}` : \"\";\n    request.withCredentials = true;\n    return request;\n  }, function (error) {\n    return Promise.reject(error);\n  }); //will only recompute the memoized value when one of the dependencies has changed\n\n  const value = useMemo(() => [user, setUser], [user, setUser]); //To make sure tokenRefresh attempt is only made once.\n\n  useEffect(() => {\n    axios.get(\"http://localhost:3000/refreshToken\").then(response => {\n      // console.log(response.data);\n      updateUser(response.data, setUser);\n      return;\n    }).catch(error => {\n      console.log(error);\n      logout(setUser);\n      return;\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(Router, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(UserContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ApolloProvider, {\n    client: apolloClient,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/login\",\n    render: props => /*#__PURE__*/React.createElement(LoginContainer, {\n      user: user,\n      logout: logout,\n      updateUser: updateUser,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 33\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    render: props => /*#__PURE__*/React.createElement(DefaultContainer, {\n      user: user,\n      logout: logout,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 33\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 25\n    }\n  })))));\n}\n\n;\nexport default Routes;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Routes.js"],"names":["React","useState","useMemo","useEffect","axios","apolloClient","LoginPage","Home","Account","App","TenPaths","Sandbox","Multiplayer","ApolloProvider","BrowserRouter","Router","Switch","Route","Redirect","UserContext","RouteGuard","TopNav","LoginContainer","user","logout","updateUser","props","console","log","location","DefaultContainer","userData","setUser","accessToken","response_type","username","role","get","then","response","data","catch","error","Routes","interceptors","request","use","headers","withCredentials","Promise","reject","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,OAA1B,EAAmCC,SAAnC,QAAoD,OAApD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,GAAP,MAAgB,WAAhB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,SAASC,cAAT,QAA+B,gBAA/B;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,MAAlC,EAA0CC,KAA1C,EAAiDC,QAAjD,QAAiE,kBAAjE;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,MAAP,MAAmB,iBAAnB,C,CAEA;;AACA,MAAMC,cAAc,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAOC,EAAAA,MAAP;AAAeC,EAAAA,UAAf;AAA2B,KAAGC;AAA9B,CAAD,KAA0C;AAC7DC,EAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ;AACA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,KAAD;AACI,IAAA,IAAI,EAAC,QADT;AAEI,IAAA,SAAS,EAAEvB,SAFf;AAGI,IAAA,IAAI,EAAEiB,IAHV;AAII,IAAA,MAAM,EAAEC,MAJZ;AAKI,IAAA,UAAU,EAAEC,UALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAWH,CAbD;;AAeA,MAAMK,gBAAgB,GAAG,CAAC;AAACP,EAAAA,IAAD;AAAOC,EAAAA;AAAP,CAAD,KAAoB;AACzC,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD;AACI,IAAA,MAAM,EAAEA,MADZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAII,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAE,IAAd;AAAoB,IAAA,IAAI,EAAC,GAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA6B,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA7B,CAJJ,eAKI,oBAAC,UAAD;AACI,IAAA,IAAI,EAAC,MADT;AAEI,IAAA,SAAS,EAAEf,GAFf;AAGI,IAAA,IAAI,EAAEc,IAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,eAUI,oBAAC,UAAD;AACI,IAAA,IAAI,EAAC,OADT;AAEI,IAAA,SAAS,EAAEhB,IAFf;AAGI,IAAA,IAAI,EAAEgB,IAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVJ,eAeI,oBAAC,UAAD;AACI,IAAA,IAAI,EAAC,UADT;AAEI,IAAA,SAAS,EAAEf,OAFf;AAGI,IAAA,IAAI,EAAEe,IAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfJ,eAoBI,oBAAC,UAAD;AACI,IAAA,IAAI,EAAC,WADT;AAEI,IAAA,SAAS,EAAEb,QAFf;AAGI,IAAA,IAAI,EAAEa,IAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IApBJ,eAyBI,oBAAC,UAAD;AACI,IAAA,IAAI,EAAC,UADT;AAEI,IAAA,SAAS,EAAEZ,OAFf;AAGI,IAAA,IAAI,EAAEY,IAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAzBJ,eA8BI,oBAAC,UAAD;AACI,IAAA,IAAI,EAAC,cADT;AAEI,IAAA,SAAS,EAAEX,WAFf;AAGI,IAAA,IAAI,EAAEW,IAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA9BJ,CADJ;AAsCH,CAvCD,C,CAyCA;;;AACA,MAAME,UAAU,GAAG,CAACM,QAAD,EAAWC,OAAX,KAAuB;AACtC,MAAG,CAACD,QAAD,IAAa,CAACA,QAAQ,CAACE,WAAvB,IAAsC,CAACF,QAAQ,CAACG,aAAhD,IAAiEH,QAAQ,CAACG,aAAT,KAA2B,SAA/F,EAAyG;AACrGF,IAAAA,OAAO,CAAC,IAAD,CAAP;AAEA;AACH;;AAEDA,EAAAA,OAAO,CAAC;AACNG,IAAAA,QAAQ,EAAEJ,QAAQ,CAACI,QADb;AAENC,IAAAA,IAAI,EAAEL,QAAQ,CAACK,IAFT;AAGNH,IAAAA,WAAW,EAAEF,QAAQ,CAACE;AAHhB,GAAD,CAAP;AAMA;AACH,CAdD,C,CAgBA;;;AACA,MAAMT,MAAM,GAAIQ,OAAD,IAAa;AACxB5B,EAAAA,KAAK,CAACiC,GAAN,CAAU,0CAAV,EACKC,IADL,CACWC,QAAD,IAAc;AAChBd,IAAAA,UAAU,CAACc,QAAQ,CAACC,IAAV,EAAgBR,OAAhB,CAAV;AAEA;AACH,GALL,EAMKS,KANL,CAMYC,KAAD,IAAW;AACdf,IAAAA,OAAO,CAACC,GAAR,CAAYc,KAAK,CAACF,IAAlB;AACAf,IAAAA,UAAU,CAACiB,KAAK,CAACF,IAAP,EAAaR,OAAb,CAAV;AAEA;AACH,GAXL;AAYH,CAbD;;AAeA,SAASW,MAAT,GAAkB;AACd;AACA,QAAM,CAACpB,IAAD,EAAOS,OAAP,IAAkB/B,QAAQ,EAAhC;AAEA0B,EAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ,EAJc,CAMd;;AACAnB,EAAAA,KAAK,CAACwC,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACI,UAASD,OAAT,EAAkB;AACdA,IAAAA,OAAO,CAACE,OAAR,CAAgB,cAAhB,IAAkC,iCAAlC;AACAF,IAAAA,OAAO,CAACE,OAAR,CAAgB,QAAhB,IAA4B,kBAA5B;AACAF,IAAAA,OAAO,CAACE,OAAR,CAAgB,eAAhB,IAAmCxB,IAAI,GAAI,UAASA,IAAI,CAACU,WAAY,EAA9B,GAAkC,EAAzE;AACAY,IAAAA,OAAO,CAACG,eAAR,GAA0B,IAA1B;AACA,WAAOH,OAAP;AACH,GAPL,EAQI,UAASH,KAAT,EAAgB;AACZ,WAAOO,OAAO,CAACC,MAAR,CAAeR,KAAf,CAAP;AACH,GAVL,EAPc,CAoBd;;AACA,QAAMS,KAAK,GAAGjD,OAAO,CAAC,MAAO,CAACqB,IAAD,EAAOS,OAAP,CAAR,EAA0B,CAACT,IAAD,EAAOS,OAAP,CAA1B,CAArB,CArBc,CAuBd;;AACA7B,EAAAA,SAAS,CAAC,MAAM;AACZC,IAAAA,KAAK,CAACiC,GAAN,CAAU,oCAAV,EACKC,IADL,CACWC,QAAD,IAAc;AAChB;AACAd,MAAAA,UAAU,CAACc,QAAQ,CAACC,IAAV,EAAgBR,OAAhB,CAAV;AAEA;AACH,KANL,EAOKS,KAPL,CAOYC,KAAD,IAAW;AACdf,MAAAA,OAAO,CAACC,GAAR,CAAYc,KAAZ;AAEAlB,MAAAA,MAAM,CAACQ,OAAD,CAAN;AAEA;AACH,KAbL;AAcH,GAfQ,EAeN,EAfM,CAAT;AAiBA,sBACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEmB,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,cAAD;AAAgB,IAAA,MAAM,EAAE9C,YAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEI,oBAAC,KAAD;AACI,IAAA,KAAK,MADT;AAEI,IAAA,IAAI,EAAC,QAFT;AAGI,IAAA,MAAM,EAAGqB,KAAD,iBACJ,oBAAC,cAAD;AACI,MAAA,IAAI,EAAEH,IADV;AAEI,MAAA,MAAM,EAAEC,MAFZ;AAGI,MAAA,UAAU,EAAEC,UAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,eAaI,oBAAC,KAAD;AACI,IAAA,MAAM,EAAGC,KAAD,iBACJ,oBAAC,gBAAD;AACI,MAAA,IAAI,EAAEH,IADV;AAEI,MAAA,MAAM,EAAEC,MAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbJ,CADJ,CADJ,CADJ,CADJ;AA8BH;;AAAA;AACD,eAAemB,MAAf","sourcesContent":["import React, { useState, useMemo, useEffect } from \"react\";\nimport axios from \"axios\";\nimport apolloClient from './ApolloConfig'\nimport LoginPage from './Login Page/LoginPage';\nimport Home from './Home/Home';\nimport Account from \"./Account/Account\";\nimport App from './App/App';\nimport TenPaths from './TenPaths/TenPaths';\nimport Sandbox from './Sandbox/Sandbox';\nimport Multiplayer from './Multiplayer/Multiplayer';\nimport { ApolloProvider } from '@apollo/client';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\nimport UserContext from './UserContext';\nimport RouteGuard from './RouteGuard';\nimport TopNav from \"./TopNav/TopNav\";\n\n//Using containers so top nav is not rendered on login page\nconst LoginContainer = ({user, logout, updateUser, ...props}) => {\n    console.log(location)\n    return(\n        <div>\n            <Route\n                path=\"/login\" \n                component={LoginPage}\n                user={user}\n                logout={logout}\n                updateUser={updateUser}               \n            />\n        </div>\n    )\n}\n\nconst DefaultContainer = ({user, logout}) => {\n    return(\n        <div>\n            <TopNav \n                logout={logout}\n            />\n            <Route exact={true} path=\"/\"><Redirect to=\"/home\"/></Route>\n            <RouteGuard \n                path='/app' \n                component={App} \n                user={user}\n            />\n            <RouteGuard \n                path='/home' \n                component={Home} \n                user={user}\n            />\n            <RouteGuard \n                path='/account' \n                component={Account} \n                user={user}\n            />\n            <RouteGuard \n                path='/tenpaths' \n                component={TenPaths} \n                user={user}\n            />\n            <RouteGuard \n                path='/sandbox' \n                component={Sandbox} \n                user={user}\n            />\n            <RouteGuard \n                path='/multiplayer' \n                component={Multiplayer} \n                user={user}\n            />\n        </div>\n    )\n}\n\n//Update user\nconst updateUser = (userData, setUser) => {\n    if(!userData || !userData.accessToken || !userData.response_type || userData.response_type !== \"Success\"){\n        setUser(null);\n\n        return;\n    }\n\n    setUser({\n      username: userData.username,\n      role: userData.role,\n      accessToken: userData.accessToken\n    })\n\n    return;\n}\n\n//Log user out\nconst logout = (setUser) => {\n    axios.get(\"http://localhost:3000/deleteRefreshToken\")\n        .then((response) => {\n            updateUser(response.data, setUser);\n\n            return;\n        })\n        .catch((error) => {\n            console.log(error.data);\n            updateUser(error.data, setUser);\n\n            return;\n        });\n}\n\nfunction Routes() {\n    //Stores user data if user is logged in and null if user isn't logged in\n    const [user, setUser] = useState();\n\n    console.log(user);\n\n    //Adds headers to every axios request(requests)\n    axios.interceptors.request.use(\n        function(request) {\n            request.headers[\"Content-Type\"] = 'application/json; charset=utf-8';\n            request.headers[\"Accept\"] = 'application/json';\n            request.headers[\"authorization\"] = user ? `Bearer ${user.accessToken}` : \"\";\n            request.withCredentials = true;\n            return request;\n        },\n        function(error) {\n            return Promise.reject(error);\n        }\n    );\n\n    //will only recompute the memoized value when one of the dependencies has changed\n    const value = useMemo(() => ([user, setUser]), [user, setUser]);\n\n    //To make sure tokenRefresh attempt is only made once.\n    useEffect(() => {\n        axios.get(\"http://localhost:3000/refreshToken\")\n            .then((response) => {\n                // console.log(response.data);\n                updateUser(response.data, setUser);\n\n                return;\n            })\n            .catch((error) => {\n                console.log(error);\n\n                logout(setUser);\n\n                return;\n            });\n    }, []);\n\n    return (\n        <Router>\n            <UserContext.Provider value={value}>\n                <ApolloProvider client={apolloClient}>\n                    <Switch>\n                        {/* Render is used to pass props to components rendered by React Router */}\n                        <Route\n                            exact \n                            path=\"/login\" \n                            render={(props) => (\n                                <LoginContainer\n                                    user={user}\n                                    logout={logout}\n                                    updateUser={updateUser}\n                                />\n                            )}\n                        />\n                        <Route\n                            render={(props) => (\n                                <DefaultContainer\n                                    user={user}\n                                    logout={logout}\n                                />\n                            )}\n                        />\n                    </Switch>\n                </ApolloProvider>\n            </UserContext.Provider>\n        </Router>\n    );\n};\nexport default Routes;"]},"metadata":{},"sourceType":"module"}