{"ast":null,"code":"import MinHeap from './MinHeap';\n\nfunction getIndex(x, y, cols) {\n  return x + y * cols;\n}\n\nfunction heuristic(startPoint, endPoint, heuristic) {\n  //TODO make this a switch for the different types of heuristic functions\n  let distance;\n\n  switch (heuristic) {\n    case \"euclidean\":\n      distance = Math.sqrt(Math.pow(endPoint.x - startPoint.x, 2) + Math.pow(endPoint.y - startPoint.y, 2));\n      break;\n\n    case \"manhattan\":\n      distance = Math.abs(startPoint.x - endPoint.x) + Math.abs(startPoint.y - endPoint.y);\n      break;\n\n    default:\n      distance = Math.sqrt(Math.pow(endPoint.x - startPoint.x, 2) + Math.pow(endPoint.y - startPoint.y, 2));\n      break;\n  }\n\n  return distance;\n}\n\nfunction dist(startPoint, endPoint) {\n  //TODO make this a switch for the different types of heuristic functions\n  const distance = Math.sqrt(Math.pow(endPoint.x - startPoint.x, 2) + Math.pow(endPoint.y - startPoint.y, 2));\n  return distance;\n}\n\nfunction getPoints(gridMap) {\n  let startPoint = null;\n  let endPoints = [];\n  gridMap.map(square => {\n    if (square.val && square.type === \"start\") {\n      // console.log(square);\n      startPoint = square;\n      return null;\n    }\n\n    if (square.val && square.type === \"end\") {\n      // console.log(square);\n      endPoints.push(square);\n      return null;\n    }\n\n    return null;\n  });\n  return [startPoint, endPoints];\n}\n\nfunction getNeighbors(point, gridMap, rows, cols) {\n  //Point                                 Index\n  // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n  // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n  // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n  // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n  // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n  // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n  // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n  // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n  const neighbors = new Array(8);\n\n  if (point.x > 0) {\n    const left = getIndex(point.x - 1, point.y, cols);\n\n    if (gridMap[left].type !== \"wall\" && gridMap[left].type !== \"start\") {\n      neighbors[0] = gridMap[left];\n    }\n  }\n\n  if (point.x < cols - 1) {\n    const right = getIndex(point.x + 1, point.y, cols);\n\n    if (gridMap[right].type !== \"wall\" && gridMap[right].type !== \"start\") {\n      neighbors[1] = gridMap[right];\n    }\n  }\n\n  if (point.y > 0) {\n    const up = getIndex(point.x, point.y - 1, cols);\n\n    if (gridMap[up].type !== \"wall\" && gridMap[up].type !== \"start\") {\n      neighbors[2] = gridMap[up];\n    }\n  }\n\n  if (point.y < rows - 1) {\n    const down = getIndex(point.x, point.y + 1, cols);\n\n    if (gridMap[down].type !== \"wall\" && gridMap[down].type !== \"start\") {\n      neighbors[3] = gridMap[down];\n    }\n  }\n\n  if (point.x > 0 && point.y > 0) {\n    const topLeft = getIndex(point.x - 1, point.y - 1, cols);\n\n    if (gridMap[topLeft].type !== \"wall\" && gridMap[topLeft].type !== \"start\") {\n      neighbors[4] = gridMap[topLeft];\n    }\n  }\n\n  if (point.x < cols - 1 && point.y > 0) {\n    const topRight = getIndex(point.x + 1, point.y - 1, cols);\n\n    if (gridMap[topRight].type !== \"wall\" && gridMap[topRight].type !== \"start\") {\n      neighbors[5] = gridMap[topRight];\n    }\n  }\n\n  if (point.x > 0 && point.y < rows - 1) {\n    const bottomLeft = getIndex(point.x - 1, point.y + 1, cols);\n\n    if (gridMap[bottomLeft].type !== \"wall\" && gridMap[bottomLeft].type !== \"start\") {\n      neighbors[6] = gridMap[bottomLeft];\n    }\n  }\n\n  if (point.x < cols - 1 && point.y < rows - 1) {\n    const bottomRight = getIndex(point.x + 1, point.y + 1, cols);\n\n    if (gridMap[bottomRight].type !== \"wall\" && gridMap[bottomRight].type !== \"start\") {\n      neighbors[7] = gridMap[bottomRight];\n    }\n  }\n\n  return neighbors;\n}\n\nfunction GreedyBFS(rows, cols, gridMap, heuristicType, memState, setState) {\n  const [startPoint, endPoints] = getPoints(gridMap);\n  const openSet = new MinHeap();\n  const discovered = {};\n  const cameFrom = {};\n  const hScore = {};\n  const states = []; //TODO: Bug, clears grid but then returns it to its previous state\n\n  const newState = { ...memState,\n    grid: new Array(rows * cols).fill({\n      val: false,\n      type: null\n    }).map((square, i) => {\n      return { ...square,\n        x: i % cols,\n        y: Math.abs((i - i % cols) / cols)\n      };\n    })\n  };\n  states.push(newState);\n  let goal = null;\n\n  if (!startPoint || !endPoints) {\n    console.log(\"Map must have a start point, and an end point\");\n    return \"Map must have a start point, and an end point\";\n  }\n\n  cameFrom[getIndex(startPoint.x, startPoint.y, cols)] = null;\n  const endPointDistances = new Array(endPoints.length);\n  endPoints.map((endPoint, i) => {\n    endPointDistances[i] = [endPoint, heuristic(startPoint, endPoint, heuristicType)];\n    return null;\n  });\n  endPointDistances.sort((a, b) => {\n    if (a[1] > b[1]) {\n      return 1;\n    }\n\n    if (a[1] < b[1]) {\n      return -1;\n    }\n\n    return 0;\n  });\n  goal = endPointDistances[0][0];\n  hScore[getIndex(startPoint.x, startPoint.y, cols)] = endPointDistances[0][1];\n  openSet.insert({\n    point: startPoint,\n    val: hScore[getIndex(startPoint.x, startPoint.y, cols)]\n  });\n  discovered[getIndex(startPoint.x, startPoint.y, cols)] = \"discovered\";\n\n  while (openSet.getHeap().length !== 0) {\n    // console.log(Array.from(openSet.getHeap()));\n    const current = openSet.peek().point; // console.log(Object.assign({},current));\n\n    openSet.extract();\n    const newState = { ...memState,\n      grid: memState.grid.map((square, index) => {\n        if (current.x === square.x && current.y === square.y) {\n          if (current.type !== \"start\" && current.type !== \"end\") {\n            memState.grid[index] = { ...memState.grid[index],\n              val: true,\n              type: \"neighbors\"\n            };\n          }\n\n          return { ...square\n          };\n        }\n\n        return { ...square\n        };\n      })\n    };\n    states.push(newState);\n\n    if (current.x === goal.x && current.y === goal.y) {\n      const state = states[states.length - 1];\n      setState({ ...state,\n        //state object is immutable so updates have to be done this way\n        grid: state.grid.map((square, index) => {\n          if (cameFrom[index]) {\n            if (square.type === \"end\") {\n              let prev = cameFrom[index];\n\n              while (prev) {\n                if (prev.type !== \"start\" && prev.type !== \"end\") {\n                  state.grid[getIndex(prev.x, prev.y, state.cols)] = { ...state.grid[getIndex(prev.x, prev.y, state.cols)],\n                    val: true,\n                    type: \"path\"\n                  };\n                }\n\n                prev = cameFrom[getIndex(prev.x, prev.y, state.cols)];\n              }\n\n              return { ...square\n              };\n            }\n\n            return { ...square\n            };\n          }\n\n          return { ...square\n          };\n        })\n      });\n      console.log(\"PATH FOUND!!!!!\");\n      return states;\n    }\n\n    const neighbors = getNeighbors(current, gridMap, rows, cols, discovered);\n    neighbors.map(neighbor => {\n      // console.log(\"neighbor\", neighbor);\n      if (!discovered[getIndex(neighbor.x, neighbor.y, cols)]) {\n        cameFrom[getIndex(neighbor.x, neighbor.y, cols)] = current;\n        hScore[getIndex(neighbor.x, neighbor.y, cols)] = heuristic(neighbor, goal, heuristicType);\n        openSet.insert({\n          point: neighbor,\n          val: hScore[getIndex(neighbor.x, neighbor.y, cols)]\n        });\n        const newState = { ...memState,\n          grid: memState.grid.map((square, index) => {\n            if (neighbor.x === square.x && neighbor.y === square.y) {\n              if (neighbor.type !== \"start\" && neighbor.type !== \"end\") {\n                memState.grid[index] = { ...memState.grid[index],\n                  val: true,\n                  type: \"openset\"\n                };\n              }\n\n              return { ...square\n              };\n            }\n\n            return { ...square\n            };\n          })\n        };\n        states.push(newState);\n      }\n\n      return null;\n    });\n  }\n\n  return states;\n}\n\nexport default GreedyBFS;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Algorithms/GreedyBFS.js"],"names":["MinHeap","getIndex","x","y","cols","heuristic","startPoint","endPoint","distance","Math","sqrt","pow","abs","dist","getPoints","gridMap","endPoints","map","square","val","type","push","getNeighbors","point","rows","neighbors","Array","left","right","up","down","topLeft","topRight","bottomLeft","bottomRight","GreedyBFS","heuristicType","memState","setState","openSet","discovered","cameFrom","hScore","states","newState","grid","fill","i","goal","console","log","endPointDistances","length","sort","a","b","insert","getHeap","current","peek","extract","index","state","prev","neighbor"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,WAApB;;AAEA,SAASC,QAAT,CAAkBC,CAAlB,EAAqBC,CAArB,EAAwBC,IAAxB,EAA6B;AACzB,SAAQF,CAAC,GAAIC,CAAC,GAAGC,IAAjB;AACH;;AAED,SAASC,SAAT,CAAmBC,UAAnB,EAA+BC,QAA/B,EAAyCF,SAAzC,EAAmD;AAC/C;AACA,MAAIG,QAAJ;;AACA,UAAQH,SAAR;AACI,SAAK,WAAL;AACIG,MAAAA,QAAQ,GAAGC,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,GAAL,CAAUJ,QAAQ,CAACL,CAAT,GAAWI,UAAU,CAACJ,CAAhC,EAAoC,CAApC,IAAyCO,IAAI,CAACE,GAAL,CAAUJ,QAAQ,CAACJ,CAAT,GAAWG,UAAU,CAACH,CAAhC,EAAoC,CAApC,CAAnD,CAAX;AAEA;;AAEJ,SAAK,WAAL;AACIK,MAAAA,QAAQ,GAAGC,IAAI,CAACG,GAAL,CAASN,UAAU,CAACJ,CAAX,GAAaK,QAAQ,CAACL,CAA/B,IAAqCO,IAAI,CAACG,GAAL,CAASN,UAAU,CAACH,CAAX,GAAaI,QAAQ,CAACJ,CAA/B,CAAhD;AAEA;;AAEJ;AACIK,MAAAA,QAAQ,GAAGC,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,GAAL,CAAUJ,QAAQ,CAACL,CAAT,GAAWI,UAAU,CAACJ,CAAhC,EAAoC,CAApC,IAAyCO,IAAI,CAACE,GAAL,CAAUJ,QAAQ,CAACJ,CAAT,GAAWG,UAAU,CAACH,CAAhC,EAAoC,CAApC,CAAnD,CAAX;AAEA;AAdR;;AAiBA,SAAOK,QAAP;AACH;;AAED,SAASK,IAAT,CAAcP,UAAd,EAA0BC,QAA1B,EAAmC;AAC/B;AACA,QAAMC,QAAQ,GAAGC,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,GAAL,CAAUJ,QAAQ,CAACL,CAAT,GAAWI,UAAU,CAACJ,CAAhC,EAAoC,CAApC,IAAyCO,IAAI,CAACE,GAAL,CAAUJ,QAAQ,CAACJ,CAAT,GAAWG,UAAU,CAACH,CAAhC,EAAoC,CAApC,CAAnD,CAAjB;AAEA,SAAOK,QAAP;AACH;;AAED,SAASM,SAAT,CAAmBC,OAAnB,EAA2B;AACvB,MAAIT,UAAU,GAAG,IAAjB;AACA,MAAIU,SAAS,GAAG,EAAhB;AAEAD,EAAAA,OAAO,CAACE,GAAR,CAAaC,MAAD,IAAY;AACpB,QAAGA,MAAM,CAACC,GAAP,IAAcD,MAAM,CAACE,IAAP,KAAiB,OAAlC,EAA0C;AACtC;AACAd,MAAAA,UAAU,GAAGY,MAAb;AAEA,aAAO,IAAP;AACH;;AAED,QAAGA,MAAM,CAACC,GAAP,IAAcD,MAAM,CAACE,IAAP,KAAgB,KAAjC,EAAuC;AACnC;AACAJ,MAAAA,SAAS,CAACK,IAAV,CAAeH,MAAf;AAEA,aAAO,IAAP;AACH;;AAED,WAAO,IAAP;AACH,GAhBD;AAkBA,SAAO,CAACZ,UAAD,EAAaU,SAAb,CAAP;AACH;;AAED,SAASM,YAAT,CAAsBC,KAAtB,EAA6BR,OAA7B,EAAsCS,IAAtC,EAA4CpB,IAA5C,EAAiD;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,QAAMqB,SAAS,GAAG,IAAIC,KAAJ,CAAU,CAAV,CAAlB;;AAEA,MAAGH,KAAK,CAACrB,CAAN,GAAU,CAAb,EAAe;AACX,UAAMyB,IAAI,GAAG1B,QAAQ,CAAEsB,KAAK,CAACrB,CAAN,GAAQ,CAAV,EAAeqB,KAAK,CAACpB,CAArB,EAAyBC,IAAzB,CAArB;;AAEA,QAAGW,OAAO,CAACY,IAAD,CAAP,CAAcP,IAAd,KAAuB,MAAvB,IAAiCL,OAAO,CAACY,IAAD,CAAP,CAAcP,IAAd,KAAuB,OAA3D,EAAmE;AAC/DK,MAAAA,SAAS,CAAC,CAAD,CAAT,GAAeV,OAAO,CAACY,IAAD,CAAtB;AACH;AACJ;;AACD,MAAGJ,KAAK,CAACrB,CAAN,GAAUE,IAAI,GAAC,CAAlB,EAAoB;AAChB,UAAMwB,KAAK,GAAG3B,QAAQ,CAAEsB,KAAK,CAACrB,CAAN,GAAQ,CAAV,EAAeqB,KAAK,CAACpB,CAArB,EAAyBC,IAAzB,CAAtB;;AAEA,QAAGW,OAAO,CAACa,KAAD,CAAP,CAAeR,IAAf,KAAwB,MAAxB,IAAkCL,OAAO,CAACa,KAAD,CAAP,CAAeR,IAAf,KAAwB,OAA7D,EAAqE;AACjEK,MAAAA,SAAS,CAAC,CAAD,CAAT,GAAeV,OAAO,CAACa,KAAD,CAAtB;AACH;AACJ;;AACD,MAAGL,KAAK,CAACpB,CAAN,GAAU,CAAb,EAAe;AACX,UAAM0B,EAAE,GAAG5B,QAAQ,CAAEsB,KAAK,CAACrB,CAAR,EAAaqB,KAAK,CAACpB,CAAN,GAAQ,CAArB,EAAyBC,IAAzB,CAAnB;;AAEA,QAAGW,OAAO,CAACc,EAAD,CAAP,CAAYT,IAAZ,KAAqB,MAArB,IAA+BL,OAAO,CAACc,EAAD,CAAP,CAAYT,IAAZ,KAAqB,OAAvD,EAA+D;AAC3DK,MAAAA,SAAS,CAAC,CAAD,CAAT,GAAeV,OAAO,CAACc,EAAD,CAAtB;AACH;AACJ;;AACD,MAAGN,KAAK,CAACpB,CAAN,GAAUqB,IAAI,GAAC,CAAlB,EAAoB;AAChB,UAAMM,IAAI,GAAG7B,QAAQ,CAAEsB,KAAK,CAACrB,CAAR,EAAaqB,KAAK,CAACpB,CAAN,GAAQ,CAArB,EAAyBC,IAAzB,CAArB;;AAEA,QAAGW,OAAO,CAACe,IAAD,CAAP,CAAcV,IAAd,KAAuB,MAAvB,IAAiCL,OAAO,CAACe,IAAD,CAAP,CAAcV,IAAd,KAAuB,OAA3D,EAAmE;AAC/DK,MAAAA,SAAS,CAAC,CAAD,CAAT,GAAeV,OAAO,CAACe,IAAD,CAAtB;AACH;AACJ;;AACD,MAAGP,KAAK,CAACrB,CAAN,GAAU,CAAV,IAAeqB,KAAK,CAACpB,CAAN,GAAU,CAA5B,EAA8B;AAC1B,UAAM4B,OAAO,GAAG9B,QAAQ,CAAEsB,KAAK,CAACrB,CAAN,GAAQ,CAAV,EAAeqB,KAAK,CAACpB,CAAN,GAAQ,CAAvB,EAA2BC,IAA3B,CAAxB;;AAEA,QAAGW,OAAO,CAACgB,OAAD,CAAP,CAAiBX,IAAjB,KAA0B,MAA1B,IAAoCL,OAAO,CAACgB,OAAD,CAAP,CAAiBX,IAAjB,KAA0B,OAAjE,EAAyE;AACrEK,MAAAA,SAAS,CAAC,CAAD,CAAT,GAAeV,OAAO,CAACgB,OAAD,CAAtB;AACH;AACJ;;AACD,MAAGR,KAAK,CAACrB,CAAN,GAAUE,IAAI,GAAC,CAAf,IAAoBmB,KAAK,CAACpB,CAAN,GAAU,CAAjC,EAAmC;AAC/B,UAAM6B,QAAQ,GAAG/B,QAAQ,CAAEsB,KAAK,CAACrB,CAAN,GAAQ,CAAV,EAAeqB,KAAK,CAACpB,CAAN,GAAQ,CAAvB,EAA2BC,IAA3B,CAAzB;;AAEA,QAAGW,OAAO,CAACiB,QAAD,CAAP,CAAkBZ,IAAlB,KAA2B,MAA3B,IAAqCL,OAAO,CAACiB,QAAD,CAAP,CAAkBZ,IAAlB,KAA2B,OAAnE,EAA2E;AACvEK,MAAAA,SAAS,CAAC,CAAD,CAAT,GAAeV,OAAO,CAACiB,QAAD,CAAtB;AACH;AACJ;;AACD,MAAGT,KAAK,CAACrB,CAAN,GAAU,CAAV,IAAeqB,KAAK,CAACpB,CAAN,GAAUqB,IAAI,GAAC,CAAjC,EAAmC;AAC/B,UAAMS,UAAU,GAAIhC,QAAQ,CAAEsB,KAAK,CAACrB,CAAN,GAAQ,CAAV,EAAeqB,KAAK,CAACpB,CAAN,GAAQ,CAAvB,EAA2BC,IAA3B,CAA5B;;AAEA,QAAGW,OAAO,CAACkB,UAAD,CAAP,CAAoBb,IAApB,KAA6B,MAA7B,IAAuCL,OAAO,CAACkB,UAAD,CAAP,CAAoBb,IAApB,KAA6B,OAAvE,EAA+E;AAC3EK,MAAAA,SAAS,CAAC,CAAD,CAAT,GAAeV,OAAO,CAACkB,UAAD,CAAtB;AACH;AACJ;;AACD,MAAGV,KAAK,CAACrB,CAAN,GAAUE,IAAI,GAAC,CAAf,IAAoBmB,KAAK,CAACpB,CAAN,GAAUqB,IAAI,GAAC,CAAtC,EAAwC;AACpC,UAAMU,WAAW,GAAGjC,QAAQ,CAAEsB,KAAK,CAACrB,CAAN,GAAQ,CAAV,EAAeqB,KAAK,CAACpB,CAAN,GAAQ,CAAvB,EAA2BC,IAA3B,CAA5B;;AAEA,QAAGW,OAAO,CAACmB,WAAD,CAAP,CAAqBd,IAArB,KAA8B,MAA9B,IAAwCL,OAAO,CAACmB,WAAD,CAAP,CAAqBd,IAArB,KAA8B,OAAzE,EAAiF;AAC7EK,MAAAA,SAAS,CAAC,CAAD,CAAT,GAAeV,OAAO,CAACmB,WAAD,CAAtB;AACH;AACJ;;AAED,SAAOT,SAAP;AACH;;AAED,SAASU,SAAT,CAAmBX,IAAnB,EAAyBpB,IAAzB,EAA+BW,OAA/B,EAAwCqB,aAAxC,EAAuDC,QAAvD,EAAiEC,QAAjE,EAA0E;AACtE,QAAM,CAAChC,UAAD,EAAaU,SAAb,IAA0BF,SAAS,CAACC,OAAD,CAAzC;AACA,QAAMwB,OAAO,GAAG,IAAIvC,OAAJ,EAAhB;AACA,QAAMwC,UAAU,GAAG,EAAnB;AACA,QAAMC,QAAQ,GAAG,EAAjB;AACA,QAAMC,MAAM,GAAG,EAAf;AACA,QAAMC,MAAM,GAAG,EAAf,CANsE,CAQtE;;AACA,QAAMC,QAAQ,GAAG,EACb,GAAGP,QADU;AAEbQ,IAAAA,IAAI,EAAE,IAAInB,KAAJ,CAAUF,IAAI,GAACpB,IAAf,EAAqB0C,IAArB,CAA0B;AAAC3B,MAAAA,GAAG,EAAE,KAAN;AAAaC,MAAAA,IAAI,EAAE;AAAnB,KAA1B,EAAoDH,GAApD,CAAwD,CAACC,MAAD,EAAS6B,CAAT,KAAe;AACzE,aAAO,EACH,GAAG7B,MADA;AAEHhB,QAAAA,CAAC,EAAE6C,CAAC,GAAG3C,IAFJ;AAGHD,QAAAA,CAAC,EAAEM,IAAI,CAACG,GAAL,CAAS,CAACmC,CAAC,GAAIA,CAAC,GAAG3C,IAAV,IAAmBA,IAA5B;AAHA,OAAP;AAKH,KANK;AAFO,GAAjB;AAUAuC,EAAAA,MAAM,CAACtB,IAAP,CAAYuB,QAAZ;AAEA,MAAII,IAAI,GAAG,IAAX;;AAEA,MAAG,CAAC1C,UAAD,IAAe,CAACU,SAAnB,EAA6B;AACzBiC,IAAAA,OAAO,CAACC,GAAR,CAAY,+CAAZ;AACA,WAAO,+CAAP;AACH;;AAEDT,EAAAA,QAAQ,CAACxC,QAAQ,CAACK,UAAU,CAACJ,CAAZ,EAAeI,UAAU,CAACH,CAA1B,EAA6BC,IAA7B,CAAT,CAAR,GAAuD,IAAvD;AAEA,QAAM+C,iBAAiB,GAAG,IAAIzB,KAAJ,CAAUV,SAAS,CAACoC,MAApB,CAA1B;AAEApC,EAAAA,SAAS,CAACC,GAAV,CAAc,CAACV,QAAD,EAAWwC,CAAX,KAAiB;AAC3BI,IAAAA,iBAAiB,CAACJ,CAAD,CAAjB,GAAuB,CAACxC,QAAD,EAAWF,SAAS,CAACC,UAAD,EAAaC,QAAb,EAAuB6B,aAAvB,CAApB,CAAvB;AAEA,WAAO,IAAP;AACH,GAJD;AAMAe,EAAAA,iBAAiB,CAACE,IAAlB,CAAuB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC7B,QAAGD,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAX,EAAe;AACX,aAAO,CAAP;AACH;;AACD,QAAGD,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAX,EAAe;AACX,aAAO,CAAC,CAAR;AACH;;AAED,WAAO,CAAP;AACH,GATD;AAWAP,EAAAA,IAAI,GAAGG,iBAAiB,CAAC,CAAD,CAAjB,CAAqB,CAArB,CAAP;AAEAT,EAAAA,MAAM,CAACzC,QAAQ,CAACK,UAAU,CAACJ,CAAZ,EAAeI,UAAU,CAACH,CAA1B,EAA6BC,IAA7B,CAAT,CAAN,GAAqD+C,iBAAiB,CAAC,CAAD,CAAjB,CAAqB,CAArB,CAArD;AAEAZ,EAAAA,OAAO,CAACiB,MAAR,CAAe;AAACjC,IAAAA,KAAK,EAAEjB,UAAR;AAAoBa,IAAAA,GAAG,EAAEuB,MAAM,CAACzC,QAAQ,CAACK,UAAU,CAACJ,CAAZ,EAAeI,UAAU,CAACH,CAA1B,EAA6BC,IAA7B,CAAT;AAA/B,GAAf;AACAoC,EAAAA,UAAU,CAACvC,QAAQ,CAACK,UAAU,CAACJ,CAAZ,EAAeI,UAAU,CAACH,CAA1B,EAA6BC,IAA7B,CAAT,CAAV,GAAyD,YAAzD;;AAEA,SAAMmC,OAAO,CAACkB,OAAR,GAAkBL,MAAlB,KAA6B,CAAnC,EAAqC;AACjC;AACA,UAAMM,OAAO,GAAGnB,OAAO,CAACoB,IAAR,GAAepC,KAA/B,CAFiC,CAGjC;;AAEAgB,IAAAA,OAAO,CAACqB,OAAR;AAEA,UAAMhB,QAAQ,GAAG,EACb,GAAGP,QADU;AAEbQ,MAAAA,IAAI,EAAER,QAAQ,CAACQ,IAAT,CAAc5B,GAAd,CAAkB,CAACC,MAAD,EAAS2C,KAAT,KAAmB;AACvC,YAAGH,OAAO,CAACxD,CAAR,KAAcgB,MAAM,CAAChB,CAArB,IAA0BwD,OAAO,CAACvD,CAAR,KAAce,MAAM,CAACf,CAAlD,EAAoD;AAChD,cAAGuD,OAAO,CAACtC,IAAR,KAAiB,OAAjB,IAA4BsC,OAAO,CAACtC,IAAR,KAAiB,KAAhD,EAAsD;AAClDiB,YAAAA,QAAQ,CAACQ,IAAT,CAAcgB,KAAd,IAAuB,EACnB,GAAGxB,QAAQ,CAACQ,IAAT,CAAcgB,KAAd,CADgB;AAEnB1C,cAAAA,GAAG,EAAE,IAFc;AAGnBC,cAAAA,IAAI,EAAE;AAHa,aAAvB;AAKH;;AACD,iBAAO,EAAC,GAAGF;AAAJ,WAAP;AACH;;AACD,eAAO,EAAC,GAAGA;AAAJ,SAAP;AACH,OAZK;AAFO,KAAjB;AAgBAyB,IAAAA,MAAM,CAACtB,IAAP,CAAYuB,QAAZ;;AAEA,QAAGc,OAAO,CAACxD,CAAR,KAAc8C,IAAI,CAAC9C,CAAnB,IAAwBwD,OAAO,CAACvD,CAAR,KAAc6C,IAAI,CAAC7C,CAA9C,EAAgD;AAC5C,YAAM2D,KAAK,GAAGnB,MAAM,CAACA,MAAM,CAACS,MAAP,GAAc,CAAf,CAApB;AACAd,MAAAA,QAAQ,CAAC,EACL,GAAGwB,KADE;AAEL;AACAjB,QAAAA,IAAI,EAAEiB,KAAK,CAACjB,IAAN,CAAW5B,GAAX,CAAe,CAACC,MAAD,EAAS2C,KAAT,KAAmB;AACpC,cAAGpB,QAAQ,CAACoB,KAAD,CAAX,EAAmB;AACf,gBAAG3C,MAAM,CAACE,IAAP,KAAgB,KAAnB,EAAyB;AACrB,kBAAI2C,IAAI,GAAGtB,QAAQ,CAACoB,KAAD,CAAnB;;AAEA,qBAAME,IAAN,EAAW;AACP,oBAAGA,IAAI,CAAC3C,IAAL,KAAc,OAAd,IAAyB2C,IAAI,CAAC3C,IAAL,KAAc,KAA1C,EAAgD;AAC5C0C,kBAAAA,KAAK,CAACjB,IAAN,CAAW5C,QAAQ,CAAC8D,IAAI,CAAC7D,CAAN,EAAQ6D,IAAI,CAAC5D,CAAb,EAAe2D,KAAK,CAAC1D,IAArB,CAAnB,IAAiD,EAC7C,GAAG0D,KAAK,CAACjB,IAAN,CAAW5C,QAAQ,CAAC8D,IAAI,CAAC7D,CAAN,EAAQ6D,IAAI,CAAC5D,CAAb,EAAe2D,KAAK,CAAC1D,IAArB,CAAnB,CAD0C;AAE7Ce,oBAAAA,GAAG,EAAE,IAFwC;AAG7CC,oBAAAA,IAAI,EAAE;AAHuC,mBAAjD;AAKH;;AACD2C,gBAAAA,IAAI,GAAGtB,QAAQ,CAACxC,QAAQ,CAAC8D,IAAI,CAAC7D,CAAN,EAAQ6D,IAAI,CAAC5D,CAAb,EAAe2D,KAAK,CAAC1D,IAArB,CAAT,CAAf;AACH;;AACD,qBAAO,EAAC,GAAGc;AAAJ,eAAP;AACH;;AACD,mBAAO,EAAC,GAAGA;AAAJ,aAAP;AACH;;AACD,iBAAO,EAAC,GAAGA;AAAJ,WAAP;AACH,SApBK;AAHD,OAAD,CAAR;AA2BA+B,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACA,aAAOP,MAAP;AACH;;AAED,UAAMlB,SAAS,GAAGH,YAAY,CAACoC,OAAD,EAAU3C,OAAV,EAAmBS,IAAnB,EAAyBpB,IAAzB,EAA+BoC,UAA/B,CAA9B;AAEAf,IAAAA,SAAS,CAACR,GAAV,CAAe+C,QAAD,IAAc;AACxB;AACA,UAAG,CAACxB,UAAU,CAACvC,QAAQ,CAAC+D,QAAQ,CAAC9D,CAAV,EAAa8D,QAAQ,CAAC7D,CAAtB,EAAyBC,IAAzB,CAAT,CAAd,EAAuD;AACnDqC,QAAAA,QAAQ,CAACxC,QAAQ,CAAC+D,QAAQ,CAAC9D,CAAV,EAAa8D,QAAQ,CAAC7D,CAAtB,EAAyBC,IAAzB,CAAT,CAAR,GAAmDsD,OAAnD;AAEAhB,QAAAA,MAAM,CAACzC,QAAQ,CAAC+D,QAAQ,CAAC9D,CAAV,EAAa8D,QAAQ,CAAC7D,CAAtB,EAAyBC,IAAzB,CAAT,CAAN,GAAiDC,SAAS,CAAC2D,QAAD,EAAWhB,IAAX,EAAiBZ,aAAjB,CAA1D;AAEAG,QAAAA,OAAO,CAACiB,MAAR,CAAe;AAACjC,UAAAA,KAAK,EAAEyC,QAAR;AAAkB7C,UAAAA,GAAG,EAAEuB,MAAM,CAACzC,QAAQ,CAAC+D,QAAQ,CAAC9D,CAAV,EAAa8D,QAAQ,CAAC7D,CAAtB,EAAyBC,IAAzB,CAAT;AAA7B,SAAf;AAEA,cAAMwC,QAAQ,GAAG,EACb,GAAGP,QADU;AAEbQ,UAAAA,IAAI,EAAER,QAAQ,CAACQ,IAAT,CAAc5B,GAAd,CAAkB,CAACC,MAAD,EAAS2C,KAAT,KAAmB;AACvC,gBAAGG,QAAQ,CAAC9D,CAAT,KAAegB,MAAM,CAAChB,CAAtB,IAA2B8D,QAAQ,CAAC7D,CAAT,KAAee,MAAM,CAACf,CAApD,EAAsD;AAClD,kBAAG6D,QAAQ,CAAC5C,IAAT,KAAkB,OAAlB,IAA6B4C,QAAQ,CAAC5C,IAAT,KAAkB,KAAlD,EAAwD;AACpDiB,gBAAAA,QAAQ,CAACQ,IAAT,CAAcgB,KAAd,IAAuB,EACnB,GAAGxB,QAAQ,CAACQ,IAAT,CAAcgB,KAAd,CADgB;AAEnB1C,kBAAAA,GAAG,EAAE,IAFc;AAGnBC,kBAAAA,IAAI,EAAE;AAHa,iBAAvB;AAKH;;AACD,qBAAO,EAAC,GAAGF;AAAJ,eAAP;AACH;;AACD,mBAAO,EAAC,GAAGA;AAAJ,aAAP;AACH,WAZK;AAFO,SAAjB;AAgBAyB,QAAAA,MAAM,CAACtB,IAAP,CAAYuB,QAAZ;AACH;;AACD,aAAO,IAAP;AACH,KA5BD;AA6BH;;AAED,SAAOD,MAAP;AACH;;AAED,eAAeR,SAAf","sourcesContent":["import MinHeap from './MinHeap';\n\nfunction getIndex(x, y, cols){\n    return (x + (y * cols));\n}\n\nfunction heuristic(startPoint, endPoint, heuristic){\n    //TODO make this a switch for the different types of heuristic functions\n    let distance;\n    switch (heuristic) {\n        case \"euclidean\":\n            distance = Math.sqrt(Math.pow((endPoint.x-startPoint.x), 2) + Math.pow((endPoint.y-startPoint.y), 2));\n\n            break;\n        \n        case \"manhattan\":\n            distance = Math.abs(startPoint.x-endPoint.x) +  Math.abs(startPoint.y-endPoint.y);\n\n            break;\n\n        default:\n            distance = Math.sqrt(Math.pow((endPoint.x-startPoint.x), 2) + Math.pow((endPoint.y-startPoint.y), 2));\n\n            break;\n    }\n    \n    return distance;\n}\n\nfunction dist(startPoint, endPoint){\n    //TODO make this a switch for the different types of heuristic functions\n    const distance = Math.sqrt(Math.pow((endPoint.x-startPoint.x), 2) + Math.pow((endPoint.y-startPoint.y), 2)); \n\n    return distance;\n}\n\nfunction getPoints(gridMap){\n    let startPoint = null;\n    let endPoints = [];\n    \n    gridMap.map((square) => {\n        if(square.val && square.type ===  \"start\"){\n            // console.log(square);\n            startPoint = square;\n\n            return null;\n        }\n\n        if(square.val && square.type === \"end\"){\n            // console.log(square);\n            endPoints.push(square);\n\n            return null;\n        }\n\n        return null;\n    })\n\n    return [startPoint, endPoints];\n}\n\nfunction getNeighbors(point, gridMap, rows, cols){\n    //Point                                 Index\n    // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n    // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n    // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n    // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n    // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n    // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n    // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n    // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n\n    const neighbors = new Array(8);\n\n    if(point.x > 0){\n        const left = getIndex((point.x-1), (point.y), cols);\n\n        if(gridMap[left].type !== \"wall\" && gridMap[left].type !== \"start\"){\n            neighbors[0] = gridMap[left];\n        }\n    }\n    if(point.x < cols-1){\n        const right = getIndex((point.x+1), (point.y), cols);\n\n        if(gridMap[right].type !== \"wall\" && gridMap[right].type !== \"start\"){\n            neighbors[1] = gridMap[right];\n        }\n    }\n    if(point.y > 0){\n        const up = getIndex((point.x), (point.y-1), cols);\n\n        if(gridMap[up].type !== \"wall\" && gridMap[up].type !== \"start\"){\n            neighbors[2] = gridMap[up];\n        }\n    }\n    if(point.y < rows-1){\n        const down = getIndex((point.x), (point.y+1), cols);\n\n        if(gridMap[down].type !== \"wall\" && gridMap[down].type !== \"start\"){\n            neighbors[3] = gridMap[down];\n        }\n    }\n    if(point.x > 0 && point.y > 0){\n        const topLeft = getIndex((point.x-1), (point.y-1), cols);\n\n        if(gridMap[topLeft].type !== \"wall\" && gridMap[topLeft].type !== \"start\"){\n            neighbors[4] = gridMap[topLeft];\n        }\n    }\n    if(point.x < cols-1 && point.y > 0){\n        const topRight = getIndex((point.x+1), (point.y-1), cols);\n\n        if(gridMap[topRight].type !== \"wall\" && gridMap[topRight].type !== \"start\"){\n            neighbors[5] = gridMap[topRight];\n        }\n    }\n    if(point.x > 0 && point.y < rows-1){\n        const bottomLeft  = getIndex((point.x-1), (point.y+1), cols);\n\n        if(gridMap[bottomLeft].type !== \"wall\" && gridMap[bottomLeft].type !== \"start\"){\n            neighbors[6] = gridMap[bottomLeft];\n        }\n    }\n    if(point.x < cols-1 && point.y < rows-1){\n        const bottomRight = getIndex((point.x+1), (point.y+1), cols);\n\n        if(gridMap[bottomRight].type !== \"wall\" && gridMap[bottomRight].type !== \"start\"){\n            neighbors[7] = gridMap[bottomRight];\n        }\n    }\n\n    return neighbors;\n}\n\nfunction GreedyBFS(rows, cols, gridMap, heuristicType, memState, setState){\n    const [startPoint, endPoints] = getPoints(gridMap);\n    const openSet = new MinHeap();\n    const discovered = {};\n    const cameFrom = {};\n    const hScore = {};\n    const states = [];\n\n    //TODO: Bug, clears grid but then returns it to its previous state\n    const newState = {\n        ...memState,\n        grid: new Array(rows*cols).fill({val: false, type: null}).map((square, i) => {\n            return {\n                ...square,\n                x: i % cols,\n                y: Math.abs((i - (i % cols)) / cols)\n            }\n        })\n    }\n    states.push(newState);\n\n    let goal = null;\n\n    if(!startPoint || !endPoints){\n        console.log(\"Map must have a start point, and an end point\");\n        return \"Map must have a start point, and an end point\"; \n    }\n\n    cameFrom[getIndex(startPoint.x, startPoint.y, cols)] = null;\n\n    const endPointDistances = new Array(endPoints.length);\n\n    endPoints.map((endPoint, i) => {\n        endPointDistances[i] = [endPoint, heuristic(startPoint, endPoint, heuristicType)];\n\n        return null;\n    })\n    \n    endPointDistances.sort((a, b) => {\n        if(a[1] > b[1]){\n            return 1\n        }\n        if(a[1] < b[1]){\n            return -1\n        }\n\n        return 0;\n    });\n\n    goal = endPointDistances[0][0];\n\n    hScore[getIndex(startPoint.x, startPoint.y, cols)] = endPointDistances[0][1];\n\n    openSet.insert({point: startPoint, val: hScore[getIndex(startPoint.x, startPoint.y, cols)]});\n    discovered[getIndex(startPoint.x, startPoint.y, cols)] = \"discovered\";\n\n    while(openSet.getHeap().length !== 0){\n        // console.log(Array.from(openSet.getHeap()));\n        const current = openSet.peek().point;\n        // console.log(Object.assign({},current));\n\n        openSet.extract();\n        \n        const newState = {\n            ...memState,\n            grid: memState.grid.map((square, index) => {\n                if(current.x === square.x && current.y === square.y){\n                    if(current.type !== \"start\" && current.type !== \"end\"){\n                        memState.grid[index] = {\n                            ...memState.grid[index],\n                            val: true,\n                            type: \"neighbors\"\n                        }\n                    }\n                    return {...square}\n                }\n                return {...square}\n            })\n        }\n        states.push(newState);\n\n        if(current.x === goal.x && current.y === goal.y){\n            const state = states[states.length-1];\n            setState({\n                ...state,\n                //state object is immutable so updates have to be done this way\n                grid: state.grid.map((square, index) => {\n                    if(cameFrom[index]){\n                        if(square.type === \"end\"){\n                            let prev = cameFrom[index];\n                \n                            while(prev){          \n                                if(prev.type !== \"start\" && prev.type !== \"end\"){\n                                    state.grid[getIndex(prev.x,prev.y,state.cols)] = {\n                                        ...state.grid[getIndex(prev.x,prev.y,state.cols)],\n                                        val: true,\n                                        type: \"path\"\n                                    }\n                                }\n                                prev = cameFrom[getIndex(prev.x,prev.y,state.cols)];\n                            }\n                            return {...square};\n                        }\n                        return {...square};\n                    }\n                    return {...square};\n                })\n            \n            });\n\n            console.log(\"PATH FOUND!!!!!\");\n            return states;\n        }\n\n        const neighbors = getNeighbors(current, gridMap, rows, cols, discovered);\n\n        neighbors.map((neighbor) => {\n            // console.log(\"neighbor\", neighbor);\n            if(!discovered[getIndex(neighbor.x, neighbor.y, cols)]){\n                cameFrom[getIndex(neighbor.x, neighbor.y, cols)] = current;\n                \n                hScore[getIndex(neighbor.x, neighbor.y, cols)] = heuristic(neighbor, goal, heuristicType);\n            \n                openSet.insert({point: neighbor, val: hScore[getIndex(neighbor.x, neighbor.y, cols)]});\n                \n                const newState = {\n                    ...memState,\n                    grid: memState.grid.map((square, index) => {\n                        if(neighbor.x === square.x && neighbor.y === square.y){\n                            if(neighbor.type !== \"start\" && neighbor.type !== \"end\"){\n                                memState.grid[index] = {\n                                    ...memState.grid[index],\n                                    val: true,\n                                    type: \"openset\"\n                                }\n                            }\n                            return {...square}\n                        }\n                        return {...square}\n                    })\n                }\n                states.push(newState); \n            }\n            return null;\n        });\n    }\n\n    return states;\n}\n\nexport default GreedyBFS;"]},"metadata":{},"sourceType":"module"}