{"ast":null,"code":"var _jsxFileName = \"/home/menekou/projects/react/shortest-path/react-frontend/src/Map/Map.js\";\nimport React, { useState, useContext, useEffect, useMemo } from 'react';\nimport './Map.css';\nimport Square from '../Square/Square';\nimport MenuContext from '../MenuContext';\nimport AStar from '../Algorithms/AStar';\n\nfunction Map(props) {\n  const {\n    menuState,\n    dispatch\n  } = useContext(MenuContext);\n  const [state, setState] = useState({\n    rows: 15,\n    cols: 50,\n    grid: new Array(15 * 50).fill({\n      val: false,\n      type: null\n    }).map((square, i) => {\n      return { ...square,\n        x: i % 50,\n        y: Math.abs((i - i % 50) / 50)\n      };\n    }),\n    //space-time O(1)\n    itemState: menuState.itemState\n  });\n  const {\n    state: memState\n  } = useMemo(() => ({\n    state\n  }), [state]); //If item button is changed\n\n  useEffect(() => {\n    setState(memState => {\n      return { ...memState,\n        itemState: menuState.itemState\n      };\n    });\n  }, [menuState.itemState]); //If menu clear button is clicked\n\n  useEffect(() => {\n    if (menuState.clear === true) {\n      setState(memState => ({ ...memState,\n        grid: memState.grid.map((square, index) => {\n          if (square.type !== \"start\" && square.type !== \"end\") {\n            return { ...square,\n              val: false,\n              type: null\n            };\n          }\n\n          return { ...square\n          };\n        })\n      }));\n      return dispatch({\n        type: \"cleared\"\n      });\n    }\n  }, [menuState.clear, dispatch]); //If run menu button is clicked\n\n  useEffect(() => {\n    if (menuState.run === true) {\n      // if(menuState.isDrawn){\n      //     clearPath();\n      //     dispatch({type: \"drawn\"});\n      // }\n      //Visualize path finding algorithm logic\n      console.time();\n      const states = AStar(memState.rows, memState.cols, memState.grid, menuState.heuristic, memState, setState);\n      console.timeEnd();\n      states.map(newState => {\n        if (newState.path && newState.openSet.length > 0) {\n          drawPath(newState);\n        }\n      });\n      return dispatch({\n        type: \"complete\"\n      });\n    }\n  }, [menuState.run, menuState.isDrawn, menuState.heuristic, memState.grid, memState.rows, memState.cols, dispatch]);\n  useEffect(() => {\n    console.log(\"heloo\");\n  }, [memState.openSet, memState.path]); // const clearPath = () => {\n  //     setState((memState) => ({\n  //         ...memState,\n  //         grid: memState.grid.map((square, index) => {\n  //             console.log(\"clearing\");\n  //             console.log(memState.grid[index-1]);\n  //             if(square.type !== \"start\" && square.type !== \"end\"){\n  //                 memState.grid[index] = {\n  //                     ...square,\n  //                     val: false,\n  //                     type: \"path\"\n  //                 }\n  //             }\n  //             return {...square}\n  //         })\n  //     }))\n  //     return;\n  // }\n\n  const drawPath = newState => {\n    // if(runRef.current){\n    const openSet = newState.openSet[0];\n    const path = newState.path;\n    setState({ ...newState,\n      //state object is immutable so updates have to be done this way\n      grid: memState.grid.map((square, index) => {\n        if (path[index]) {\n          if (square.type !== \"start\" && square.type !== \"end\" && square.type !== \"path\" && square.type !== \"openset\") {\n            memState.grid[index] = { ...square,\n              val: true,\n              type: \"neighbors\"\n            };\n          }\n        }\n\n        console.log;\n\n        if (openSet.point.x + openSet.point.y * memState.cols === index) {\n          if (square.type !== \"start\" && square.type !== \"end\" && square.type !== \"path\") {\n            memState.grid[index] = { ...square,\n              val: true,\n              type: \"openset\"\n            };\n          }\n        }\n\n        if (square.type === \"end\") {\n          let cameFrom = path[index];\n\n          while (cameFrom) {\n            const prevSquare = memState.grid[cameFrom.x + cameFrom.y * memState.cols];\n\n            if (prevSquare.type !== \"start\" && prevSquare.type !== \"end\") {\n              memState.grid[cameFrom.x + cameFrom.y * memState.cols] = { ...memState.grid[cameFrom.x + cameFrom.y * memState.cols],\n                val: true,\n                type: \"path\"\n              };\n            }\n\n            cameFrom = path[cameFrom.x + cameFrom.y * memState.cols];\n          }\n        }\n\n        return { ...square\n        };\n      })\n    }); // setState((memState) => ({\n    //     ...memState,\n    //     //state object is immutable so updates have to be done this way\n    //     grid: memState.grid.map((square, index) => {\n    //         if(square.type === \"end\"){\n    //             let cameFrom = path[index];\n    //             while(cameFrom){\n    //                 const prevSquare = memState.grid[cameFrom.x + (cameFrom.y * memState.cols)];\n    //                 if(prevSquare.type !== \"start\" && prevSquare.type !== \"end\"){\n    //                     memState.grid[cameFrom.x + (cameFrom.y * memState.cols)] = {\n    //                         ...memState.grid[cameFrom.x + (cameFrom.y * memState.cols)],\n    //                         val: true,\n    //                         type: \"path\"\n    //                     }\n    //                 }\n    //                 cameFrom = path[cameFrom.x + (cameFrom.y * memState.cols)];\n    //             }\n    //             return {...square};\n    //         }\n    //         return {...square};\n    //     })\n    // }));\n    // }\n  };\n\n  const renderSquare = (x, y, val) => {\n    return /*#__PURE__*/React.createElement(Square //Minus 4 accounts for width and height\n    , {\n      width: memState.cols > memState.rows ? props.winDimensions.width / memState.cols - 4 : props.winDimensions.width / memState.cols * (Math.min(props.winDimensions.width / memState.cols, props.winDimensions.height / memState.rows) / Math.max(props.winDimensions.width / memState.cols, props.winDimensions.height / memState.rows)) - 4,\n      height: memState.rows === memState.cols ? props.winDimensions.height / memState.rows - 4 //converting aspect ration of the square to 1:1 by multiplying the height by minimum of the width and height divided by the maximum of the width and height\n      : props.winDimensions.height / memState.rows * (Math.min(props.winDimensions.width / memState.cols, props.winDimensions.height / memState.rows) / Math.max(props.winDimensions.width / memState.cols, props.winDimensions.height / memState.rows)) - 4,\n      x: x,\n      y: y,\n      val: val,\n      squareClick: (x, y) => handleClick(x, y),\n      type: memState.grid[x + y * memState.cols].type,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 13\n      }\n    });\n  };\n\n  const renderMap = () => {\n    //TODO: use x y variables set per index for this instead\n    //space-time O(1)\n    const rows = Array(memState.rows); //each row will contain an array of 50 available indexes\n\n    const cols = Array(memState.rows); //time O(n)\n\n    for (let i = 0; i < memState.grid.length; i++) {\n      if (i % memState.cols === 0) {\n        cols[i / memState.cols] = Array(memState.cols); //space-time O(1)\n\n        rows[i] = /*#__PURE__*/React.createElement(\"div\", {\n          className: \"grid-row\",\n          key: i / memState.cols,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 21\n          }\n        }, cols[i / memState.cols]);\n      }\n\n      let square = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"grid-col\",\n        key: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 17\n        }\n      }, renderSquare(i % memState.cols, Math.abs((i - i % memState.cols) / memState.cols), memState.grid[i].val));\n      cols[(i - i % memState.cols) / memState.cols][i % memState.cols] = square;\n    }\n\n    const map = rows;\n    return map;\n  };\n\n  const handleClick = (x, y) => {\n    switch (memState.itemState) {\n      case \"start\":\n        setState(memState => ({ ...memState,\n          //state object is immutable so updates have to be done this way\n          grid: memState.grid.map((square, index) => {\n            if (index === x + y * memState.cols) {\n              // console.log(x,y,square.type,memState.itemState);\n              if (square.type === memState.itemState || !square.val) {\n                return square.val ? { ...square,\n                  val: false,\n                  type: null\n                } : { ...square,\n                  val: true,\n                  type: memState.itemState\n                };\n              }\n            }\n\n            if (square.type === memState.itemState && square.val && !memState.grid[x + y * memState.cols].val) {\n              return { ...square,\n                val: false,\n                type: null\n              };\n            }\n\n            return { ...square\n            };\n          })\n        }));\n        break;\n\n      case \"wall\":\n        setState(memState => ({ ...memState,\n          //state object is immutable so updates have to be done this way\n          grid: memState.grid.map((square, index) => {\n            if (index === x + y * memState.cols) {\n              // console.log(x,y,square.type,state.itemState);\n              if (square.type === memState.itemState || !square.val) {\n                return square.val ? { ...square,\n                  val: false,\n                  type: null\n                } : { ...square,\n                  val: true,\n                  type: memState.itemState\n                };\n              }\n            }\n\n            return { ...square\n            };\n          })\n        }));\n        break;\n\n      case \"end\":\n        setState(memState => ({ ...memState,\n          //state object is immutable so updates have to be done this way\n          grid: memState.grid.map((square, index) => {\n            if (index === x + y * memState.cols) {\n              // console.log(x,y,square.type,state.itemState);\n              if (square.type === memState.itemState || !square.val) {\n                return square.val ? { ...square,\n                  val: false,\n                  type: null\n                } : { ...square,\n                  val: true,\n                  type: memState.itemState\n                };\n              }\n            }\n\n            if (square.type === memState.itemState && square.val && !memState.grid[x + y * memState.cols].val) {\n              return { ...square,\n                val: false,\n                type: null\n              };\n            }\n\n            return { ...square\n            };\n          })\n        }));\n        break;\n\n      default:\n        break;\n    }\n\n    return;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"map\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 9\n    }\n  }, console.time(), renderMap(), console.timeEnd());\n}\n\nexport default Map;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Map/Map.js"],"names":["React","useState","useContext","useEffect","useMemo","Square","MenuContext","AStar","Map","props","menuState","dispatch","state","setState","rows","cols","grid","Array","fill","val","type","map","square","i","x","y","Math","abs","itemState","memState","clear","index","run","console","time","states","heuristic","timeEnd","newState","path","openSet","length","drawPath","isDrawn","log","point","cameFrom","prevSquare","renderSquare","winDimensions","width","min","height","max","handleClick","renderMap"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect, useMemo } from 'react';\nimport './Map.css';\nimport Square from '../Square/Square';\nimport MenuContext from '../MenuContext';\nimport AStar from '../Algorithms/AStar'\n\nfunction Map(props) {\n    const {menuState, dispatch} = useContext(MenuContext);\n    const [state, setState] = useState({\n        rows: 15,\n        cols: 50,\n        grid: new Array(15*50).fill({val: false, type: null}).map((square, i) => {\n            return {\n                ...square,\n                x: i % 50,\n                y: Math.abs((i - (i % 50)) / 50)\n            }\n        }),//space-time O(1)\n        itemState: menuState.itemState\n    })\n\n    const { state: memState } = useMemo(() => ({state}), [state])\n\n    //If item button is changed\n    useEffect(() => {\n        setState((memState) => {\n            return {\n                ...memState,\n                itemState: menuState.itemState\n            }\n        })\n    }, [menuState.itemState]);\n\n    //If menu clear button is clicked\n    useEffect(() => {\n        if(menuState.clear === true){\n            setState((memState) => ({\n                ...memState,\n                grid: memState.grid.map((square, index) => {\n                    if(square.type !== \"start\" && square.type !== \"end\"){\n                        return {...square, val: false, type: null}\n                    }\n            \n                    return {...square}\n                })\n            }))\n            return dispatch({type: \"cleared\"});\n        }\n    }, [menuState.clear, dispatch]);\n    \n    //If run menu button is clicked\n    useEffect(() => {\n        if(menuState.run === true){\n            // if(menuState.isDrawn){\n            //     clearPath();\n            //     dispatch({type: \"drawn\"});\n            // }\n\n            //Visualize path finding algorithm logic\n            console.time()\n            const states = AStar(memState.rows, memState.cols, memState.grid, menuState.heuristic, memState, setState);\n            console.timeEnd()\n\n            states.map((newState) => {\n                if(newState.path && newState.openSet.length > 0){\n                    drawPath(newState);\n                }\n            })        \n\n            return dispatch({type: \"complete\"});\n        }\n    }, [menuState.run, menuState.isDrawn, menuState.heuristic, memState.grid, memState.rows, memState.cols, dispatch]);\n\n    useEffect(() => {\n        console.log(\"heloo\")\n    },[memState.openSet, memState.path]);\n\n    // const clearPath = () => {\n    //     setState((memState) => ({\n    //         ...memState,\n    //         grid: memState.grid.map((square, index) => {\n    //             console.log(\"clearing\");\n    //             console.log(memState.grid[index-1]);\n    //             if(square.type !== \"start\" && square.type !== \"end\"){\n    //                 memState.grid[index] = {\n    //                     ...square,\n    //                     val: false,\n    //                     type: \"path\"\n    //                 }\n    //             }\n\n    //             return {...square}\n    //         })\n    //     }))\n    //     return;\n    // }\n\n    const drawPath = (newState) => {\n        // if(runRef.current){\n            const openSet = newState.openSet[0];\n            const path = newState.path;\n            \n            setState({\n                ...newState,\n                //state object is immutable so updates have to be done this way\n                grid: memState.grid.map((square, index) => {\n                    if(path[index]){\n                        if(square.type !== \"start\" && square.type !== \"end\" && square.type !== \"path\" && square.type !== \"openset\"){\n                            memState.grid[index] = {\n                                ...square,\n                                val: true,\n                                type: \"neighbors\"\n                            }\n                        }\n                    }\n\n                    console.log\n                    if(openSet.point.x + (openSet.point.y * memState.cols) === index){\n                        if(square.type !== \"start\" && square.type !== \"end\" && square.type !== \"path\"){\n                            memState.grid[index] = {\n                                ...square,\n                                val: true,\n                                type: \"openset\"\n                            }\n                        }\n                    }\n\n                    if(square.type === \"end\"){\n                        let cameFrom = path[index];\n\n                        while(cameFrom){\n                            const prevSquare = memState.grid[cameFrom.x + (cameFrom.y * memState.cols)];\n                            \n                            if(prevSquare.type !== \"start\" && prevSquare.type !== \"end\"){\n                                memState.grid[cameFrom.x + (cameFrom.y * memState.cols)] = {\n                                    ...memState.grid[cameFrom.x + (cameFrom.y * memState.cols)],\n                                    val: true,\n                                    type: \"path\"\n                                }\n                            }\n\n                            cameFrom = path[cameFrom.x + (cameFrom.y * memState.cols)];\n                        }\n                    }\n                    return {...square};\n                })\n            });\n        // setState((memState) => ({\n        //     ...memState,\n        //     //state object is immutable so updates have to be done this way\n        //     grid: memState.grid.map((square, index) => {\n        //         if(square.type === \"end\"){\n        //             let cameFrom = path[index];\n\n        //             while(cameFrom){\n        //                 const prevSquare = memState.grid[cameFrom.x + (cameFrom.y * memState.cols)];\n                        \n        //                 if(prevSquare.type !== \"start\" && prevSquare.type !== \"end\"){\n        //                     memState.grid[cameFrom.x + (cameFrom.y * memState.cols)] = {\n        //                         ...memState.grid[cameFrom.x + (cameFrom.y * memState.cols)],\n        //                         val: true,\n        //                         type: \"path\"\n        //                     }\n        //                 }\n\n        //                 cameFrom = path[cameFrom.x + (cameFrom.y * memState.cols)];\n        //             }\n                    \n        //             return {...square};\n        //         }\n\n        //         return {...square};\n        //     })\n        // }));\n        // }\n    }\n    \n    const renderSquare = (x,y,val) => {\n        return (\n            <Square\n                //Minus 4 accounts for width and height\n                width={\n                    memState.cols > memState.rows\n                        ? (props.winDimensions.width / memState.cols) - 4\n                        : (props.winDimensions.width / memState.cols) * (Math.min((props.winDimensions.width / memState.cols),(props.winDimensions.height / memState.rows)) / Math.max((props.winDimensions.width / memState.cols),(props.winDimensions.height / memState.rows))) - 4 \n                }\n                height={\n                    memState.rows === memState.cols\n                        ? (props.winDimensions.height / memState.rows) - 4\n                        //converting aspect ration of the square to 1:1 by multiplying the height by minimum of the width and height divided by the maximum of the width and height\n                        : (props.winDimensions.height / memState.rows) * (Math.min((props.winDimensions.width / memState.cols),(props.winDimensions.height / memState.rows)) / Math.max((props.winDimensions.width / memState.cols),(props.winDimensions.height / memState.rows))) - 4\n                }\n                x={x}\n                y={y}\n                val={val}\n                squareClick={(x, y) => handleClick(x, y)}\n                type={memState.grid[x + (y * memState.cols)].type}\n            />\n        )\n    }\n\n    const renderMap = () => {\n        //TODO: use x y variables set per index for this instead\n        //space-time O(1)\n        const rows = Array(memState.rows);\n        //each row will contain an array of 50 available indexes\n        const cols = Array(memState.rows);\n\n        //time O(n)\n        for(let i = 0; i < memState.grid.length; i++){\n            if(i % memState.cols === 0){\n                cols[i / memState.cols] = Array(memState.cols)//space-time O(1)\n\n                rows[i] = (\n                    <div className=\"grid-row\" key={i / memState.cols}>\n                        {cols[i / memState.cols]}\n                    </div>\n                )\n            }\n\n            let square = (\n                <div className=\"grid-col\" key={i}>\n                    {renderSquare(i % memState.cols, Math.abs((i - (i % memState.cols)) / memState.cols), memState.grid[i].val)}\n                </div>\n            )\n\n            cols[(i - (i % memState.cols)) / memState.cols][i % memState.cols] = square;\n        }\n\n        const map = rows;\n\n        return map;\n    }\n\n    const handleClick = (x,y) => {\n        switch (memState.itemState) {\n            case \"start\":\n                setState((memState) => ({\n                    ...memState,\n                    //state object is immutable so updates have to be done this way\n                    grid: memState.grid.map((square, index) => {\n                        if(index === x + (y * memState.cols)){\n                            // console.log(x,y,square.type,memState.itemState);\n                            if(square.type === memState.itemState || !square.val){\n                                return square.val\n                                    ? {...square, val: false, type: null}\n                                    : {...square, val: true, type: memState.itemState}\n                            }\n                        }\n\n                        if(square.type === memState.itemState && square.val && !memState.grid[x + (y * memState.cols)].val){\n                            return {...square, val: false, type: null}\n                        }\n\n                        return {...square}\n                    })\n                }));\n                \n                break;\n\n            case \"wall\":\n                setState((memState) => ({\n                    ...memState,\n                    //state object is immutable so updates have to be done this way\n                    grid: memState.grid.map((square, index) => {\n                        if(index === x + (y * memState.cols)){\n                            // console.log(x,y,square.type,state.itemState);\n                            if(square.type === memState.itemState || !square.val){\n                                return square.val\n                                    ? {...square, val: false, type: null}\n                                    : {...square, val: true, type: memState.itemState}\n                            }\n                        }\n\n                        return {...square}\n                    })\n                }));\n\n                break;\n\n            case \"end\":\n                setState((memState) => ({\n                    ...memState,\n                    //state object is immutable so updates have to be done this way\n                    grid: memState.grid.map((square, index) => {\n                        if(index === x + (y * memState.cols)){\n                            // console.log(x,y,square.type,state.itemState);\n                            if(square.type === memState.itemState || !square.val){\n                                return square.val\n                                    ? {...square, val: false, type: null}\n                                    : {...square, val: true, type: memState.itemState}\n                            }\n                        }\n\n                        if(square.type === memState.itemState && square.val && !memState.grid[x + (y * memState.cols)].val){\n                            return {...square, val: false, type: null}\n                        }\n\n                        return {...square}\n                    })\n                }));\n\n                break;\n        \n            default:\n                break;\n        }\n\n        return;\n    }\n    \n\n\n    return (\n        <div id=\"map\">\n            {console.time()}\n                {renderMap()}\n            {console.timeEnd()}\n        </div>\n    )\n}\n\nexport default Map;"]},"metadata":{},"sourceType":"module"}