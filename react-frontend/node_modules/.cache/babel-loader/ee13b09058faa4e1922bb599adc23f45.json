{"ast":null,"code":"import Stack from '../Algorithms/Stack';\n\nfunction getIndex(x, y, cols) {\n  return x + y * cols;\n}\n\nfunction getPoints(gridMap) {\n  let startPoint = null;\n  let endPoints = [];\n  gridMap.map(square => {\n    if (square.val && square.type === \"start\") {\n      // console.log(square);\n      startPoint = square;\n      return null;\n    }\n\n    if (square.val && square.type === \"end\") {\n      // console.log(square);\n      endPoints.push(square);\n      return null;\n    }\n\n    return null;\n  });\n  return [startPoint, endPoints];\n}\n\nfunction getNeighbors(point, gridMap, rows, cols) {\n  //Point                                 Index\n  // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n  // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n  // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n  // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n  // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n  // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n  // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n  // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n  const neighbors = new Array(8);\n\n  if (point.x > 0) {\n    const left = getIndex(point.x - 1, point.y, cols);\n\n    if (gridMap[left].type !== \"wall\" && gridMap[left].type !== \"start\") {\n      neighbors[0] = gridMap[left];\n    }\n  }\n\n  if (point.x < cols - 1) {\n    const right = getIndex(point.x + 1, point.y, cols);\n\n    if (gridMap[right].type !== \"wall\" && gridMap[right].type !== \"start\") {\n      neighbors[1] = gridMap[right];\n    }\n  }\n\n  if (point.y > 0) {\n    const up = getIndex(point.x, point.y - 1, cols);\n\n    if (gridMap[up].type !== \"wall\" && gridMap[up].type !== \"start\") {\n      neighbors[2] = gridMap[up];\n    }\n  }\n\n  if (point.y < rows - 1) {\n    const down = getIndex(point.x, point.y + 1, cols);\n\n    if (gridMap[down].type !== \"wall\" && gridMap[down].type !== \"start\") {\n      neighbors[3] = gridMap[down];\n    }\n  }\n\n  if (point.x > 0 && point.y > 0) {\n    const topLeft = getIndex(point.x - 1, point.y - 1, cols);\n\n    if (gridMap[topLeft].type !== \"wall\" && gridMap[topLeft].type !== \"start\") {\n      neighbors[4] = gridMap[topLeft];\n    }\n  }\n\n  if (point.x < cols - 1 && point.y > 0) {\n    const topRight = getIndex(point.x + 1, point.y - 1, cols);\n\n    if (gridMap[topRight].type !== \"wall\" && gridMap[topRight].type !== \"start\") {\n      neighbors[5] = gridMap[topRight];\n    }\n  }\n\n  if (point.x > 0 && point.y < rows - 1) {\n    const bottomLeft = getIndex(point.x - 1, point.y + 1, cols);\n\n    if (gridMap[bottomLeft].type !== \"wall\" && gridMap[bottomLeft].type !== \"start\") {\n      neighbors[6] = gridMap[bottomLeft];\n    }\n  }\n\n  if (point.x < cols - 1 && point.y < rows - 1) {\n    const bottomRight = getIndex(point.x + 1, point.y + 1, cols);\n\n    if (gridMap[bottomRight].type !== \"wall\" && gridMap[bottomRight].type !== \"start\") {\n      neighbors[7] = gridMap[bottomRight];\n    }\n  }\n\n  return neighbors;\n}\n\nfunction DFS(rows, cols, gridMap, memState, setState) {\n  const [startPoint, endPoints] = getPoints(gridMap);\n  const stack = new Stack();\n  const discovered = {};\n  const cameFrom = {};\n  const points = {};\n  const states = []; //TODO: Bug, clears grid but then returns it to its previous state\n\n  const newState = { ...memState,\n    grid: new Array(rows * cols).fill({\n      val: false,\n      type: null\n    }).map((square, i) => {\n      return { ...square,\n        x: i % cols,\n        y: Math.abs((i - i % cols) / cols)\n      };\n    })\n  };\n  states.push(newState);\n  const goal = endPoints[0];\n\n  if (!startPoint || !endPoints) {\n    console.log(\"Map must have a start point, and an end point\");\n    return \"Map must have a start point, and an end point\";\n  }\n\n  points[getIndex(startPoint.x, startPoint.y, cols)] = startPoint;\n  cameFrom[getIndex(startPoint.x, startPoint.y, cols)] = null;\n  stack.push(points[getIndex(startPoint.x, startPoint.y, cols)]);\n\n  while (stack.getStack().length > 0) {\n    console.log(discovered);\n    console.log(Array.from(stack.getStack()));\n    const current = stack.top();\n    console.log(\"current\", current);\n    stack.pop();\n    const newState = { ...memState,\n      grid: memState.grid.map((square, index) => {\n        if (current.x === square.x && current.y === square.y) {\n          if (current.type !== \"start\" && current.type !== \"end\") {\n            memState.grid[index] = { ...memState.grid[index],\n              val: true,\n              type: \"neighbors\"\n            };\n          }\n\n          return { ...square\n          };\n        }\n\n        return { ...square\n        };\n      })\n    };\n    states.push(newState);\n\n    if (!discovered[getIndex(current.x, current.y, cols)]) {\n      if (current.x === goal.x && current.y === goal.y) {\n        const state = states[states.length - 1];\n        setState({ // return {\n          ...state,\n          //state object is immutable so updates have to be done this way\n          grid: state.grid.map((square, index) => {\n            if (cameFrom[index]) {\n              if (square.type === \"end\") {\n                let prev = cameFrom[index];\n\n                while (prev) {\n                  if (prev.type !== \"start\" && prev.type !== \"end\") {\n                    state.grid[getIndex(prev.x, prev.y, state.cols)] = { ...state.grid[getIndex(prev.x, prev.y, state.cols)],\n                      val: true,\n                      type: \"path\"\n                    };\n                  }\n\n                  prev = cameFrom[getIndex(prev.x, prev.y, state.cols)];\n                }\n\n                return { ...square\n                };\n              }\n\n              return { ...square\n              };\n            }\n\n            return { ...square\n            };\n          })\n        });\n        console.log(\"PATH FOUND!!!!!\");\n        return states;\n      }\n\n      discovered[getIndex(current.x, current.y, cols)] = \"discovered\";\n      const neighbors = getNeighbors(current, gridMap, rows, cols);\n      neighbors.map(neighbor => {\n        points[getIndex(neighbor.x, neighbor.y, cols)] = neighbor;\n        cameFrom[getIndex(neighbor.x, neighbor.y, cols)] = current;\n        stack.push(points[getIndex(neighbor.x, neighbor.y, cols)]);\n        const newState = { ...memState,\n          grid: memState.grid.map((square, index) => {\n            if (neighbor.x === square.x && neighbor.y === square.y) {\n              if (neighbor.type !== \"start\" && neighbor.type !== \"end\") {\n                memState.grid[index] = { ...memState.grid[index],\n                  val: true,\n                  type: \"openset\"\n                };\n              }\n\n              return { ...square\n              };\n            }\n\n            return { ...square\n            };\n          })\n        };\n        states.push(newState);\n        return null;\n      });\n    }\n  }\n\n  return states;\n}\n\nexport default DFS;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Algorithms/DFS.js"],"names":["Stack","getIndex","x","y","cols","getPoints","gridMap","startPoint","endPoints","map","square","val","type","push","getNeighbors","point","rows","neighbors","Array","left","right","up","down","topLeft","topRight","bottomLeft","bottomRight","DFS","memState","setState","stack","discovered","cameFrom","points","states","newState","grid","fill","i","Math","abs","goal","console","log","getStack","length","from","current","top","pop","index","state","prev","neighbor"],"mappings":"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","sourcesContent":["import Stack from '../Algorithms/Stack'\n\nfunction getIndex(x, y, cols){\n    return (x + (y * cols));\n}\n\nfunction getPoints(gridMap){\n    let startPoint = null;\n    let endPoints = [];\n    \n    gridMap.map((square) => {\n        if(square.val && square.type ===  \"start\"){\n            // console.log(square);\n            startPoint = square;\n\n            return null;\n        }\n\n        if(square.val && square.type === \"end\"){\n            // console.log(square);\n            endPoints.push(square);\n\n            return null;\n        }\n\n        return null;\n    })\n\n    return [startPoint, endPoints];\n}\n\n\nfunction getNeighbors(point, gridMap, rows, cols){\n    //Point                                 Index\n    // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n    // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n    // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n    // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n    // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n    // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n    // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n    // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n\n    const neighbors = new Array(8);\n\n    if(point.x > 0){\n        const left = getIndex((point.x-1), (point.y), cols);\n\n        if(gridMap[left].type !== \"wall\" && gridMap[left].type !== \"start\"){\n            neighbors[0] = gridMap[left];\n        }\n    }\n    if(point.x < cols-1){\n        const right = getIndex((point.x+1), (point.y), cols);\n\n        if(gridMap[right].type !== \"wall\" && gridMap[right].type !== \"start\"){\n            neighbors[1] = gridMap[right];\n        }\n    }\n    if(point.y > 0){\n        const up = getIndex((point.x), (point.y-1), cols);\n\n        if(gridMap[up].type !== \"wall\" && gridMap[up].type !== \"start\"){\n            neighbors[2] = gridMap[up];\n        }\n    }\n    if(point.y < rows-1){\n        const down = getIndex((point.x), (point.y+1), cols);\n\n        if(gridMap[down].type !== \"wall\" && gridMap[down].type !== \"start\"){\n            neighbors[3] = gridMap[down];\n        }\n    }\n    if(point.x > 0 && point.y > 0){\n        const topLeft = getIndex((point.x-1), (point.y-1), cols);\n\n        if(gridMap[topLeft].type !== \"wall\" && gridMap[topLeft].type !== \"start\"){\n            neighbors[4] = gridMap[topLeft];\n        }\n    }\n    if(point.x < cols-1 && point.y > 0){\n        const topRight = getIndex((point.x+1), (point.y-1), cols);\n\n        if(gridMap[topRight].type !== \"wall\" && gridMap[topRight].type !== \"start\"){\n            neighbors[5] = gridMap[topRight];\n        }\n    }\n    if(point.x > 0 && point.y < rows-1){\n        const bottomLeft  = getIndex((point.x-1), (point.y+1), cols);\n\n        if(gridMap[bottomLeft].type !== \"wall\" && gridMap[bottomLeft].type !== \"start\"){\n            neighbors[6] = gridMap[bottomLeft];\n        }\n    }\n    if(point.x < cols-1 && point.y < rows-1){\n        const bottomRight = getIndex((point.x+1), (point.y+1), cols);\n\n        if(gridMap[bottomRight].type !== \"wall\" && gridMap[bottomRight].type !== \"start\"){\n            neighbors[7] = gridMap[bottomRight];\n        }\n    }\n\n    return neighbors;\n}\n\nfunction DFS(rows, cols, gridMap, memState, setState){\n    const [startPoint, endPoints] = getPoints(gridMap);\n    const stack = new Stack();\n    const discovered = {};\n    const cameFrom = {};\n    const points = {};\n    const states = [];\n\n    //TODO: Bug, clears grid but then returns it to its previous state\n    const newState = {\n        ...memState,\n        grid: new Array(rows*cols).fill({val: false, type: null}).map((square, i) => {\n            return {\n                ...square,\n                x: i % cols,\n                y: Math.abs((i - (i % cols)) / cols)\n            }\n        })\n    }\n    states.push(newState);\n\n    const goal = endPoints[0];\n\n    if(!startPoint || !endPoints){\n        console.log(\"Map must have a start point, and an end point\");\n        return \"Map must have a start point, and an end point\"; \n    }\n\n    points[getIndex(startPoint.x, startPoint.y, cols)] = startPoint;\n    cameFrom[getIndex(startPoint.x, startPoint.y, cols)] = null\n\n    stack.push(points[getIndex(startPoint.x, startPoint.y, cols)]);\n\n    while(stack.getStack().length > 0){\n        console.log(discovered);\n        console.log(Array.from(stack.getStack()));\n        const current = stack.top();\n        console.log(\"current\",current);\n\n        stack.pop();\n        \n        const newState = {\n            ...memState,\n            grid: memState.grid.map((square, index) => {\n                if(current.x === square.x && current.y === square.y){\n                    if(current.type !== \"start\" && current.type !== \"end\"){\n                        memState.grid[index] = {\n                            ...memState.grid[index],\n                            val: true,\n                            type: \"neighbors\"\n                        }\n                    }\n                    return {...square}\n                }\n                return {...square}\n            })\n        }\n        states.push(newState);\n\n        if(!discovered[getIndex(current.x, current.y, cols)]){\n            if(current.x === goal.x && current.y === goal.y){\n                const state = states[states.length-1];\n                setState({\n                    // return {\n                    ...state,\n                    //state object is immutable so updates have to be done this way\n                    grid: state.grid.map((square, index) => {\n                        if(cameFrom[index]){\n                            if(square.type === \"end\"){\n                                let prev = cameFrom[index];\n                    \n                                while(prev){                   \n                                    if(prev.type !== \"start\" && prev.type !== \"end\"){\n                                        state.grid[getIndex(prev.x,prev.y,state.cols)] = {\n                                            ...state.grid[getIndex(prev.x,prev.y,state.cols)],\n                                            val: true,\n                                            type: \"path\"\n                                        }\n                                    }\n                                    prev = cameFrom[getIndex(prev.x,prev.y,state.cols)];\n                                }\n                                return {...square};\n                            }\n                            return {...square};\n                        }\n                        return {...square};\n                    })\n                 \n                });\n    \n                console.log(\"PATH FOUND!!!!!\");\n                return states;\n            }\n\n            discovered[getIndex(current.x, current.y, cols)] = \"discovered\";\n\n            const neighbors = getNeighbors(current, gridMap, rows, cols);\n    \n            neighbors.map((neighbor) => {\n                points[getIndex(neighbor.x, neighbor.y, cols)] = neighbor;\n\n                cameFrom[getIndex(neighbor.x, neighbor.y, cols)] = current;\n\n                stack.push(points[getIndex(neighbor.x, neighbor.y, cols)]);\n\n                const newState = {\n                    ...memState,\n                    grid: memState.grid.map((square, index) => {\n                        if(neighbor.x === square.x && neighbor.y === square.y){\n                            if(neighbor.type !== \"start\" && neighbor.type !== \"end\"){\n                                memState.grid[index] = {\n                                    ...memState.grid[index],\n                                    val: true,\n                                    type: \"openset\"\n                                }\n                            }\n                            return {...square}\n                        }\n                        return {...square}\n                    })\n                }\n                states.push(newState); \n    \n                return null;\n            });\n        }\n    }\n    return states;\n}\n\nexport default DFS;"]},"metadata":{},"sourceType":"module"}