{"ast":null,"code":"import { ApolloClient, InMemoryCache, ApolloLink, HttpLink } from '@apollo/client';\nconst user = localStorage.getItem('user');\nconst accessToken = user === null ? JSON.parse(user).accessToken : null;\nconst httpLink = new HttpLink({\n  uri: 'http://localhost:3000/graphql'\n});\nconst authLink = new ApolloLink((operation, forward) => {\n  // Use the setContext method to set the HTTP headers.\n  operation.setContext({\n    headers: {\n      authorization: accessToken ? `Bearer ${accessToken}` : \"\"\n    }\n  }); // Call the next link in the middleware chain.\n\n  return forward(operation);\n});\nexport default new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache({\n    addTypename: false\n  }),\n  credentials: 'include'\n});","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/ApolloConfig.js"],"names":["ApolloClient","InMemoryCache","ApolloLink","HttpLink","user","localStorage","getItem","accessToken","JSON","parse","httpLink","uri","authLink","operation","forward","setContext","headers","authorization","link","concat","cache","addTypename","credentials"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,EAAsCC,UAAtC,EAAkDC,QAAlD,QAAkE,gBAAlE;AAEA,MAAMC,IAAI,GAAGC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAb;AACA,MAAMC,WAAW,GAAGH,IAAI,KAAK,IAAT,GAAgBI,IAAI,CAACC,KAAL,CAAWL,IAAX,EAAiBG,WAAjC,GAA+C,IAAnE;AAEA,MAAMG,QAAQ,GAAG,IAAIP,QAAJ,CAAa;AAAEQ,EAAAA,GAAG,EAAE;AAAP,CAAb,CAAjB;AAEA,MAAMC,QAAQ,GAAG,IAAIV,UAAJ,CAAe,CAACW,SAAD,EAAYC,OAAZ,KAAwB;AACpD;AACAD,EAAAA,SAAS,CAACE,UAAV,CAAqB;AACnBC,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAEV,WAAW,GAAI,UAASA,WAAY,EAAzB,GAA6B;AADhD;AADU,GAArB,EAFoD,CAQpD;;AACA,SAAOO,OAAO,CAACD,SAAD,CAAd;AACH,CAVgB,CAAjB;AAYA,eAAe,IAAIb,YAAJ,CAAiB;AAC5BkB,EAAAA,IAAI,EAAEN,QAAQ,CAACO,MAAT,CAAgBT,QAAhB,CADsB;AAE5BU,EAAAA,KAAK,EAAE,IAAInB,aAAJ,CAAkB;AACrBoB,IAAAA,WAAW,EAAE;AADQ,GAAlB,CAFqB;AAK5BC,EAAAA,WAAW,EAAE;AALe,CAAjB,CAAf","sourcesContent":["import { ApolloClient, InMemoryCache, ApolloLink, HttpLink } from '@apollo/client';\n\nconst user = localStorage.getItem('user');\nconst accessToken = user === null ? JSON.parse(user).accessToken : null;\n\nconst httpLink = new HttpLink({ uri: 'http://localhost:3000/graphql' });\n\nconst authLink = new ApolloLink((operation, forward) => {\n    // Use the setContext method to set the HTTP headers.\n    operation.setContext({\n      headers: {\n        authorization: accessToken ? `Bearer ${accessToken}` : \"\"\n      }\n    });\n  \n    // Call the next link in the middleware chain.\n    return forward(operation);\n});\n\nexport default new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache({\n        addTypename: false\n    }),\n    credentials: 'include'\n});"]},"metadata":{},"sourceType":"module"}