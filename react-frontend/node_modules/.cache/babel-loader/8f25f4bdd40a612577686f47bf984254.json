{"ast":null,"code":"import MinHeap from './MinHeap';\n\nfunction heuristic(point, endPoint) {\n  //TODO make this a switch for the different types of heuristic functions\n  const distance = Math.sqrt(Math.pow(point.x - endPoint.x, 2) + Math.pow(point.y - endPoint.y, 2));\n  return [endPoint, distance];\n}\n\nfunction getPoints(gridMap) {\n  let startPoint = null;\n  let wallPoints = [];\n  let endPoints = [];\n  gridMap.map(square => {\n    if (square.val && square.type === \"start\") {\n      // console.log(square);\n      startPoint = square;\n      return null;\n    }\n\n    if (square.val && square.type === \"wall\") {\n      // console.log(square);\n      wallPoints.push(square);\n      return null;\n    }\n\n    if (square.val && square.type === \"end\") {\n      // console.log(square);\n      endPoints.push(square);\n      return null;\n    }\n\n    return null;\n  });\n  return [startPoint, wallPoints, endPoints];\n}\n\nfunction getNeighbors(point, gridMap, cols) {\n  //Point                                 Index\n  // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n  // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n  // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n  // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n  // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n  // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n  // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n  // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n  const left = point.x - 1 + point.y * cols;\n  const right = point.x + 1 + point.y * cols;\n  const up = point.x + (point.y - 1 * cols);\n  const down = point.x + (point.y + 1 * cols);\n  const topLeft = point.x - 1 + (point.y - 1 * cols);\n  const topRight = point.x + 1 + (point.y - 1 * cols);\n  const bottomLeft = point.x - 1 + (point.y + 1 * cols);\n  const bottomRight = point.x + 1 + (point.y + 1 * cols);\n  const neighbors = new Array(8);\n  console.log(); //Grid was setup so whenever a point has a type it has a value otherwise it's null\n\n  if (gridMap[left] && gridMap[left].type !== \"wall\") {\n    neighbors[0] = gridMap[left];\n  }\n\n  if (gridMap[right] && gridMap[right].type !== \"wall\") {\n    neighbors[1] = gridMap[right];\n  }\n\n  if (gridMap[up] && gridMap[up].type !== \"wall\") {\n    neighbors[2] = gridMap[up];\n  }\n\n  if (gridMap[down] && gridMap[down].type !== \"wall\") {\n    neighbors[3] = gridMap[down];\n  }\n\n  if (gridMap[topLeft] && gridMap[topLeft].type !== \"wall\") {\n    neighbors[4] = gridMap[topLeft];\n  }\n\n  if (gridMap[topRight] && gridMap[topRight].type !== \"wall\") {\n    neighbors[5] = gridMap[topRight];\n  }\n\n  if (gridMap[bottomLeft] && gridMap[bottomLeft].type !== \"wall\") {\n    neighbors[6] = gridMap[bottomLeft];\n  }\n\n  if (gridMap[bottomRight] && gridMap[bottomRight].type !== \"wall\") {\n    neighbors[7] = gridMap[bottomRight];\n  }\n\n  return neighbors;\n}\n\nfunction AStar(rows, cols, gridMap) {\n  const [startPoint, wallPoints, endPoints] = getPoints(gridMap);\n  let points = {};\n  let openSet = new MinHeap();\n  let cameFrom = {};\n  let gScore = {};\n  let fScore = {};\n  let goal = null;\n\n  if (!startPoint || !endPoints) {\n    console.log(\"Map must have a start point, and an end point\");\n    return \"Map must have a start point, and an end point\";\n  }\n\n  gScore[startPoint.x + startPoint.y * cols] = 0;\n  const endPointDistances = new Array(endPoints.length);\n  endPoints.map((endPoint, i) => {\n    const heuristicCost = heuristic(startPoint, endPoint);\n    endPointDistances[i] = [heuristicCost[0], gScore[startPoint.x + startPoint.y * cols] + heuristicCost[1]];\n    return null;\n  });\n  console.log(endPointDistances);\n  endPointDistances.sort((a, b) => {\n    if (a[1] > b[1]) {\n      return 1;\n    }\n\n    if (a[1] < b[1]) {\n      return -1;\n    }\n\n    return 0;\n  });\n  goal = endPointDistances[0][0];\n  fScore[startPoint.x + startPoint.y * cols] = endPointDistances[0][1];\n  points[fScore[startPoint.x + startPoint.y * cols]] = startPoint;\n  openSet.insert(fScore[startPoint.x + startPoint.y * cols]);\n\n  while (openSet.length !== 0) {\n    console.log(\"points\", points);\n    console.log(\"heap\", openSet.peek());\n    console.log(points[openSet.peek().toString()]);\n    console.log(openSet.getHeap().toString());\n    const current = points[openSet.peek().toString()];\n    console.log(current);\n    console.log(openSet);\n    openSet.extract();\n\n    if (current.x === goal.x && current.y === goal.y) {\n      console.log(\"GOOOAAAAALLLLLLL\");\n      return;\n    }\n\n    const neighbors = getNeighbors(current, gridMap, cols);\n    console.log(neighbors);\n  }\n}\n\nexport default AStar;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Algorithms/AStar.js"],"names":["MinHeap","heuristic","point","endPoint","distance","Math","sqrt","pow","x","y","getPoints","gridMap","startPoint","wallPoints","endPoints","map","square","val","type","push","getNeighbors","cols","left","right","up","down","topLeft","topRight","bottomLeft","bottomRight","neighbors","Array","console","log","AStar","rows","points","openSet","cameFrom","gScore","fScore","goal","endPointDistances","length","i","heuristicCost","sort","a","b","insert","peek","toString","getHeap","current","extract"],"mappings":"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","sourcesContent":["import MinHeap from './MinHeap';\n\nfunction heuristic(point, endPoint){\n    //TODO make this a switch for the different types of heuristic functions\n    const distance = Math.sqrt(Math.pow((point.x-endPoint.x), 2) + Math.pow((point.y-endPoint.y), 2));  \n\n    return [endPoint, distance];\n} \n\nfunction getPoints(gridMap){\n    let startPoint = null;\n    let wallPoints = [];\n    let endPoints = [];\n\n    gridMap.map((square) => {\n        if(square.val && square.type ===  \"start\"){\n            // console.log(square);\n            startPoint = square;\n\n            return null;\n        }\n\n        if(square.val && square.type === \"wall\"){\n            // console.log(square);\n            wallPoints.push(square);\n\n            return null;\n        }\n\n        if(square.val && square.type === \"end\"){\n            // console.log(square);\n            endPoints.push(square);\n\n            return null;\n        }\n\n        return null;\n    })\n\n    return [startPoint, wallPoints, endPoints];\n}\n\nfunction getNeighbors(point, gridMap, cols){\n    //Point                                 Index\n    // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n    // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n    // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n    // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n    // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n    // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n    // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n    // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n\n    const left        = (point.x-1) + (point.y * cols);\n    const right       = (point.x+1) + (point.y * cols);\n    const up          = (point.x) + (point.y-1 * cols);\n    const down        = (point.x) + (point.y+1 * cols);\n    const topLeft     = (point.x-1) + (point.y-1 * cols);\n    const topRight    = (point.x+1) + (point.y-1 * cols);\n    const bottomLeft  = (point.x-1) + (point.y+1 * cols);\n    const bottomRight = (point.x+1) + (point.y+1 * cols);\n    \n    const neighbors = new Array(8);\n    console.log();\n    //Grid was setup so whenever a point has a type it has a value otherwise it's null\n    if(gridMap[left] && gridMap[left].type !== \"wall\"){\n        neighbors[0] = gridMap[left];\n    }\n    if(gridMap[right] && gridMap[right].type !== \"wall\"){\n        neighbors[1] = gridMap[right];\n    }\n    if(gridMap[up] && gridMap[up].type !== \"wall\"){\n        neighbors[2] = gridMap[up];\n    }\n    if(gridMap[down] && gridMap[down].type !== \"wall\"){\n        neighbors[3] = gridMap[down];\n    }\n    if(gridMap[topLeft] && gridMap[topLeft].type !== \"wall\"){\n        neighbors[4] = gridMap[topLeft];\n    }\n    if(gridMap[topRight] && gridMap[topRight].type !== \"wall\"){\n        neighbors[5] = gridMap[topRight];\n    }\n    if(gridMap[bottomLeft] && gridMap[bottomLeft].type !== \"wall\"){\n        neighbors[6] = gridMap[bottomLeft];\n    }\n    if(gridMap[bottomRight] && gridMap[bottomRight].type !== \"wall\"){\n        neighbors[7] = gridMap[bottomRight];\n    }\n\n    return neighbors;\n}\n\nfunction AStar(rows, cols, gridMap){\n    const [startPoint, wallPoints, endPoints] = getPoints(gridMap);\n\n    let points = {};\n    let openSet = new MinHeap();\n    let cameFrom = {};\n    let gScore = {};\n    let fScore = {};\n    let goal = null;\n    \n\n    if(!startPoint || !endPoints){\n        console.log(\"Map must have a start point, and an end point\");\n        return \"Map must have a start point, and an end point\"; \n    }\n\n    gScore[startPoint.x + (startPoint.y * cols)] = 0;\n\n    const endPointDistances = new Array(endPoints.length);\n\n    endPoints.map((endPoint, i) => {\n        const heuristicCost = heuristic(startPoint, endPoint); \n\n        endPointDistances[i] = [heuristicCost[0], gScore[startPoint.x + (startPoint.y * cols)] + heuristicCost[1]];\n\n        return null;\n    })\n\n    console.log(endPointDistances);\n    \n    endPointDistances.sort((a, b) => {\n        if(a[1] > b[1]){\n            return 1\n        }\n        if(a[1] < b[1]){\n            return -1\n        }\n\n        return 0;\n    });\n\n    goal = endPointDistances[0][0];\n\n    fScore[startPoint.x + (startPoint.y * cols)] = endPointDistances[0][1];\n\n    points[fScore[startPoint.x + (startPoint.y * cols)]] = startPoint;\n    openSet.insert(fScore[startPoint.x + (startPoint.y * cols)]);\n\n    while(openSet.length !== 0){\n        console.log(\"points\", points);\n        console.log(\"heap\", openSet.peek());\n        console.log(points[openSet.peek().toString()]);\n        console.log(openSet.getHeap().toString());\n\n        const current = points[openSet.peek().toString()];\n\n        console.log(current);\n        console.log(openSet);\n        openSet.extract();\n\n        if(current.x === goal.x && current.y === goal.y){\n            console.log(\"GOOOAAAAALLLLLLL\")\n            return;\n        }\n\n        const neighbors = getNeighbors(current, gridMap, cols);\n\n        console.log(neighbors)\n    }\n}\n\nexport default AStar"]},"metadata":{},"sourceType":"module"}