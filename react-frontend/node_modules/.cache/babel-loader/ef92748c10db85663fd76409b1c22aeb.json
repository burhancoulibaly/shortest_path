{"ast":null,"code":"import FibonacciHeapNode from '../Algorithms/FibonacciHeapNode';\nconst Node = FibonacciHeapNode;\n\nfunction getNeighbors(current, rows, cols, node) {\n  //Point                                 Index\n  // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n  // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n  // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n  // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n  // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n  // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n  // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n  // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n  const neighbors = new Array(8);\n\n  if (current.getPoint().x > 0) {\n    const left = getIndex(current.getPoint().x - 1, current.getPoint().y, cols);\n\n    if (node[left].node.getPoint().type !== \"wall\") {\n      neighbors[0] = node[left].node;\n    }\n  }\n\n  if (current.getPoint().x < cols - 1) {\n    const right = getIndex(current.getPoint().x + 1, current.getPoint().y, cols);\n\n    if (node[right].node.getPoint().type !== \"wall\") {\n      neighbors[1] = node[right].node;\n    }\n  }\n\n  if (current.getPoint().y > 0) {\n    const up = getIndex(current.getPoint().x, current.getPoint().y - 1, cols);\n\n    if (node[up].node.getPoint().type !== \"wall\") {\n      neighbors[2] = node[up].node;\n    }\n  }\n\n  if (current.getPoint().y < rows - 1) {\n    const down = getIndex(current.getPoint().x, current.getPoint().y + 1, cols);\n\n    if (node[down].node.getPoint().type !== \"wall\") {\n      neighbors[3] = node[down].node;\n    }\n  }\n\n  if (current.getPoint().x > 0 && current.getPoint().y > 0) {\n    const topLeft = getIndex(current.getPoint().x - 1, current.getPoint().y - 1, cols);\n\n    if (node[topLeft].node.getPoint().type !== \"wall\") {\n      neighbors[4] = node[topLeft].node;\n    }\n  }\n\n  if (current.getPoint().x < cols - 1 && current.getPoint().y > 0) {\n    const topRight = getIndex(current.getPoint().x + 1, current.getPoint().y - 1, cols);\n\n    if (node[topRight].node.getPoint().type !== \"wall\") {\n      neighbors[5] = node[topRight].node;\n    }\n  }\n\n  if (current.getPoint().x > 0 && current.getPoint().y < rows - 1) {\n    const bottomLeft = getIndex(current.getPoint().x - 1, current.getPoint().y + 1, cols);\n\n    if (node[bottomLeft].node.getPoint().type !== \"wall\") {\n      neighbors[6] = node[bottomLeft].node;\n    }\n  }\n\n  if (current.getPoint().x < cols - 1 && current.getPoint().y < rows - 1) {\n    const bottomRight = getIndex(current.getPoint().x + 1, current.getPoint().y + 1, cols);\n\n    if (node[bottomRight].node.getPoint().type !== \"wall\") {\n      neighbors[7] = node[bottomRight].node;\n    }\n  }\n\n  return neighbors;\n}\n\nfunction BFS(rows, cols, gridMap, memState, setState) {\n  const [startPoint, endPoints] = getPoints(gridMap);\n  const queue = new FibonacciHeap();\n  const cameFrom = {};\n  const node = {};\n  const states = [];\n  return;\n}\n\nexport default BFS;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Algorithms/BFS.js"],"names":["FibonacciHeapNode","Node","getNeighbors","current","rows","cols","node","neighbors","Array","getPoint","x","left","getIndex","y","type","right","up","down","topLeft","topRight","bottomLeft","bottomRight","BFS","gridMap","memState","setState","startPoint","endPoints","getPoints","queue","FibonacciHeap","cameFrom","states"],"mappings":"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","sourcesContent":["import FibonacciHeapNode from '../Algorithms/FibonacciHeapNode';\n\nconst Node = FibonacciHeapNode;\n\nfunction getNeighbors(current, rows, cols, node){\n    //Point                                 Index\n    // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n    // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n    // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n    // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n    // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n    // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n    // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n    // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n\n    const neighbors = new Array(8);\n    \n    if(current.getPoint().x > 0){\n        const left = getIndex((current.getPoint().x-1), (current.getPoint().y), cols);\n\n        if(node[left].node.getPoint().type !== \"wall\"){\n            neighbors[0] = node[left].node;   \n        }\n    }\n    if(current.getPoint().x < cols-1){\n        const right = getIndex((current.getPoint().x+1), (current.getPoint().y), cols);\n\n        if(node[right].node.getPoint().type !== \"wall\"){\n            neighbors[1] = node[right].node;   \n        }\n    }\n    if(current.getPoint().y > 0){\n        const up = getIndex((current.getPoint().x), (current.getPoint().y-1), cols);\n\n        if(node[up].node.getPoint().type !== \"wall\"){\n            neighbors[2] = node[up].node;   \n        }\n    }\n    if(current.getPoint().y < rows-1){\n        const down = getIndex((current.getPoint().x), (current.getPoint().y+1), cols);\n\n        if(node[down].node.getPoint().type !== \"wall\"){\n            neighbors[3] = node[down].node;   \n        }\n    }\n    if(current.getPoint().x > 0 && current.getPoint().y > 0){\n        const topLeft = getIndex((current.getPoint().x-1), (current.getPoint().y-1), cols);\n\n        if(node[topLeft].node.getPoint().type !== \"wall\"){\n            neighbors[4] = node[topLeft].node;   \n        }\n    }\n    if(current.getPoint().x < cols-1 && current.getPoint().y > 0){\n        const topRight = getIndex((current.getPoint().x+1), (current.getPoint().y-1), cols);\n\n        if(node[topRight].node.getPoint().type !== \"wall\"){\n            neighbors[5] = node[topRight].node;            \n        }\n    }\n    if(current.getPoint().x > 0 && current.getPoint().y < rows-1){\n        const bottomLeft  = getIndex((current.getPoint().x-1), (current.getPoint().y+1), cols);\n\n        if(node[bottomLeft].node.getPoint().type !== \"wall\"){\n            neighbors[6] = node[bottomLeft].node;   \n        }\n    }\n    if(current.getPoint().x < cols-1 && current.getPoint().y < rows-1){\n        const bottomRight = getIndex((current.getPoint().x+1), (current.getPoint().y+1), cols);\n\n        if(node[bottomRight].node.getPoint().type !== \"wall\"){\n            neighbors[7] = node[bottomRight].node;   \n        }\n    }\n\n    return neighbors;\n}\n\nfunction BFS(rows, cols, gridMap, memState, setState){\n    const [startPoint, endPoints] = getPoints(gridMap);\n    const queue = new FibonacciHeap();\n    const cameFrom = {};\n    const node = {};\n    const states = [];\n    return;\n}\n\nexport default BFS;"]},"metadata":{},"sourceType":"module"}