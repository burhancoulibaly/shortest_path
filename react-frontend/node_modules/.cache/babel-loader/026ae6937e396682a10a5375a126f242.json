{"ast":null,"code":"import FibonacciHeapNode from '../Algorithms/FibonacciHeapNode';\nimport FibonacciHeap from '../Algorithms/FibonacciHeap';\n\nfunction getIndex(x, y, cols) {\n  return x + y * cols;\n}\n\nfunction dist(startPoint, endPoint) {\n  //TODO make this a switch for the different types of heuristic functions\n  const distance = Math.sqrt(Math.pow(endPoint.getPoint().x - startPoint.getPoint().x, 2) + Math.pow(endPoint.getPoint().y - startPoint.getPoint().y, 2));\n  return distance;\n}\n\nfunction getPoints(gridMap) {\n  let startPoint = null;\n  let endPoints = [];\n  gridMap.map(square => {\n    if (square.val && square.type === \"start\") {\n      // console.log(square);\n      startPoint = square;\n      return null;\n    }\n\n    if (square.val && square.type === \"end\") {\n      // console.log(square);\n      endPoints.push(square);\n      return null;\n    }\n\n    return null;\n  });\n  return [startPoint, endPoints];\n}\n\nfunction getNeighbors(current, rows, cols, node, cutCorners, allowDiags) {\n  //Point                                 Index\n  // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n  // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n  // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n  // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n  // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n  // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n  // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n  // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n  const neighbors = new Array(8);\n\n  if (current.getPoint().x > 0) {\n    const left = getIndex(current.getPoint().x - 1, current.getPoint().y, cols);\n\n    if (node[left].node.getPoint().type !== \"wall\") {\n      neighbors[0] = node[left].node;\n    }\n  }\n\n  if (current.getPoint().x < cols - 1) {\n    const right = getIndex(current.getPoint().x + 1, current.getPoint().y, cols);\n\n    if (node[right].node.getPoint().type !== \"wall\") {\n      neighbors[1] = node[right].node;\n    }\n  }\n\n  if (current.getPoint().y > 0) {\n    const up = getIndex(current.getPoint().x, current.getPoint().y - 1, cols);\n\n    if (node[up].node.getPoint().type !== \"wall\") {\n      neighbors[2] = node[up].node;\n    }\n  }\n\n  if (current.getPoint().y < rows - 1) {\n    const down = getIndex(current.getPoint().x, current.getPoint().y + 1, cols);\n\n    if (node[down].node.getPoint().type !== \"wall\") {\n      neighbors[3] = node[down].node;\n    }\n  }\n\n  if (point.x > 0 && point.y > 0) {\n    const topLeft = getIndex(point.x - 1, point.y - 1, cols);\n\n    if (gridMap[topLeft].type !== \"wall\" && gridMap[topLeft].type !== \"start\") {\n      if (allowDiags) {\n        if (!cutCorners) {\n          if (gridMap[topLeft + 1].type !== \"wall\" && gridMap[topLeft + 50].type !== \"wall\") {\n            neighbors[4] = gridMap[topLeft];\n          }\n        } else {\n          neighbors[4] = gridMap[topLeft];\n        }\n      }\n    }\n  }\n\n  if (point.x < cols - 1 && point.y > 0) {\n    const topRight = getIndex(point.x + 1, point.y - 1, cols);\n\n    if (gridMap[topRight].type !== \"wall\" && gridMap[topRight].type !== \"start\") {\n      if (allowDiags) {\n        if (!cutCorners) {\n          if (gridMap[topRight - 1].type !== \"wall\" && gridMap[topRight + 50].type !== \"wall\") {\n            neighbors[5] = gridMap[topRight];\n          }\n        } else {\n          neighbors[5] = gridMap[topRight];\n        }\n      }\n    }\n  }\n\n  if (point.x > 0 && point.y < rows - 1) {\n    const bottomLeft = getIndex(point.x - 1, point.y + 1, cols);\n\n    if (gridMap[bottomLeft].type !== \"wall\" && gridMap[bottomLeft].type !== \"start\") {\n      if (allowDiags) {\n        if (!cutCorners) {\n          if (gridMap[bottomLeft + 1].type !== \"wall\" && gridMap[bottomLeft - 50].type !== \"wall\") {\n            neighbors[6] = gridMap[bottomLeft];\n          }\n        } else {\n          neighbors[6] = gridMap[bottomLeft];\n        }\n      }\n    }\n  }\n\n  if (point.x < cols - 1 && point.y < rows - 1) {\n    const bottomRight = getIndex(point.x + 1, point.y + 1, cols);\n\n    if (gridMap[bottomRight].type !== \"wall\" && gridMap[bottomRight].type !== \"start\") {\n      if (allowDiags) {\n        if (!cutCorners) {\n          if (gridMap[bottomRight - 1].type !== \"wall\" && gridMap[bottomRight - 50].type !== \"wall\") {\n            neighbors[7] = gridMap[bottomRight];\n          }\n        } else {\n          neighbors[7] = gridMap[bottomRight];\n        }\n      }\n    }\n  }\n\n  return neighbors;\n}\n\nfunction Dijkstra(rows, cols, gridMap, memState, setState, cutCorners, allowDiags) {\n  const [startPoint, endPoints] = getPoints(gridMap);\n  const heap = new FibonacciHeap();\n  const cameFrom = {};\n  const node = {};\n  const states = []; //TODO: Bug, clears grid but then returns it to its previous state\n\n  const newState = { ...memState,\n    grid: new Array(rows * cols).fill({\n      val: false,\n      type: null\n    }).map((square, i) => {\n      return { ...square,\n        x: i % cols,\n        y: Math.abs((i - i % cols) / cols)\n      };\n    })\n  };\n  states.push(newState);\n  let goal = endPoints[0];\n\n  if (!startPoint || !endPoints) {\n    console.log(\"Map must have a start point, and an end point\");\n    return \"Map must have a start point, and an end point\";\n  }\n\n  gridMap.map((square, index) => {\n    if (getIndex(startPoint.x, startPoint.y, cols) === index) {\n      node[index] = {\n        dist: 0,\n        node: null\n      };\n      cameFrom[index] = null;\n    }\n\n    if (getIndex(startPoint.x, startPoint.y, cols) !== index) {\n      node[index] = {\n        dist: Number.POSITIVE_INFINITY,\n        node: null\n      };\n      cameFrom[index] = null;\n    }\n\n    const currNode = new FibonacciHeapNode(node[index].dist, square);\n    node[index].node = currNode;\n    heap.insert(currNode);\n    return null;\n  });\n\n  while (heap.getRootList().length > 0) {\n    const current = heap.peek(); // console.log(\"new min\",current;\n\n    heap.extractMin(); // console.log(Array.from(heap.getRootList()))\n\n    const newState = { ...memState,\n      grid: memState.grid.map((square, index) => {\n        if (current.getPoint().x === square.x && current.getPoint().y === square.y) {\n          if (current.getPoint().type !== \"start\" && current.getPoint().type !== \"end\") {\n            memState.grid[index] = { ...memState.grid[index],\n              val: true,\n              type: \"neighbors\"\n            };\n          }\n\n          return { ...square\n          };\n        }\n\n        return { ...square\n        };\n      })\n    };\n    states.push(newState);\n\n    if (current.getPoint().x === goal.x && current.getPoint().y === goal.y) {\n      const state = states[states.length - 1];\n      setState({ // return {\n        ...state,\n        //state object is immutable so updates have to be done this way\n        grid: state.grid.map((square, index) => {\n          if (cameFrom[index]) {\n            if (square.type === \"end\") {\n              let prev = cameFrom[index];\n\n              while (prev) {\n                if (prev.type !== \"start\" && prev.type !== \"end\") {\n                  state.grid[getIndex(prev.x, prev.y, state.cols)] = { ...state.grid[getIndex(prev.x, prev.y, state.cols)],\n                    val: true,\n                    type: \"path\"\n                  };\n                }\n\n                prev = cameFrom[getIndex(prev.x, prev.y, state.cols)];\n              }\n\n              return { ...square\n              };\n            }\n\n            return { ...square\n            };\n          }\n\n          return { ...square\n          };\n        })\n      });\n      console.log(\"PATH FOUND!!!!!\");\n      return states;\n    }\n\n    const neighbors = getNeighbors(current, rows, cols, node, cutCorners, allowDiags); // console.log(neighbors)\n\n    neighbors.map(neighbor => {\n      // console.log(neighbor);\n      const currentDist = node[getIndex(current.getPoint().x, current.getPoint().y, cols)].dist + dist(current, neighbor);\n\n      if (currentDist < node[getIndex(neighbor.getPoint().x, neighbor.getPoint().y, cols)].dist) {\n        node[getIndex(neighbor.getPoint().x, neighbor.getPoint().y, cols)].dist = currentDist;\n        cameFrom[getIndex(neighbor.getPoint().x, neighbor.getPoint().y, cols)] = current.getPoint();\n        heap.decreaseKey(neighbor, node[getIndex(neighbor.getPoint().x, neighbor.getPoint().y, cols)].dist);\n        const newState = { ...memState,\n          grid: memState.grid.map((square, index) => {\n            if (neighbor.getPoint().x === square.x && neighbor.getPoint().y === square.y) {\n              if (neighbor.getPoint().type !== \"start\" && neighbor.getPoint().type !== \"end\") {\n                memState.grid[index] = { ...memState.grid[index],\n                  val: true,\n                  type: \"openset\"\n                };\n              }\n\n              return { ...square\n              };\n            }\n\n            return { ...square\n            };\n          })\n        };\n        states.push(newState);\n        return null;\n      }\n\n      return null;\n    });\n  }\n\n  return states;\n}\n\nexport default Dijkstra;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Algorithms/Dijkstra.js"],"names":["FibonacciHeapNode","FibonacciHeap","getIndex","x","y","cols","dist","startPoint","endPoint","distance","Math","sqrt","pow","getPoint","getPoints","gridMap","endPoints","map","square","val","type","push","getNeighbors","current","rows","node","cutCorners","allowDiags","neighbors","Array","left","right","up","down","point","topLeft","topRight","bottomLeft","bottomRight","Dijkstra","memState","setState","heap","cameFrom","states","newState","grid","fill","i","abs","goal","console","log","index","Number","POSITIVE_INFINITY","currNode","insert","getRootList","length","peek","extractMin","state","prev","neighbor","currentDist","decreaseKey"],"mappings":"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","sourcesContent":["import FibonacciHeapNode from '../Algorithms/FibonacciHeapNode';\nimport FibonacciHeap from '../Algorithms/FibonacciHeap';\n\nfunction getIndex(x, y, cols){\n    return (x + (y * cols));\n}\n\nfunction dist(startPoint, endPoint){\n    //TODO make this a switch for the different types of heuristic functions\n    const distance = Math.sqrt(Math.pow((endPoint.getPoint().x-startPoint.getPoint().x), 2) + Math.pow((endPoint.getPoint().y-startPoint.getPoint().y), 2));     \n    return distance;\n}\n\nfunction getPoints(gridMap){\n    let startPoint = null;\n    let endPoints = [];\n    \n    gridMap.map((square) => {\n        if(square.val && square.type ===  \"start\"){\n            // console.log(square);\n            startPoint = square;\n\n            return null;\n        }\n\n        if(square.val && square.type === \"end\"){\n            // console.log(square);\n            endPoints.push(square);\n\n            return null;\n        }\n\n        return null;\n    })\n\n    return [startPoint, endPoints];\n}\n\nfunction getNeighbors(current, rows, cols, node, cutCorners, allowDiags){\n    //Point                                 Index\n    // left point.x-1, point.y              (point.x-1) + (point.y * cols)\n    // right point.x+1, point.y             (point.x+1) + (point.y * cols)\n    // up point.x, point.y-1                (point.x) + (point.y-1 * cols)\n    // down point.x, point.y+1              (point.x) + (point.y+1 * cols)\n    // top left point.x-1, point.y-1        (point.x-1) + (point.y-1 * cols)\n    // top right point.x+1, point.y-1       (point.x+1) + (point.y-1 * cols)\n    // bottom left point.x-1, point.y+1     (point.x-1) + (point.y+1 * cols)\n    // bottom right point.x+1, point.y+1    (point.x+1) + (point.y+1 * cols)\n\n    const neighbors = new Array(8);\n    \n    if(current.getPoint().x > 0){\n        const left = getIndex((current.getPoint().x-1), (current.getPoint().y), cols);\n\n        if(node[left].node.getPoint().type !== \"wall\"){\n            neighbors[0] = node[left].node;   \n        }\n    }\n    if(current.getPoint().x < cols-1){\n        const right = getIndex((current.getPoint().x+1), (current.getPoint().y), cols);\n\n        if(node[right].node.getPoint().type !== \"wall\"){\n            neighbors[1] = node[right].node;   \n        }\n    }\n    if(current.getPoint().y > 0){\n        const up = getIndex((current.getPoint().x), (current.getPoint().y-1), cols);\n\n        if(node[up].node.getPoint().type !== \"wall\"){\n            neighbors[2] = node[up].node;   \n        }\n    }\n    if(current.getPoint().y < rows-1){\n        const down = getIndex((current.getPoint().x), (current.getPoint().y+1), cols);\n\n        if(node[down].node.getPoint().type !== \"wall\"){\n            neighbors[3] = node[down].node;   \n        }\n    }\n    if(point.x > 0 && point.y > 0){\n        const topLeft = getIndex((point.x-1), (point.y-1), cols);\n\n        if(gridMap[topLeft].type !== \"wall\" && gridMap[topLeft].type !== \"start\"){\n            if(allowDiags){\n                if(!cutCorners){\n                    if(gridMap[topLeft+1].type !== \"wall\" && gridMap[topLeft+50].type !== \"wall\"){\n                        neighbors[4] = gridMap[topLeft];\n                    }\n                }else{\n                    neighbors[4] = gridMap[topLeft];\n                }\n            }\n        }\n    }\n    if(point.x < cols-1 && point.y > 0){\n        const topRight = getIndex((point.x+1), (point.y-1), cols);\n\n        if(gridMap[topRight].type !== \"wall\" && gridMap[topRight].type !== \"start\"){\n            if(allowDiags){\n                if(!cutCorners){\n                    if(gridMap[topRight-1].type !== \"wall\" && gridMap[topRight+50].type !== \"wall\"){\n                        neighbors[5] = gridMap[topRight];\n                    }\n                }else{\n                    neighbors[5] = gridMap[topRight];\n                }\n            }\n        }\n    }\n    if(point.x > 0 && point.y < rows-1){\n        const bottomLeft  = getIndex((point.x-1), (point.y+1), cols);\n\n        if(gridMap[bottomLeft].type !== \"wall\" && gridMap[bottomLeft].type !== \"start\"){\n            if(allowDiags){\n                if(!cutCorners){\n                    if(gridMap[bottomLeft+1].type !== \"wall\" && gridMap[bottomLeft-50].type !== \"wall\"){\n                        neighbors[6] = gridMap[bottomLeft];\n                    }\n                }else{\n                    neighbors[6] = gridMap[bottomLeft];\n                }\n            }\n        }\n    }\n    if(point.x < cols-1 && point.y < rows-1){\n        const bottomRight = getIndex((point.x+1), (point.y+1), cols);\n\n        if(gridMap[bottomRight].type !== \"wall\" && gridMap[bottomRight].type !== \"start\"){\n            if(allowDiags){\n                if(!cutCorners){\n                    if(gridMap[bottomRight-1].type !== \"wall\" && gridMap[bottomRight-50].type !== \"wall\"){\n                        neighbors[7] = gridMap[bottomRight];\n                    }\n                }else{\n                    neighbors[7] = gridMap[bottomRight]\n                }\n            }\n        }\n    }\n\n    return neighbors;\n}\n\nfunction Dijkstra(rows, cols, gridMap, memState, setState, cutCorners, allowDiags){\n    const [startPoint, endPoints] = getPoints(gridMap);\n    const heap = new FibonacciHeap();\n    const cameFrom = {};\n    const node = {};\n    const states = [];\n\n    //TODO: Bug, clears grid but then returns it to its previous state\n    const newState = {\n        ...memState,\n        grid: new Array(rows*cols).fill({val: false, type: null}).map((square, i) => {\n            return {\n                ...square,\n                x: i % cols,\n                y: Math.abs((i - (i % cols)) / cols)\n            }\n        })\n    }\n    states.push(newState);\n\n    let goal = endPoints[0];\n\n    if(!startPoint || !endPoints){\n        console.log(\"Map must have a start point, and an end point\");\n        return \"Map must have a start point, and an end point\"; \n    }\n\n    gridMap.map((square, index) => {\n        if(getIndex(startPoint.x, startPoint.y, cols) === index){\n            node[index] = {dist: 0, node: null};\n            cameFrom[index] = null\n        }\n\n        if(getIndex(startPoint.x, startPoint.y, cols) !== index){\n            node[index] = {dist: Number.POSITIVE_INFINITY, node: null};\n            cameFrom[index] = null\n        }\n\n        const currNode = new FibonacciHeapNode(node[index].dist, square);\n        node[index].node = currNode;\n        heap.insert(currNode);\n\n        return null;\n    });\n\n    while(heap.getRootList().length > 0){\n        const current = heap.peek();\n        // console.log(\"new min\",current;\n\n        heap.extractMin();\n        // console.log(Array.from(heap.getRootList()))\n\n        const newState = {\n            ...memState,\n            grid: memState.grid.map((square, index) => {\n                if(current.getPoint().x === square.x && current.getPoint().y === square.y){\n                    if(current.getPoint().type !== \"start\" && current.getPoint().type !== \"end\"){\n                        memState.grid[index] = {\n                            ...memState.grid[index],\n                            val: true,\n                            type: \"neighbors\"\n                        }\n                    }\n                    return {...square}\n                }\n                return {...square}\n            })\n        }\n        states.push(newState);\n\n        if(current.getPoint().x === goal.x && current.getPoint().y === goal.y){\n            const state = states[states.length-1];\n            setState({\n                // return {\n                ...state,\n                //state object is immutable so updates have to be done this way\n                grid: state.grid.map((square, index) => {\n                    if(cameFrom[index]){\n                        if(square.type === \"end\"){\n                            let prev = cameFrom[index];\n                \n                            while(prev){                   \n                                if(prev.type !== \"start\" && prev.type !== \"end\"){\n                                    state.grid[getIndex(prev.x,prev.y,state.cols)] = {\n                                        ...state.grid[getIndex(prev.x,prev.y,state.cols)],\n                                        val: true,\n                                        type: \"path\"\n                                    }\n                                }\n                                prev = cameFrom[getIndex(prev.x,prev.y,state.cols)];\n                            }\n                            return {...square};\n                        }\n                        return {...square};\n                    }\n                    return {...square};\n                })\n            \n            });\n\n            console.log(\"PATH FOUND!!!!!\");\n            return states;\n        }\n\n        const neighbors = getNeighbors(current, rows, cols, node, cutCorners, allowDiags);\n\n        // console.log(neighbors)\n        neighbors.map((neighbor) => {\n            // console.log(neighbor);\n\n            const currentDist = node[getIndex(current.getPoint().x, current.getPoint().y, cols)].dist + dist(current, neighbor);\n\n            if(currentDist < node[getIndex(neighbor.getPoint().x, neighbor.getPoint().y, cols)].dist){\n\n                node[getIndex(neighbor.getPoint().x, neighbor.getPoint().y, cols)].dist = currentDist;\n                \n                cameFrom[getIndex(neighbor.getPoint().x, neighbor.getPoint().y, cols)] = current.getPoint();\n\n                heap.decreaseKey(neighbor, node[getIndex(neighbor.getPoint().x, neighbor.getPoint().y, cols)].dist);\n\n                const newState = {\n                    ...memState,\n                    grid: memState.grid.map((square, index) => {\n                        if(neighbor.getPoint().x === square.x && neighbor.getPoint().y === square.y){\n                            if(neighbor.getPoint().type !== \"start\" && neighbor.getPoint().type !== \"end\"){\n                                memState.grid[index] = {\n                                    ...memState.grid[index],\n                                    val: true,\n                                    type: \"openset\"\n                                }\n                            }\n                            return {...square}\n                        }\n                        return {...square}\n                    })\n                }\n                states.push(newState); \n\n                return null;\n            } \n\n            return null;\n        })\n    }\n    \n    return states;\n}\n\nexport default Dijkstra;"]},"metadata":{},"sourceType":"module"}