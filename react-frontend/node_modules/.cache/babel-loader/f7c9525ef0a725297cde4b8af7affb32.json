{"ast":null,"code":"import { ApolloClient, InMemoryCache } from '@apollo/client';\nconst httpLink = new HttpLink({\n  uri: 'http://localhost:3000/graphql'\n});\nconst authLink = new ApolloLink((operation, forward) => {\n  // Retrieve the authorization token from local storage.\n  const token = localStorage.getItem('auth_token'); // Use the setContext method to set the HTTP headers.\n\n  operation.setContext({\n    headers: {\n      authorization: token ? `Bearer ${token}` : ''\n    }\n  }); // Call the next link in the middleware chain.\n\n  return forward(operation);\n});\nexport default new ApolloClient({\n  uri: 'http://localhost:3000/graphql',\n  cache: new InMemoryCache({\n    addTypename: false\n  }),\n  credentials: 'include'\n});","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/ApolloConfig.js"],"names":["ApolloClient","InMemoryCache","httpLink","HttpLink","uri","authLink","ApolloLink","operation","forward","token","localStorage","getItem","setContext","headers","authorization","cache","addTypename","credentials"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,gBAA5C;AAEA,MAAMC,QAAQ,GAAG,IAAIC,QAAJ,CAAa;AAAEC,EAAAA,GAAG,EAAE;AAAP,CAAb,CAAjB;AAEA,MAAMC,QAAQ,GAAG,IAAIC,UAAJ,CAAe,CAACC,SAAD,EAAYC,OAAZ,KAAwB;AACpD;AACA,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAd,CAFoD,CAIpD;;AACAJ,EAAAA,SAAS,CAACK,UAAV,CAAqB;AACnBC,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAEL,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB;AADpC;AADU,GAArB,EALoD,CAWpD;;AACA,SAAOD,OAAO,CAACD,SAAD,CAAd;AACH,CAbgB,CAAjB;AAeA,eAAe,IAAIP,YAAJ,CAAiB;AAC5BI,EAAAA,GAAG,EAAE,+BADuB;AAE5BW,EAAAA,KAAK,EAAE,IAAId,aAAJ,CAAkB;AACrBe,IAAAA,WAAW,EAAE;AADQ,GAAlB,CAFqB;AAK5BC,EAAAA,WAAW,EAAE;AALe,CAAjB,CAAf","sourcesContent":["import { ApolloClient, InMemoryCache } from '@apollo/client';\n\nconst httpLink = new HttpLink({ uri: 'http://localhost:3000/graphql' });\n\nconst authLink = new ApolloLink((operation, forward) => {\n    // Retrieve the authorization token from local storage.\n    const token = localStorage.getItem('auth_token');\n  \n    // Use the setContext method to set the HTTP headers.\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : ''\n      }\n    });\n  \n    // Call the next link in the middleware chain.\n    return forward(operation);\n});\n\nexport default new ApolloClient({\n    uri: 'http://localhost:3000/graphql',\n    cache: new InMemoryCache({\n        addTypename: false\n    }),\n    credentials: 'include'\n});"]},"metadata":{},"sourceType":"module"}