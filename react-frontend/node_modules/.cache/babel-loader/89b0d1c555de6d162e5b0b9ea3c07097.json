{"ast":null,"code":"import react, { useContext } from 'react';\nimport { ApolloClient, InMemoryCache, ApolloLink, HttpLink } from '@apollo/client';\nimport UserContext from './UserContext';\nconst httpLink = new HttpLink({\n  uri: 'http://localhost:3000/graphql'\n});\nconst authLink = new ApolloLink((operation, forward) => {\n  const {\n    user\n  } = useContext(UserContext); // Use the setContext method to set the HTTP headers.\n\n  operation.setContext({\n    headers: {\n      authorization: localStorage.getItem('user') ? `Bearer ${user.accessToken}` : \"\"\n    }\n  }); // Call the next link in the middleware chain.\n\n  return forward(operation);\n});\nexport default new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache({\n    addTypename: false\n  }),\n  credentials: 'include'\n});","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/ApolloConfig.js"],"names":["react","useContext","ApolloClient","InMemoryCache","ApolloLink","HttpLink","UserContext","httpLink","uri","authLink","operation","forward","user","setContext","headers","authorization","localStorage","getItem","accessToken","link","concat","cache","addTypename","credentials"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,YAAT,EAAuBC,aAAvB,EAAsCC,UAAtC,EAAkDC,QAAlD,QAAkE,gBAAlE;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,MAAMC,QAAQ,GAAG,IAAIF,QAAJ,CAAa;AAAEG,EAAAA,GAAG,EAAE;AAAP,CAAb,CAAjB;AAEA,MAAMC,QAAQ,GAAG,IAAIL,UAAJ,CAAe,CAACM,SAAD,EAAYC,OAAZ,KAAwB;AACpD,QAAM;AAACC,IAAAA;AAAD,MAASX,UAAU,CAACK,WAAD,CAAzB,CADoD,CAGpD;;AACAI,EAAAA,SAAS,CAACG,UAAV,CAAqB;AACnBC,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAEC,YAAY,CAACC,OAAb,CAAqB,MAArB,IAAgC,UAASL,IAAI,CAACM,WAAY,EAA1D,GAA8D;AADtE;AADU,GAArB,EAJoD,CAUpD;;AACA,SAAOP,OAAO,CAACD,SAAD,CAAd;AACH,CAZgB,CAAjB;AAcA,eAAe,IAAIR,YAAJ,CAAiB;AAC5BiB,EAAAA,IAAI,EAAEV,QAAQ,CAACW,MAAT,CAAgBb,QAAhB,CADsB;AAE5Bc,EAAAA,KAAK,EAAE,IAAIlB,aAAJ,CAAkB;AACrBmB,IAAAA,WAAW,EAAE;AADQ,GAAlB,CAFqB;AAK5BC,EAAAA,WAAW,EAAE;AALe,CAAjB,CAAf","sourcesContent":["import react, { useContext } from 'react';\nimport { ApolloClient, InMemoryCache, ApolloLink, HttpLink } from '@apollo/client';\nimport UserContext from './UserContext';\n\nconst httpLink = new HttpLink({ uri: 'http://localhost:3000/graphql' });\n\nconst authLink = new ApolloLink((operation, forward) => {\n    const {user} = useContext(UserContext);\n  \n    // Use the setContext method to set the HTTP headers.\n    operation.setContext({\n      headers: {\n        authorization: localStorage.getItem('user') ? `Bearer ${user.accessToken}` : \"\"\n      }\n    });\n  \n    // Call the next link in the middleware chain.\n    return forward(operation);\n});\n\nexport default new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache({\n        addTypename: false\n    }),\n    credentials: 'include'\n});"]},"metadata":{},"sourceType":"module"}