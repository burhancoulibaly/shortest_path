{"ast":null,"code":"var _jsxFileName = \"/home/menekou/projects/react/shortest-path/react-frontend/src/Routes.js\";\nimport React, { useState, useMemo } from \"react\";\nimport apolloClient from './ApolloConfig';\nimport LoginPage from './Login Page/LoginPage';\nimport Home from './Home/Home';\nimport App from './App/App';\nimport { ApolloProvider } from '@apollo/client';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\nimport UserContext from './UserContext';\n\nfunction Routes() {\n  const [user, setUser] = useState();\n  const value = useMemo(() => [user, setUser], [user, setUser]);\n  useEffect(() => {\n    fetch(\"http://localhost:3000\").then(res => res.json()).then(result => {\n      setIsLoaded(true);\n      setItems(result.items);\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      setIsLoaded(true);\n      setError(error);\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(Router, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(UserContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ApolloProvider, {\n    client: apolloClient,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Redirect, {\n    to: \"/home\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 54\n    }\n  })), /*#__PURE__*/React.createElement(Route, {\n    path: \"/app\",\n    component: App,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    path: \"/home\",\n    component: Home,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    path: \"/login\",\n    component: LoginPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 25\n    }\n  })))));\n}\n\n;\nexport default Routes;","map":{"version":3,"sources":["/home/menekou/projects/react/shortest-path/react-frontend/src/Routes.js"],"names":["React","useState","useMemo","apolloClient","LoginPage","Home","App","ApolloProvider","BrowserRouter","Router","Switch","Route","Redirect","UserContext","Routes","user","setUser","value","useEffect","fetch","then","res","json","result","setIsLoaded","setItems","items","error","setError"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,OAA1B,QAAyC,OAAzC;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,GAAP,MAAgB,WAAhB;AACA,SAASC,cAAT,QAA+B,gBAA/B;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,MAAlC,EAA0CC,KAA1C,EAAiDC,QAAjD,QAAiE,kBAAjE;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,SAASC,MAAT,GAAkB;AACd,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBf,QAAQ,EAAhC;AAEA,QAAMgB,KAAK,GAAGf,OAAO,CAAC,MAAO,CAACa,IAAD,EAAOC,OAAP,CAAR,EAA0B,CAACD,IAAD,EAAOC,OAAP,CAA1B,CAArB;AAEAE,EAAAA,SAAS,CAAC,MAAM;AACZC,IAAAA,KAAK,CAAC,uBAAD,CAAL,CACGC,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAGKG,MAAD,IAAY;AACVC,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAC,MAAAA,QAAQ,CAACF,MAAM,CAACG,KAAR,CAAR;AACD,KANL,EAOI;AACA;AACA;AACCC,IAAAA,KAAD,IAAW;AACTH,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAI,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,KAbL;AAeD,GAhBM,EAgBJ,EAhBI,CAAT;AAkBA,sBACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEV,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,cAAD;AAAgB,IAAA,MAAM,EAAEd,YAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAE,IAAd;AAAoB,IAAA,IAAI,EAAC,GAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA6B,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA7B,CADJ,eAEI,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,SAAS,EAAEG,GAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,eAGI,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,OAAZ;AAAoB,IAAA,SAAS,EAAED,IAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,eAII,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,QAAZ;AAAqB,IAAA,SAAS,EAAED,SAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CADJ,CADJ,CADJ,CADJ;AAcH;;AAAA;AAED,eAAeU,MAAf","sourcesContent":["import React, { useState, useMemo } from \"react\";\nimport apolloClient from './ApolloConfig'\nimport LoginPage from './Login Page/LoginPage';\nimport Home from './Home/Home';\nimport App from './App/App'\nimport { ApolloProvider } from '@apollo/client';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\nimport UserContext from './UserContext';\n\nfunction Routes() {\n    const [user, setUser] = useState();\n\n    const value = useMemo(() => ([user, setUser]), [user, setUser]);\n\n    useEffect(() => {\n        fetch(\"http://localhost:3000\")\n          .then(res => res.json())\n          .then(\n            (result) => {\n              setIsLoaded(true);\n              setItems(result.items);\n            },\n            // Note: it's important to handle errors here\n            // instead of a catch() block so that we don't swallow\n            // exceptions from actual bugs in components.\n            (error) => {\n              setIsLoaded(true);\n              setError(error);\n            }\n          )\n      }, [])\n\n    return (\n        <Router> \n            <UserContext.Provider value={value}>\n                <ApolloProvider client={apolloClient}>\n                    <Switch>\n                        <Route exact={true} path=\"/\"><Redirect to=\"/home\"/></Route>\n                        <Route path=\"/app\" component={App}/>\n                        <Route path=\"/home\" component={Home}/>\n                        <Route path=\"/login\" component={LoginPage}/>\n                    </Switch>\n                </ApolloProvider>\n            </UserContext.Provider>\n        </Router>\n    );\n};\n\nexport default Routes;"]},"metadata":{},"sourceType":"module"}